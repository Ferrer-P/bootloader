
User_apps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007328  08008188  08008188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800f4b0  0800f4b0  0000f4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4cc  0800f4cc  0001008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4cc  0800f4cc  0000f4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4d4  0800f4d4  0001008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4d4  0800f4d4  0000f4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4d8  0800f4d8  0000f4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800f4dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001008c  2**0
                  CONTENTS
 10 .bss          00000984  2000008c  2000008c  0001008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a10  20000a10  0001008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000100bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017c0b  00000000  00000000  000100ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b72  00000000  00000000  00027d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001328  00000000  00000000  0002b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ec4  00000000  00000000  0002cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000238e2  00000000  00000000  0002da6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a88a  00000000  00000000  0005134e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd579  00000000  00000000  0006bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005378  00000000  00000000  00139154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0013e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	; (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	; (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	2000008c 	.word	0x2000008c
 80081a4:	00000000 	.word	0x00000000
 80081a8:	0800f498 	.word	0x0800f498

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	; (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	; (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	20000090 	.word	0x20000090
 80081c4:	0800f498 	.word	0x0800f498

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295
 80081dc:	f000 b970 	b.w	80084c0 <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9e08      	ldr	r6, [sp, #32]
 80081fe:	460d      	mov	r5, r1
 8008200:	4604      	mov	r4, r0
 8008202:	460f      	mov	r7, r1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d14a      	bne.n	800829e <__udivmoddi4+0xa6>
 8008208:	428a      	cmp	r2, r1
 800820a:	4694      	mov	ip, r2
 800820c:	d965      	bls.n	80082da <__udivmoddi4+0xe2>
 800820e:	fab2 f382 	clz	r3, r2
 8008212:	b143      	cbz	r3, 8008226 <__udivmoddi4+0x2e>
 8008214:	fa02 fc03 	lsl.w	ip, r2, r3
 8008218:	f1c3 0220 	rsb	r2, r3, #32
 800821c:	409f      	lsls	r7, r3
 800821e:	fa20 f202 	lsr.w	r2, r0, r2
 8008222:	4317      	orrs	r7, r2
 8008224:	409c      	lsls	r4, r3
 8008226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800822a:	fa1f f58c 	uxth.w	r5, ip
 800822e:	fbb7 f1fe 	udiv	r1, r7, lr
 8008232:	0c22      	lsrs	r2, r4, #16
 8008234:	fb0e 7711 	mls	r7, lr, r1, r7
 8008238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800823c:	fb01 f005 	mul.w	r0, r1, r5
 8008240:	4290      	cmp	r0, r2
 8008242:	d90a      	bls.n	800825a <__udivmoddi4+0x62>
 8008244:	eb1c 0202 	adds.w	r2, ip, r2
 8008248:	f101 37ff 	add.w	r7, r1, #4294967295
 800824c:	f080 811c 	bcs.w	8008488 <__udivmoddi4+0x290>
 8008250:	4290      	cmp	r0, r2
 8008252:	f240 8119 	bls.w	8008488 <__udivmoddi4+0x290>
 8008256:	3902      	subs	r1, #2
 8008258:	4462      	add	r2, ip
 800825a:	1a12      	subs	r2, r2, r0
 800825c:	b2a4      	uxth	r4, r4
 800825e:	fbb2 f0fe 	udiv	r0, r2, lr
 8008262:	fb0e 2210 	mls	r2, lr, r0, r2
 8008266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800826a:	fb00 f505 	mul.w	r5, r0, r5
 800826e:	42a5      	cmp	r5, r4
 8008270:	d90a      	bls.n	8008288 <__udivmoddi4+0x90>
 8008272:	eb1c 0404 	adds.w	r4, ip, r4
 8008276:	f100 32ff 	add.w	r2, r0, #4294967295
 800827a:	f080 8107 	bcs.w	800848c <__udivmoddi4+0x294>
 800827e:	42a5      	cmp	r5, r4
 8008280:	f240 8104 	bls.w	800848c <__udivmoddi4+0x294>
 8008284:	4464      	add	r4, ip
 8008286:	3802      	subs	r0, #2
 8008288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800828c:	1b64      	subs	r4, r4, r5
 800828e:	2100      	movs	r1, #0
 8008290:	b11e      	cbz	r6, 800829a <__udivmoddi4+0xa2>
 8008292:	40dc      	lsrs	r4, r3
 8008294:	2300      	movs	r3, #0
 8008296:	e9c6 4300 	strd	r4, r3, [r6]
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	428b      	cmp	r3, r1
 80082a0:	d908      	bls.n	80082b4 <__udivmoddi4+0xbc>
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	f000 80ed 	beq.w	8008482 <__udivmoddi4+0x28a>
 80082a8:	2100      	movs	r1, #0
 80082aa:	e9c6 0500 	strd	r0, r5, [r6]
 80082ae:	4608      	mov	r0, r1
 80082b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b4:	fab3 f183 	clz	r1, r3
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d149      	bne.n	8008350 <__udivmoddi4+0x158>
 80082bc:	42ab      	cmp	r3, r5
 80082be:	d302      	bcc.n	80082c6 <__udivmoddi4+0xce>
 80082c0:	4282      	cmp	r2, r0
 80082c2:	f200 80f8 	bhi.w	80084b6 <__udivmoddi4+0x2be>
 80082c6:	1a84      	subs	r4, r0, r2
 80082c8:	eb65 0203 	sbc.w	r2, r5, r3
 80082cc:	2001      	movs	r0, #1
 80082ce:	4617      	mov	r7, r2
 80082d0:	2e00      	cmp	r6, #0
 80082d2:	d0e2      	beq.n	800829a <__udivmoddi4+0xa2>
 80082d4:	e9c6 4700 	strd	r4, r7, [r6]
 80082d8:	e7df      	b.n	800829a <__udivmoddi4+0xa2>
 80082da:	b902      	cbnz	r2, 80082de <__udivmoddi4+0xe6>
 80082dc:	deff      	udf	#255	; 0xff
 80082de:	fab2 f382 	clz	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 8090 	bne.w	8008408 <__udivmoddi4+0x210>
 80082e8:	1a8a      	subs	r2, r1, r2
 80082ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80082ee:	fa1f fe8c 	uxth.w	lr, ip
 80082f2:	2101      	movs	r1, #1
 80082f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80082f8:	fb07 2015 	mls	r0, r7, r5, r2
 80082fc:	0c22      	lsrs	r2, r4, #16
 80082fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008302:	fb0e f005 	mul.w	r0, lr, r5
 8008306:	4290      	cmp	r0, r2
 8008308:	d908      	bls.n	800831c <__udivmoddi4+0x124>
 800830a:	eb1c 0202 	adds.w	r2, ip, r2
 800830e:	f105 38ff 	add.w	r8, r5, #4294967295
 8008312:	d202      	bcs.n	800831a <__udivmoddi4+0x122>
 8008314:	4290      	cmp	r0, r2
 8008316:	f200 80cb 	bhi.w	80084b0 <__udivmoddi4+0x2b8>
 800831a:	4645      	mov	r5, r8
 800831c:	1a12      	subs	r2, r2, r0
 800831e:	b2a4      	uxth	r4, r4
 8008320:	fbb2 f0f7 	udiv	r0, r2, r7
 8008324:	fb07 2210 	mls	r2, r7, r0, r2
 8008328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800832c:	fb0e fe00 	mul.w	lr, lr, r0
 8008330:	45a6      	cmp	lr, r4
 8008332:	d908      	bls.n	8008346 <__udivmoddi4+0x14e>
 8008334:	eb1c 0404 	adds.w	r4, ip, r4
 8008338:	f100 32ff 	add.w	r2, r0, #4294967295
 800833c:	d202      	bcs.n	8008344 <__udivmoddi4+0x14c>
 800833e:	45a6      	cmp	lr, r4
 8008340:	f200 80bb 	bhi.w	80084ba <__udivmoddi4+0x2c2>
 8008344:	4610      	mov	r0, r2
 8008346:	eba4 040e 	sub.w	r4, r4, lr
 800834a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800834e:	e79f      	b.n	8008290 <__udivmoddi4+0x98>
 8008350:	f1c1 0720 	rsb	r7, r1, #32
 8008354:	408b      	lsls	r3, r1
 8008356:	fa22 fc07 	lsr.w	ip, r2, r7
 800835a:	ea4c 0c03 	orr.w	ip, ip, r3
 800835e:	fa05 f401 	lsl.w	r4, r5, r1
 8008362:	fa20 f307 	lsr.w	r3, r0, r7
 8008366:	40fd      	lsrs	r5, r7
 8008368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800836c:	4323      	orrs	r3, r4
 800836e:	fbb5 f8f9 	udiv	r8, r5, r9
 8008372:	fa1f fe8c 	uxth.w	lr, ip
 8008376:	fb09 5518 	mls	r5, r9, r8, r5
 800837a:	0c1c      	lsrs	r4, r3, #16
 800837c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008380:	fb08 f50e 	mul.w	r5, r8, lr
 8008384:	42a5      	cmp	r5, r4
 8008386:	fa02 f201 	lsl.w	r2, r2, r1
 800838a:	fa00 f001 	lsl.w	r0, r0, r1
 800838e:	d90b      	bls.n	80083a8 <__udivmoddi4+0x1b0>
 8008390:	eb1c 0404 	adds.w	r4, ip, r4
 8008394:	f108 3aff 	add.w	sl, r8, #4294967295
 8008398:	f080 8088 	bcs.w	80084ac <__udivmoddi4+0x2b4>
 800839c:	42a5      	cmp	r5, r4
 800839e:	f240 8085 	bls.w	80084ac <__udivmoddi4+0x2b4>
 80083a2:	f1a8 0802 	sub.w	r8, r8, #2
 80083a6:	4464      	add	r4, ip
 80083a8:	1b64      	subs	r4, r4, r5
 80083aa:	b29d      	uxth	r5, r3
 80083ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80083b0:	fb09 4413 	mls	r4, r9, r3, r4
 80083b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80083b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80083bc:	45a6      	cmp	lr, r4
 80083be:	d908      	bls.n	80083d2 <__udivmoddi4+0x1da>
 80083c0:	eb1c 0404 	adds.w	r4, ip, r4
 80083c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80083c8:	d26c      	bcs.n	80084a4 <__udivmoddi4+0x2ac>
 80083ca:	45a6      	cmp	lr, r4
 80083cc:	d96a      	bls.n	80084a4 <__udivmoddi4+0x2ac>
 80083ce:	3b02      	subs	r3, #2
 80083d0:	4464      	add	r4, ip
 80083d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80083d6:	fba3 9502 	umull	r9, r5, r3, r2
 80083da:	eba4 040e 	sub.w	r4, r4, lr
 80083de:	42ac      	cmp	r4, r5
 80083e0:	46c8      	mov	r8, r9
 80083e2:	46ae      	mov	lr, r5
 80083e4:	d356      	bcc.n	8008494 <__udivmoddi4+0x29c>
 80083e6:	d053      	beq.n	8008490 <__udivmoddi4+0x298>
 80083e8:	b156      	cbz	r6, 8008400 <__udivmoddi4+0x208>
 80083ea:	ebb0 0208 	subs.w	r2, r0, r8
 80083ee:	eb64 040e 	sbc.w	r4, r4, lr
 80083f2:	fa04 f707 	lsl.w	r7, r4, r7
 80083f6:	40ca      	lsrs	r2, r1
 80083f8:	40cc      	lsrs	r4, r1
 80083fa:	4317      	orrs	r7, r2
 80083fc:	e9c6 7400 	strd	r7, r4, [r6]
 8008400:	4618      	mov	r0, r3
 8008402:	2100      	movs	r1, #0
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	f1c3 0120 	rsb	r1, r3, #32
 800840c:	fa02 fc03 	lsl.w	ip, r2, r3
 8008410:	fa20 f201 	lsr.w	r2, r0, r1
 8008414:	fa25 f101 	lsr.w	r1, r5, r1
 8008418:	409d      	lsls	r5, r3
 800841a:	432a      	orrs	r2, r5
 800841c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008420:	fa1f fe8c 	uxth.w	lr, ip
 8008424:	fbb1 f0f7 	udiv	r0, r1, r7
 8008428:	fb07 1510 	mls	r5, r7, r0, r1
 800842c:	0c11      	lsrs	r1, r2, #16
 800842e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008432:	fb00 f50e 	mul.w	r5, r0, lr
 8008436:	428d      	cmp	r5, r1
 8008438:	fa04 f403 	lsl.w	r4, r4, r3
 800843c:	d908      	bls.n	8008450 <__udivmoddi4+0x258>
 800843e:	eb1c 0101 	adds.w	r1, ip, r1
 8008442:	f100 38ff 	add.w	r8, r0, #4294967295
 8008446:	d22f      	bcs.n	80084a8 <__udivmoddi4+0x2b0>
 8008448:	428d      	cmp	r5, r1
 800844a:	d92d      	bls.n	80084a8 <__udivmoddi4+0x2b0>
 800844c:	3802      	subs	r0, #2
 800844e:	4461      	add	r1, ip
 8008450:	1b49      	subs	r1, r1, r5
 8008452:	b292      	uxth	r2, r2
 8008454:	fbb1 f5f7 	udiv	r5, r1, r7
 8008458:	fb07 1115 	mls	r1, r7, r5, r1
 800845c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008460:	fb05 f10e 	mul.w	r1, r5, lr
 8008464:	4291      	cmp	r1, r2
 8008466:	d908      	bls.n	800847a <__udivmoddi4+0x282>
 8008468:	eb1c 0202 	adds.w	r2, ip, r2
 800846c:	f105 38ff 	add.w	r8, r5, #4294967295
 8008470:	d216      	bcs.n	80084a0 <__udivmoddi4+0x2a8>
 8008472:	4291      	cmp	r1, r2
 8008474:	d914      	bls.n	80084a0 <__udivmoddi4+0x2a8>
 8008476:	3d02      	subs	r5, #2
 8008478:	4462      	add	r2, ip
 800847a:	1a52      	subs	r2, r2, r1
 800847c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8008480:	e738      	b.n	80082f4 <__udivmoddi4+0xfc>
 8008482:	4631      	mov	r1, r6
 8008484:	4630      	mov	r0, r6
 8008486:	e708      	b.n	800829a <__udivmoddi4+0xa2>
 8008488:	4639      	mov	r1, r7
 800848a:	e6e6      	b.n	800825a <__udivmoddi4+0x62>
 800848c:	4610      	mov	r0, r2
 800848e:	e6fb      	b.n	8008288 <__udivmoddi4+0x90>
 8008490:	4548      	cmp	r0, r9
 8008492:	d2a9      	bcs.n	80083e8 <__udivmoddi4+0x1f0>
 8008494:	ebb9 0802 	subs.w	r8, r9, r2
 8008498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800849c:	3b01      	subs	r3, #1
 800849e:	e7a3      	b.n	80083e8 <__udivmoddi4+0x1f0>
 80084a0:	4645      	mov	r5, r8
 80084a2:	e7ea      	b.n	800847a <__udivmoddi4+0x282>
 80084a4:	462b      	mov	r3, r5
 80084a6:	e794      	b.n	80083d2 <__udivmoddi4+0x1da>
 80084a8:	4640      	mov	r0, r8
 80084aa:	e7d1      	b.n	8008450 <__udivmoddi4+0x258>
 80084ac:	46d0      	mov	r8, sl
 80084ae:	e77b      	b.n	80083a8 <__udivmoddi4+0x1b0>
 80084b0:	3d02      	subs	r5, #2
 80084b2:	4462      	add	r2, ip
 80084b4:	e732      	b.n	800831c <__udivmoddi4+0x124>
 80084b6:	4608      	mov	r0, r1
 80084b8:	e70a      	b.n	80082d0 <__udivmoddi4+0xd8>
 80084ba:	4464      	add	r4, ip
 80084bc:	3802      	subs	r0, #2
 80084be:	e742      	b.n	8008346 <__udivmoddi4+0x14e>

080084c0 <__aeabi_idiv0>:
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop

080084c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084ca:	f000 fc7d 	bl	8008dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084ce:	f000 f825 	bl	800851c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084d2:	f000 f94b 	bl	800876c <MX_GPIO_Init>
  MX_I2C1_Init();
 80084d6:	f000 f88b 	bl	80085f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80084da:	f000 f8b7 	bl	800864c <MX_I2S3_Init>
  MX_SPI1_Init();
 80084de:	f000 f8e5 	bl	80086ac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80084e2:	f006 fbdd 	bl	800eca0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80084e6:	f000 f917 	bl	8008718 <MX_USART2_UART_Init>

  while(1){
    HAL_UART_Transmit(&huart2,(uint8_t*)aray, (uint16_t)sizeof(aray),HAL_MAX_DELAY);
 80084ea:	f04f 33ff 	mov.w	r3, #4294967295
 80084ee:	220d      	movs	r2, #13
 80084f0:	4908      	ldr	r1, [pc, #32]	; (8008514 <main+0x50>)
 80084f2:	4809      	ldr	r0, [pc, #36]	; (8008518 <main+0x54>)
 80084f4:	f004 f846 	bl	800c584 <HAL_UART_Transmit>
    uint32_t current_tick = HAL_GetTick();
 80084f8:	f000 fccc 	bl	8008e94 <HAL_GetTick>
 80084fc:	6078      	str	r0, [r7, #4]
    while(HAL_GetTick()<= (current_tick+500));
 80084fe:	bf00      	nop
 8008500:	f000 fcc8 	bl	8008e94 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800850c:	429a      	cmp	r2, r3
 800850e:	d9f7      	bls.n	8008500 <main+0x3c>
  while(1){
 8008510:	e7eb      	b.n	80084ea <main+0x26>
 8008512:	bf00      	nop
 8008514:	20000000 	.word	0x20000000
 8008518:	2000019c 	.word	0x2000019c

0800851c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b094      	sub	sp, #80	; 0x50
 8008520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008522:	f107 0320 	add.w	r3, r7, #32
 8008526:	2230      	movs	r2, #48	; 0x30
 8008528:	2100      	movs	r1, #0
 800852a:	4618      	mov	r0, r3
 800852c:	f006 ff24 	bl	800f378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008530:	f107 030c 	add.w	r3, r7, #12
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	605a      	str	r2, [r3, #4]
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	60da      	str	r2, [r3, #12]
 800853e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008540:	2300      	movs	r3, #0
 8008542:	60bb      	str	r3, [r7, #8]
 8008544:	4b28      	ldr	r3, [pc, #160]	; (80085e8 <SystemClock_Config+0xcc>)
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	4a27      	ldr	r2, [pc, #156]	; (80085e8 <SystemClock_Config+0xcc>)
 800854a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800854e:	6413      	str	r3, [r2, #64]	; 0x40
 8008550:	4b25      	ldr	r3, [pc, #148]	; (80085e8 <SystemClock_Config+0xcc>)
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008558:	60bb      	str	r3, [r7, #8]
 800855a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800855c:	2300      	movs	r3, #0
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	4b22      	ldr	r3, [pc, #136]	; (80085ec <SystemClock_Config+0xd0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a21      	ldr	r2, [pc, #132]	; (80085ec <SystemClock_Config+0xd0>)
 8008566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	4b1f      	ldr	r3, [pc, #124]	; (80085ec <SystemClock_Config+0xd0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008574:	607b      	str	r3, [r7, #4]
 8008576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008578:	2301      	movs	r3, #1
 800857a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800857c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008582:	2302      	movs	r3, #2
 8008584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800858c:	2308      	movs	r3, #8
 800858e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008596:	2302      	movs	r3, #2
 8008598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800859a:	2307      	movs	r3, #7
 800859c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800859e:	f107 0320 	add.w	r3, r7, #32
 80085a2:	4618      	mov	r0, r3
 80085a4:	f003 f940 	bl	800b828 <HAL_RCC_OscConfig>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80085ae:	f000 f9db 	bl	8008968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085b2:	230f      	movs	r3, #15
 80085b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085b6:	2302      	movs	r3, #2
 80085b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085ba:	2300      	movs	r3, #0
 80085bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80085be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80085c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80085c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80085ca:	f107 030c 	add.w	r3, r7, #12
 80085ce:	2105      	movs	r1, #5
 80085d0:	4618      	mov	r0, r3
 80085d2:	f003 fba1 	bl	800bd18 <HAL_RCC_ClockConfig>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80085dc:	f000 f9c4 	bl	8008968 <Error_Handler>
  }
}
 80085e0:	bf00      	nop
 80085e2:	3750      	adds	r7, #80	; 0x50
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	40023800 	.word	0x40023800
 80085ec:	40007000 	.word	0x40007000

080085f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80085f4:	4b12      	ldr	r3, [pc, #72]	; (8008640 <MX_I2C1_Init+0x50>)
 80085f6:	4a13      	ldr	r2, [pc, #76]	; (8008644 <MX_I2C1_Init+0x54>)
 80085f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80085fa:	4b11      	ldr	r3, [pc, #68]	; (8008640 <MX_I2C1_Init+0x50>)
 80085fc:	4a12      	ldr	r2, [pc, #72]	; (8008648 <MX_I2C1_Init+0x58>)
 80085fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008600:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <MX_I2C1_Init+0x50>)
 8008602:	2200      	movs	r2, #0
 8008604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008606:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <MX_I2C1_Init+0x50>)
 8008608:	2200      	movs	r2, #0
 800860a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800860c:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <MX_I2C1_Init+0x50>)
 800860e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008614:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <MX_I2C1_Init+0x50>)
 8008616:	2200      	movs	r2, #0
 8008618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800861a:	4b09      	ldr	r3, [pc, #36]	; (8008640 <MX_I2C1_Init+0x50>)
 800861c:	2200      	movs	r2, #0
 800861e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <MX_I2C1_Init+0x50>)
 8008622:	2200      	movs	r2, #0
 8008624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008626:	4b06      	ldr	r3, [pc, #24]	; (8008640 <MX_I2C1_Init+0x50>)
 8008628:	2200      	movs	r2, #0
 800862a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800862c:	4804      	ldr	r0, [pc, #16]	; (8008640 <MX_I2C1_Init+0x50>)
 800862e:	f002 fb17 	bl	800ac60 <HAL_I2C_Init>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008638:	f000 f996 	bl	8008968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800863c:	bf00      	nop
 800863e:	bd80      	pop	{r7, pc}
 8008640:	200000a8 	.word	0x200000a8
 8008644:	40005400 	.word	0x40005400
 8008648:	000186a0 	.word	0x000186a0

0800864c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8008650:	4b13      	ldr	r3, [pc, #76]	; (80086a0 <MX_I2S3_Init+0x54>)
 8008652:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <MX_I2S3_Init+0x58>)
 8008654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8008656:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <MX_I2S3_Init+0x54>)
 8008658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800865c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800865e:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <MX_I2S3_Init+0x54>)
 8008660:	2200      	movs	r2, #0
 8008662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008664:	4b0e      	ldr	r3, [pc, #56]	; (80086a0 <MX_I2S3_Init+0x54>)
 8008666:	2200      	movs	r2, #0
 8008668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800866a:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <MX_I2S3_Init+0x54>)
 800866c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008672:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <MX_I2S3_Init+0x54>)
 8008674:	4a0c      	ldr	r2, [pc, #48]	; (80086a8 <MX_I2S3_Init+0x5c>)
 8008676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8008678:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <MX_I2S3_Init+0x54>)
 800867a:	2200      	movs	r2, #0
 800867c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800867e:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <MX_I2S3_Init+0x54>)
 8008680:	2200      	movs	r2, #0
 8008682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008684:	4b06      	ldr	r3, [pc, #24]	; (80086a0 <MX_I2S3_Init+0x54>)
 8008686:	2200      	movs	r2, #0
 8008688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800868a:	4805      	ldr	r0, [pc, #20]	; (80086a0 <MX_I2S3_Init+0x54>)
 800868c:	f002 fc2c 	bl	800aee8 <HAL_I2S_Init>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8008696:	f000 f967 	bl	8008968 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800869a:	bf00      	nop
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	200000fc 	.word	0x200000fc
 80086a4:	40003c00 	.word	0x40003c00
 80086a8:	00017700 	.word	0x00017700

080086ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80086b0:	4b17      	ldr	r3, [pc, #92]	; (8008710 <MX_SPI1_Init+0x64>)
 80086b2:	4a18      	ldr	r2, [pc, #96]	; (8008714 <MX_SPI1_Init+0x68>)
 80086b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80086b6:	4b16      	ldr	r3, [pc, #88]	; (8008710 <MX_SPI1_Init+0x64>)
 80086b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80086bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <MX_SPI1_Init+0x64>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80086c4:	4b12      	ldr	r3, [pc, #72]	; (8008710 <MX_SPI1_Init+0x64>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80086ca:	4b11      	ldr	r3, [pc, #68]	; (8008710 <MX_SPI1_Init+0x64>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80086d0:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <MX_SPI1_Init+0x64>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <MX_SPI1_Init+0x64>)
 80086d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086de:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <MX_SPI1_Init+0x64>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80086e4:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <MX_SPI1_Init+0x64>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80086ea:	4b09      	ldr	r3, [pc, #36]	; (8008710 <MX_SPI1_Init+0x64>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <MX_SPI1_Init+0x64>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80086f6:	4b06      	ldr	r3, [pc, #24]	; (8008710 <MX_SPI1_Init+0x64>)
 80086f8:	220a      	movs	r2, #10
 80086fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80086fc:	4804      	ldr	r0, [pc, #16]	; (8008710 <MX_SPI1_Init+0x64>)
 80086fe:	f003 fe6b 	bl	800c3d8 <HAL_SPI_Init>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008708:	f000 f92e 	bl	8008968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800870c:	bf00      	nop
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000144 	.word	0x20000144
 8008714:	40013000 	.word	0x40013000

08008718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800871c:	4b11      	ldr	r3, [pc, #68]	; (8008764 <MX_USART2_UART_Init+0x4c>)
 800871e:	4a12      	ldr	r2, [pc, #72]	; (8008768 <MX_USART2_UART_Init+0x50>)
 8008720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008722:	4b10      	ldr	r3, [pc, #64]	; (8008764 <MX_USART2_UART_Init+0x4c>)
 8008724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800872a:	4b0e      	ldr	r3, [pc, #56]	; (8008764 <MX_USART2_UART_Init+0x4c>)
 800872c:	2200      	movs	r2, #0
 800872e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008730:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <MX_USART2_UART_Init+0x4c>)
 8008732:	2200      	movs	r2, #0
 8008734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008736:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <MX_USART2_UART_Init+0x4c>)
 8008738:	2200      	movs	r2, #0
 800873a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <MX_USART2_UART_Init+0x4c>)
 800873e:	220c      	movs	r2, #12
 8008740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008742:	4b08      	ldr	r3, [pc, #32]	; (8008764 <MX_USART2_UART_Init+0x4c>)
 8008744:	2200      	movs	r2, #0
 8008746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008748:	4b06      	ldr	r3, [pc, #24]	; (8008764 <MX_USART2_UART_Init+0x4c>)
 800874a:	2200      	movs	r2, #0
 800874c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800874e:	4805      	ldr	r0, [pc, #20]	; (8008764 <MX_USART2_UART_Init+0x4c>)
 8008750:	f003 fecb 	bl	800c4ea <HAL_UART_Init>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800875a:	f000 f905 	bl	8008968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800875e:	bf00      	nop
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	2000019c 	.word	0x2000019c
 8008768:	40004400 	.word	0x40004400

0800876c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08c      	sub	sp, #48	; 0x30
 8008770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008772:	f107 031c 	add.w	r3, r7, #28
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	605a      	str	r2, [r3, #4]
 800877c:	609a      	str	r2, [r3, #8]
 800877e:	60da      	str	r2, [r3, #12]
 8008780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008782:	2300      	movs	r3, #0
 8008784:	61bb      	str	r3, [r7, #24]
 8008786:	4b72      	ldr	r3, [pc, #456]	; (8008950 <MX_GPIO_Init+0x1e4>)
 8008788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878a:	4a71      	ldr	r2, [pc, #452]	; (8008950 <MX_GPIO_Init+0x1e4>)
 800878c:	f043 0310 	orr.w	r3, r3, #16
 8008790:	6313      	str	r3, [r2, #48]	; 0x30
 8008792:	4b6f      	ldr	r3, [pc, #444]	; (8008950 <MX_GPIO_Init+0x1e4>)
 8008794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008796:	f003 0310 	and.w	r3, r3, #16
 800879a:	61bb      	str	r3, [r7, #24]
 800879c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]
 80087a2:	4b6b      	ldr	r3, [pc, #428]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	4a6a      	ldr	r2, [pc, #424]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087a8:	f043 0304 	orr.w	r3, r3, #4
 80087ac:	6313      	str	r3, [r2, #48]	; 0x30
 80087ae:	4b68      	ldr	r3, [pc, #416]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80087ba:	2300      	movs	r3, #0
 80087bc:	613b      	str	r3, [r7, #16]
 80087be:	4b64      	ldr	r3, [pc, #400]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c2:	4a63      	ldr	r2, [pc, #396]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c8:	6313      	str	r3, [r2, #48]	; 0x30
 80087ca:	4b61      	ldr	r3, [pc, #388]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d2:	613b      	str	r3, [r7, #16]
 80087d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80087d6:	2300      	movs	r3, #0
 80087d8:	60fb      	str	r3, [r7, #12]
 80087da:	4b5d      	ldr	r3, [pc, #372]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	4a5c      	ldr	r2, [pc, #368]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087e0:	f043 0301 	orr.w	r3, r3, #1
 80087e4:	6313      	str	r3, [r2, #48]	; 0x30
 80087e6:	4b5a      	ldr	r3, [pc, #360]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80087f2:	2300      	movs	r3, #0
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	4b56      	ldr	r3, [pc, #344]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	4a55      	ldr	r2, [pc, #340]	; (8008950 <MX_GPIO_Init+0x1e4>)
 80087fc:	f043 0302 	orr.w	r3, r3, #2
 8008800:	6313      	str	r3, [r2, #48]	; 0x30
 8008802:	4b53      	ldr	r3, [pc, #332]	; (8008950 <MX_GPIO_Init+0x1e4>)
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	60bb      	str	r3, [r7, #8]
 800880c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800880e:	2300      	movs	r3, #0
 8008810:	607b      	str	r3, [r7, #4]
 8008812:	4b4f      	ldr	r3, [pc, #316]	; (8008950 <MX_GPIO_Init+0x1e4>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	4a4e      	ldr	r2, [pc, #312]	; (8008950 <MX_GPIO_Init+0x1e4>)
 8008818:	f043 0308 	orr.w	r3, r3, #8
 800881c:	6313      	str	r3, [r2, #48]	; 0x30
 800881e:	4b4c      	ldr	r3, [pc, #304]	; (8008950 <MX_GPIO_Init+0x1e4>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	607b      	str	r3, [r7, #4]
 8008828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800882a:	2200      	movs	r2, #0
 800882c:	2108      	movs	r1, #8
 800882e:	4849      	ldr	r0, [pc, #292]	; (8008954 <MX_GPIO_Init+0x1e8>)
 8008830:	f000 fe0e 	bl	8009450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008834:	2201      	movs	r2, #1
 8008836:	2101      	movs	r1, #1
 8008838:	4847      	ldr	r0, [pc, #284]	; (8008958 <MX_GPIO_Init+0x1ec>)
 800883a:	f000 fe09 	bl	8009450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800883e:	2200      	movs	r2, #0
 8008840:	f24f 0110 	movw	r1, #61456	; 0xf010
 8008844:	4845      	ldr	r0, [pc, #276]	; (800895c <MX_GPIO_Init+0x1f0>)
 8008846:	f000 fe03 	bl	8009450 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800884a:	2308      	movs	r3, #8
 800884c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800884e:	2301      	movs	r3, #1
 8008850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008852:	2300      	movs	r3, #0
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008856:	2300      	movs	r3, #0
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800885a:	f107 031c 	add.w	r3, r7, #28
 800885e:	4619      	mov	r1, r3
 8008860:	483c      	ldr	r0, [pc, #240]	; (8008954 <MX_GPIO_Init+0x1e8>)
 8008862:	f000 fc59 	bl	8009118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8008866:	2301      	movs	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800886a:	2301      	movs	r3, #1
 800886c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800886e:	2300      	movs	r3, #0
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008872:	2300      	movs	r3, #0
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008876:	f107 031c 	add.w	r3, r7, #28
 800887a:	4619      	mov	r1, r3
 800887c:	4836      	ldr	r0, [pc, #216]	; (8008958 <MX_GPIO_Init+0x1ec>)
 800887e:	f000 fc4b 	bl	8009118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8008882:	2308      	movs	r3, #8
 8008884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008886:	2302      	movs	r3, #2
 8008888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800888a:	2300      	movs	r3, #0
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800888e:	2300      	movs	r3, #0
 8008890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008892:	2305      	movs	r3, #5
 8008894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8008896:	f107 031c 	add.w	r3, r7, #28
 800889a:	4619      	mov	r1, r3
 800889c:	482e      	ldr	r0, [pc, #184]	; (8008958 <MX_GPIO_Init+0x1ec>)
 800889e:	f000 fc3b 	bl	8009118 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80088a2:	2301      	movs	r3, #1
 80088a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80088a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80088aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80088b0:	f107 031c 	add.w	r3, r7, #28
 80088b4:	4619      	mov	r1, r3
 80088b6:	482a      	ldr	r0, [pc, #168]	; (8008960 <MX_GPIO_Init+0x1f4>)
 80088b8:	f000 fc2e 	bl	8009118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80088bc:	2304      	movs	r3, #4
 80088be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088c0:	2300      	movs	r3, #0
 80088c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80088c8:	f107 031c 	add.w	r3, r7, #28
 80088cc:	4619      	mov	r1, r3
 80088ce:	4825      	ldr	r0, [pc, #148]	; (8008964 <MX_GPIO_Init+0x1f8>)
 80088d0:	f000 fc22 	bl	8009118 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80088d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088da:	2302      	movs	r3, #2
 80088dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088e2:	2300      	movs	r3, #0
 80088e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80088e6:	2305      	movs	r3, #5
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80088ea:	f107 031c 	add.w	r3, r7, #28
 80088ee:	4619      	mov	r1, r3
 80088f0:	481c      	ldr	r0, [pc, #112]	; (8008964 <MX_GPIO_Init+0x1f8>)
 80088f2:	f000 fc11 	bl	8009118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80088f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80088fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088fc:	2301      	movs	r3, #1
 80088fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008900:	2300      	movs	r3, #0
 8008902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008904:	2300      	movs	r3, #0
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008908:	f107 031c 	add.w	r3, r7, #28
 800890c:	4619      	mov	r1, r3
 800890e:	4813      	ldr	r0, [pc, #76]	; (800895c <MX_GPIO_Init+0x1f0>)
 8008910:	f000 fc02 	bl	8009118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008914:	2320      	movs	r3, #32
 8008916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008918:	2300      	movs	r3, #0
 800891a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800891c:	2300      	movs	r3, #0
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008920:	f107 031c 	add.w	r3, r7, #28
 8008924:	4619      	mov	r1, r3
 8008926:	480d      	ldr	r0, [pc, #52]	; (800895c <MX_GPIO_Init+0x1f0>)
 8008928:	f000 fbf6 	bl	8009118 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800892c:	2302      	movs	r3, #2
 800892e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008930:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8008934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008936:	2300      	movs	r3, #0
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800893a:	f107 031c 	add.w	r3, r7, #28
 800893e:	4619      	mov	r1, r3
 8008940:	4804      	ldr	r0, [pc, #16]	; (8008954 <MX_GPIO_Init+0x1e8>)
 8008942:	f000 fbe9 	bl	8009118 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008946:	bf00      	nop
 8008948:	3730      	adds	r7, #48	; 0x30
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	40023800 	.word	0x40023800
 8008954:	40021000 	.word	0x40021000
 8008958:	40020800 	.word	0x40020800
 800895c:	40020c00 	.word	0x40020c00
 8008960:	40020000 	.word	0x40020000
 8008964:	40020400 	.word	0x40020400

08008968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800896c:	b672      	cpsid	i
}
 800896e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008970:	e7fe      	b.n	8008970 <Error_Handler+0x8>
	...

08008974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800897a:	2300      	movs	r3, #0
 800897c:	607b      	str	r3, [r7, #4]
 800897e:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <HAL_MspInit+0x4c>)
 8008980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008982:	4a0f      	ldr	r2, [pc, #60]	; (80089c0 <HAL_MspInit+0x4c>)
 8008984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008988:	6453      	str	r3, [r2, #68]	; 0x44
 800898a:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <HAL_MspInit+0x4c>)
 800898c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008996:	2300      	movs	r3, #0
 8008998:	603b      	str	r3, [r7, #0]
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <HAL_MspInit+0x4c>)
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <HAL_MspInit+0x4c>)
 80089a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a4:	6413      	str	r3, [r2, #64]	; 0x40
 80089a6:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <HAL_MspInit+0x4c>)
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80089b2:	2007      	movs	r0, #7
 80089b4:	f000 fb6e 	bl	8009094 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	40023800 	.word	0x40023800

080089c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	; 0x28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089cc:	f107 0314 	add.w	r3, r7, #20
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	605a      	str	r2, [r3, #4]
 80089d6:	609a      	str	r2, [r3, #8]
 80089d8:	60da      	str	r2, [r3, #12]
 80089da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a19      	ldr	r2, [pc, #100]	; (8008a48 <HAL_I2C_MspInit+0x84>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d12c      	bne.n	8008a40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089e6:	2300      	movs	r3, #0
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	4b18      	ldr	r3, [pc, #96]	; (8008a4c <HAL_I2C_MspInit+0x88>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	4a17      	ldr	r2, [pc, #92]	; (8008a4c <HAL_I2C_MspInit+0x88>)
 80089f0:	f043 0302 	orr.w	r3, r3, #2
 80089f4:	6313      	str	r3, [r2, #48]	; 0x30
 80089f6:	4b15      	ldr	r3, [pc, #84]	; (8008a4c <HAL_I2C_MspInit+0x88>)
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	613b      	str	r3, [r7, #16]
 8008a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008a02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a08:	2312      	movs	r3, #18
 8008a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a10:	2300      	movs	r3, #0
 8008a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008a14:	2304      	movs	r3, #4
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a18:	f107 0314 	add.w	r3, r7, #20
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	480c      	ldr	r0, [pc, #48]	; (8008a50 <HAL_I2C_MspInit+0x8c>)
 8008a20:	f000 fb7a 	bl	8009118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	4b08      	ldr	r3, [pc, #32]	; (8008a4c <HAL_I2C_MspInit+0x88>)
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2c:	4a07      	ldr	r2, [pc, #28]	; (8008a4c <HAL_I2C_MspInit+0x88>)
 8008a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a32:	6413      	str	r3, [r2, #64]	; 0x40
 8008a34:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <HAL_I2C_MspInit+0x88>)
 8008a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008a40:	bf00      	nop
 8008a42:	3728      	adds	r7, #40	; 0x28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40005400 	.word	0x40005400
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	40020400 	.word	0x40020400

08008a54 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	; 0x38
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	609a      	str	r2, [r3, #8]
 8008a68:	60da      	str	r2, [r3, #12]
 8008a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a6c:	f107 0314 	add.w	r3, r7, #20
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	605a      	str	r2, [r3, #4]
 8008a76:	609a      	str	r2, [r3, #8]
 8008a78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a31      	ldr	r2, [pc, #196]	; (8008b44 <HAL_I2S_MspInit+0xf0>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d15a      	bne.n	8008b3a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8008a84:	2301      	movs	r3, #1
 8008a86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8008a88:	23c0      	movs	r3, #192	; 0xc0
 8008a8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a90:	f107 0314 	add.w	r3, r7, #20
 8008a94:	4618      	mov	r0, r3
 8008a96:	f003 fb5f 	bl	800c158 <HAL_RCCEx_PeriphCLKConfig>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8008aa0:	f7ff ff62 	bl	8008968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	613b      	str	r3, [r7, #16]
 8008aa8:	4b27      	ldr	r3, [pc, #156]	; (8008b48 <HAL_I2S_MspInit+0xf4>)
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	4a26      	ldr	r2, [pc, #152]	; (8008b48 <HAL_I2S_MspInit+0xf4>)
 8008aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8008ab4:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <HAL_I2S_MspInit+0xf4>)
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	4b20      	ldr	r3, [pc, #128]	; (8008b48 <HAL_I2S_MspInit+0xf4>)
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac8:	4a1f      	ldr	r2, [pc, #124]	; (8008b48 <HAL_I2S_MspInit+0xf4>)
 8008aca:	f043 0301 	orr.w	r3, r3, #1
 8008ace:	6313      	str	r3, [r2, #48]	; 0x30
 8008ad0:	4b1d      	ldr	r3, [pc, #116]	; (8008b48 <HAL_I2S_MspInit+0xf4>)
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008adc:	2300      	movs	r3, #0
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <HAL_I2S_MspInit+0xf4>)
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae4:	4a18      	ldr	r2, [pc, #96]	; (8008b48 <HAL_I2S_MspInit+0xf4>)
 8008ae6:	f043 0304 	orr.w	r3, r3, #4
 8008aea:	6313      	str	r3, [r2, #48]	; 0x30
 8008aec:	4b16      	ldr	r3, [pc, #88]	; (8008b48 <HAL_I2S_MspInit+0xf4>)
 8008aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	60bb      	str	r3, [r7, #8]
 8008af6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008af8:	2310      	movs	r3, #16
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008afc:	2302      	movs	r3, #2
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b04:	2300      	movs	r3, #0
 8008b06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b08:	2306      	movs	r3, #6
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b10:	4619      	mov	r1, r3
 8008b12:	480e      	ldr	r0, [pc, #56]	; (8008b4c <HAL_I2S_MspInit+0xf8>)
 8008b14:	f000 fb00 	bl	8009118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008b18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b1e:	2302      	movs	r3, #2
 8008b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b26:	2300      	movs	r3, #0
 8008b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008b2a:	2306      	movs	r3, #6
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b32:	4619      	mov	r1, r3
 8008b34:	4806      	ldr	r0, [pc, #24]	; (8008b50 <HAL_I2S_MspInit+0xfc>)
 8008b36:	f000 faef 	bl	8009118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008b3a:	bf00      	nop
 8008b3c:	3738      	adds	r7, #56	; 0x38
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	40003c00 	.word	0x40003c00
 8008b48:	40023800 	.word	0x40023800
 8008b4c:	40020000 	.word	0x40020000
 8008b50:	40020800 	.word	0x40020800

08008b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08a      	sub	sp, #40	; 0x28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b5c:	f107 0314 	add.w	r3, r7, #20
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	605a      	str	r2, [r3, #4]
 8008b66:	609a      	str	r2, [r3, #8]
 8008b68:	60da      	str	r2, [r3, #12]
 8008b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a19      	ldr	r2, [pc, #100]	; (8008bd8 <HAL_SPI_MspInit+0x84>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d12b      	bne.n	8008bce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008b76:	2300      	movs	r3, #0
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	4b18      	ldr	r3, [pc, #96]	; (8008bdc <HAL_SPI_MspInit+0x88>)
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	4a17      	ldr	r2, [pc, #92]	; (8008bdc <HAL_SPI_MspInit+0x88>)
 8008b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b84:	6453      	str	r3, [r2, #68]	; 0x44
 8008b86:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <HAL_SPI_MspInit+0x88>)
 8008b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <HAL_SPI_MspInit+0x88>)
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	4a10      	ldr	r2, [pc, #64]	; (8008bdc <HAL_SPI_MspInit+0x88>)
 8008b9c:	f043 0301 	orr.w	r3, r3, #1
 8008ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ba2:	4b0e      	ldr	r3, [pc, #56]	; (8008bdc <HAL_SPI_MspInit+0x88>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8008bae:	23e0      	movs	r3, #224	; 0xe0
 8008bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008bbe:	2305      	movs	r3, #5
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bc2:	f107 0314 	add.w	r3, r7, #20
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4805      	ldr	r0, [pc, #20]	; (8008be0 <HAL_SPI_MspInit+0x8c>)
 8008bca:	f000 faa5 	bl	8009118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008bce:	bf00      	nop
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	40013000 	.word	0x40013000
 8008bdc:	40023800 	.word	0x40023800
 8008be0:	40020000 	.word	0x40020000

08008be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	; 0x28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bec:	f107 0314 	add.w	r3, r7, #20
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	609a      	str	r2, [r3, #8]
 8008bf8:	60da      	str	r2, [r3, #12]
 8008bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a19      	ldr	r2, [pc, #100]	; (8008c68 <HAL_UART_MspInit+0x84>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d12b      	bne.n	8008c5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008c06:	2300      	movs	r3, #0
 8008c08:	613b      	str	r3, [r7, #16]
 8008c0a:	4b18      	ldr	r3, [pc, #96]	; (8008c6c <HAL_UART_MspInit+0x88>)
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	4a17      	ldr	r2, [pc, #92]	; (8008c6c <HAL_UART_MspInit+0x88>)
 8008c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c14:	6413      	str	r3, [r2, #64]	; 0x40
 8008c16:	4b15      	ldr	r3, [pc, #84]	; (8008c6c <HAL_UART_MspInit+0x88>)
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <HAL_UART_MspInit+0x88>)
 8008c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2a:	4a10      	ldr	r2, [pc, #64]	; (8008c6c <HAL_UART_MspInit+0x88>)
 8008c2c:	f043 0301 	orr.w	r3, r3, #1
 8008c30:	6313      	str	r3, [r2, #48]	; 0x30
 8008c32:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <HAL_UART_MspInit+0x88>)
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008c3e:	230c      	movs	r3, #12
 8008c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c42:	2302      	movs	r3, #2
 8008c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008c4e:	2307      	movs	r3, #7
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c52:	f107 0314 	add.w	r3, r7, #20
 8008c56:	4619      	mov	r1, r3
 8008c58:	4805      	ldr	r0, [pc, #20]	; (8008c70 <HAL_UART_MspInit+0x8c>)
 8008c5a:	f000 fa5d 	bl	8009118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008c5e:	bf00      	nop
 8008c60:	3728      	adds	r7, #40	; 0x28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	40004400 	.word	0x40004400
 8008c6c:	40023800 	.word	0x40023800
 8008c70:	40020000 	.word	0x40020000

08008c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c74:	b480      	push	{r7}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008c78:	e7fe      	b.n	8008c78 <NMI_Handler+0x4>

08008c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c7e:	e7fe      	b.n	8008c7e <HardFault_Handler+0x4>

08008c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c84:	e7fe      	b.n	8008c84 <MemManage_Handler+0x4>

08008c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c86:	b480      	push	{r7}
 8008c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c8a:	e7fe      	b.n	8008c8a <BusFault_Handler+0x4>

08008c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c90:	e7fe      	b.n	8008c90 <UsageFault_Handler+0x4>

08008c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c92:	b480      	push	{r7}
 8008c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c96:	bf00      	nop
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ca4:	bf00      	nop
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008cb2:	bf00      	nop
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008cc0:	f000 f8d4 	bl	8008e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008cc4:	bf00      	nop
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008ccc:	4802      	ldr	r0, [pc, #8]	; (8008cd8 <OTG_FS_IRQHandler+0x10>)
 8008cce:	f000 fe43 	bl	8009958 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008cd2:	bf00      	nop
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	200005c4 	.word	0x200005c4

08008cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ce4:	4a14      	ldr	r2, [pc, #80]	; (8008d38 <_sbrk+0x5c>)
 8008ce6:	4b15      	ldr	r3, [pc, #84]	; (8008d3c <_sbrk+0x60>)
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cf0:	4b13      	ldr	r3, [pc, #76]	; (8008d40 <_sbrk+0x64>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008cf8:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <_sbrk+0x64>)
 8008cfa:	4a12      	ldr	r2, [pc, #72]	; (8008d44 <_sbrk+0x68>)
 8008cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008cfe:	4b10      	ldr	r3, [pc, #64]	; (8008d40 <_sbrk+0x64>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d207      	bcs.n	8008d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d0c:	f006 fb4c 	bl	800f3a8 <__errno>
 8008d10:	4603      	mov	r3, r0
 8008d12:	220c      	movs	r2, #12
 8008d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d16:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1a:	e009      	b.n	8008d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d1c:	4b08      	ldr	r3, [pc, #32]	; (8008d40 <_sbrk+0x64>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d22:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <_sbrk+0x64>)
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4413      	add	r3, r2
 8008d2a:	4a05      	ldr	r2, [pc, #20]	; (8008d40 <_sbrk+0x64>)
 8008d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20020000 	.word	0x20020000
 8008d3c:	00000400 	.word	0x00000400
 8008d40:	200001e0 	.word	0x200001e0
 8008d44:	20000a10 	.word	0x20000a10

08008d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d4c:	4b07      	ldr	r3, [pc, #28]	; (8008d6c <SystemInit+0x24>)
 8008d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d52:	4a06      	ldr	r2, [pc, #24]	; (8008d6c <SystemInit+0x24>)
 8008d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008d5c:	4b03      	ldr	r3, [pc, #12]	; (8008d6c <SystemInit+0x24>)
 8008d5e:	4a04      	ldr	r2, [pc, #16]	; (8008d70 <SystemInit+0x28>)
 8008d60:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d62:	bf00      	nop
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	e000ed00 	.word	0xe000ed00
 8008d70:	08008000 	.word	0x08008000

08008d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008d78:	480d      	ldr	r0, [pc, #52]	; (8008db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008d7a:	490e      	ldr	r1, [pc, #56]	; (8008db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008d7c:	4a0e      	ldr	r2, [pc, #56]	; (8008db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d80:	e002      	b.n	8008d88 <LoopCopyDataInit>

08008d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d86:	3304      	adds	r3, #4

08008d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d8c:	d3f9      	bcc.n	8008d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d8e:	4a0b      	ldr	r2, [pc, #44]	; (8008dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008d90:	4c0b      	ldr	r4, [pc, #44]	; (8008dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d94:	e001      	b.n	8008d9a <LoopFillZerobss>

08008d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d98:	3204      	adds	r2, #4

08008d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d9c:	d3fb      	bcc.n	8008d96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008d9e:	f7ff ffd3 	bl	8008d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008da2:	f006 fb07 	bl	800f3b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008da6:	f7ff fb8d 	bl	80084c4 <main>
  bx  lr    
 8008daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008db4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8008db8:	0800f4dc 	.word	0x0800f4dc
  ldr r2, =_sbss
 8008dbc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8008dc0:	20000a10 	.word	0x20000a10

08008dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008dc4:	e7fe      	b.n	8008dc4 <ADC_IRQHandler>
	...

08008dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008dcc:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <HAL_Init+0x40>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a0d      	ldr	r2, [pc, #52]	; (8008e08 <HAL_Init+0x40>)
 8008dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008dd8:	4b0b      	ldr	r3, [pc, #44]	; (8008e08 <HAL_Init+0x40>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a0a      	ldr	r2, [pc, #40]	; (8008e08 <HAL_Init+0x40>)
 8008dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008de4:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <HAL_Init+0x40>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a07      	ldr	r2, [pc, #28]	; (8008e08 <HAL_Init+0x40>)
 8008dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008df0:	2003      	movs	r0, #3
 8008df2:	f000 f94f 	bl	8009094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008df6:	2000      	movs	r0, #0
 8008df8:	f000 f808 	bl	8008e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008dfc:	f7ff fdba 	bl	8008974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	40023c00 	.word	0x40023c00

08008e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e14:	4b12      	ldr	r3, [pc, #72]	; (8008e60 <HAL_InitTick+0x54>)
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	4b12      	ldr	r3, [pc, #72]	; (8008e64 <HAL_InitTick+0x58>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f967 	bl	80090fe <HAL_SYSTICK_Config>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e00e      	b.n	8008e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b0f      	cmp	r3, #15
 8008e3e:	d80a      	bhi.n	8008e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e40:	2200      	movs	r2, #0
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295
 8008e48:	f000 f92f 	bl	80090aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e4c:	4a06      	ldr	r2, [pc, #24]	; (8008e68 <HAL_InitTick+0x5c>)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	e000      	b.n	8008e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20000010 	.word	0x20000010
 8008e64:	20000018 	.word	0x20000018
 8008e68:	20000014 	.word	0x20000014

08008e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <HAL_IncTick+0x20>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	461a      	mov	r2, r3
 8008e76:	4b06      	ldr	r3, [pc, #24]	; (8008e90 <HAL_IncTick+0x24>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	4a04      	ldr	r2, [pc, #16]	; (8008e90 <HAL_IncTick+0x24>)
 8008e7e:	6013      	str	r3, [r2, #0]
}
 8008e80:	bf00      	nop
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	20000018 	.word	0x20000018
 8008e90:	200001e4 	.word	0x200001e4

08008e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
  return uwTick;
 8008e98:	4b03      	ldr	r3, [pc, #12]	; (8008ea8 <HAL_GetTick+0x14>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	200001e4 	.word	0x200001e4

08008eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008eb4:	f7ff ffee 	bl	8008e94 <HAL_GetTick>
 8008eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec4:	d005      	beq.n	8008ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <HAL_Delay+0x44>)
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ed2:	bf00      	nop
 8008ed4:	f7ff ffde 	bl	8008e94 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d8f7      	bhi.n	8008ed4 <HAL_Delay+0x28>
  {
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000018 	.word	0x20000018

08008ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f003 0307 	and.w	r3, r3, #7
 8008f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f04:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <__NVIC_SetPriorityGrouping+0x44>)
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f10:	4013      	ands	r3, r2
 8008f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f26:	4a04      	ldr	r2, [pc, #16]	; (8008f38 <__NVIC_SetPriorityGrouping+0x44>)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	60d3      	str	r3, [r2, #12]
}
 8008f2c:	bf00      	nop
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	e000ed00 	.word	0xe000ed00

08008f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f40:	4b04      	ldr	r3, [pc, #16]	; (8008f54 <__NVIC_GetPriorityGrouping+0x18>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	0a1b      	lsrs	r3, r3, #8
 8008f46:	f003 0307 	and.w	r3, r3, #7
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	e000ed00 	.word	0xe000ed00

08008f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	db0b      	blt.n	8008f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	f003 021f 	and.w	r2, r3, #31
 8008f70:	4907      	ldr	r1, [pc, #28]	; (8008f90 <__NVIC_EnableIRQ+0x38>)
 8008f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	2001      	movs	r0, #1
 8008f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8008f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008f82:	bf00      	nop
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	e000e100 	.word	0xe000e100

08008f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	db0a      	blt.n	8008fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	490c      	ldr	r1, [pc, #48]	; (8008fe0 <__NVIC_SetPriority+0x4c>)
 8008fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fb2:	0112      	lsls	r2, r2, #4
 8008fb4:	b2d2      	uxtb	r2, r2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008fbc:	e00a      	b.n	8008fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	4908      	ldr	r1, [pc, #32]	; (8008fe4 <__NVIC_SetPriority+0x50>)
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	f003 030f 	and.w	r3, r3, #15
 8008fca:	3b04      	subs	r3, #4
 8008fcc:	0112      	lsls	r2, r2, #4
 8008fce:	b2d2      	uxtb	r2, r2
 8008fd0:	440b      	add	r3, r1
 8008fd2:	761a      	strb	r2, [r3, #24]
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	e000e100 	.word	0xe000e100
 8008fe4:	e000ed00 	.word	0xe000ed00

08008fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b089      	sub	sp, #36	; 0x24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f1c3 0307 	rsb	r3, r3, #7
 8009002:	2b04      	cmp	r3, #4
 8009004:	bf28      	it	cs
 8009006:	2304      	movcs	r3, #4
 8009008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	3304      	adds	r3, #4
 800900e:	2b06      	cmp	r3, #6
 8009010:	d902      	bls.n	8009018 <NVIC_EncodePriority+0x30>
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	3b03      	subs	r3, #3
 8009016:	e000      	b.n	800901a <NVIC_EncodePriority+0x32>
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800901c:	f04f 32ff 	mov.w	r2, #4294967295
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	43da      	mvns	r2, r3
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	401a      	ands	r2, r3
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009030:	f04f 31ff 	mov.w	r1, #4294967295
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	fa01 f303 	lsl.w	r3, r1, r3
 800903a:	43d9      	mvns	r1, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009040:	4313      	orrs	r3, r2
         );
}
 8009042:	4618      	mov	r0, r3
 8009044:	3724      	adds	r7, #36	; 0x24
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3b01      	subs	r3, #1
 800905c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009060:	d301      	bcc.n	8009066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009062:	2301      	movs	r3, #1
 8009064:	e00f      	b.n	8009086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009066:	4a0a      	ldr	r2, [pc, #40]	; (8009090 <SysTick_Config+0x40>)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3b01      	subs	r3, #1
 800906c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800906e:	210f      	movs	r1, #15
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	f7ff ff8e 	bl	8008f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009078:	4b05      	ldr	r3, [pc, #20]	; (8009090 <SysTick_Config+0x40>)
 800907a:	2200      	movs	r2, #0
 800907c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800907e:	4b04      	ldr	r3, [pc, #16]	; (8009090 <SysTick_Config+0x40>)
 8009080:	2207      	movs	r2, #7
 8009082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	e000e010 	.word	0xe000e010

08009094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff ff29 	bl	8008ef4 <__NVIC_SetPriorityGrouping>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b086      	sub	sp, #24
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	4603      	mov	r3, r0
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
 80090b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80090bc:	f7ff ff3e 	bl	8008f3c <__NVIC_GetPriorityGrouping>
 80090c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	6978      	ldr	r0, [r7, #20]
 80090c8:	f7ff ff8e 	bl	8008fe8 <NVIC_EncodePriority>
 80090cc:	4602      	mov	r2, r0
 80090ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d2:	4611      	mov	r1, r2
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff ff5d 	bl	8008f94 <__NVIC_SetPriority>
}
 80090da:	bf00      	nop
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	4603      	mov	r3, r0
 80090ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80090ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff ff31 	bl	8008f58 <__NVIC_EnableIRQ>
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff ffa2 	bl	8009050 <SysTick_Config>
 800910c:	4603      	mov	r3, r0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009118:	b480      	push	{r7}
 800911a:	b089      	sub	sp, #36	; 0x24
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009122:	2300      	movs	r3, #0
 8009124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009126:	2300      	movs	r3, #0
 8009128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800912a:	2300      	movs	r3, #0
 800912c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800912e:	2300      	movs	r3, #0
 8009130:	61fb      	str	r3, [r7, #28]
 8009132:	e16b      	b.n	800940c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009134:	2201      	movs	r2, #1
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	fa02 f303 	lsl.w	r3, r2, r3
 800913c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	4013      	ands	r3, r2
 8009146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	429a      	cmp	r2, r3
 800914e:	f040 815a 	bne.w	8009406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	2b01      	cmp	r3, #1
 800915c:	d005      	beq.n	800916a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009166:	2b02      	cmp	r3, #2
 8009168:	d130      	bne.n	80091cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	2203      	movs	r2, #3
 8009176:	fa02 f303 	lsl.w	r3, r2, r3
 800917a:	43db      	mvns	r3, r3
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	4013      	ands	r3, r2
 8009180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	fa02 f303 	lsl.w	r3, r2, r3
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	4313      	orrs	r3, r2
 8009192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80091a0:	2201      	movs	r2, #1
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	fa02 f303 	lsl.w	r3, r2, r3
 80091a8:	43db      	mvns	r3, r3
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	4013      	ands	r3, r2
 80091ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	091b      	lsrs	r3, r3, #4
 80091b6:	f003 0201 	and.w	r2, r3, #1
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	fa02 f303 	lsl.w	r3, r2, r3
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f003 0303 	and.w	r3, r3, #3
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	d017      	beq.n	8009208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	2203      	movs	r2, #3
 80091e4:	fa02 f303 	lsl.w	r3, r2, r3
 80091e8:	43db      	mvns	r3, r3
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	4013      	ands	r3, r2
 80091ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	689a      	ldr	r2, [r3, #8]
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	fa02 f303 	lsl.w	r3, r2, r3
 80091fc:	69ba      	ldr	r2, [r7, #24]
 80091fe:	4313      	orrs	r3, r2
 8009200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f003 0303 	and.w	r3, r3, #3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d123      	bne.n	800925c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	08da      	lsrs	r2, r3, #3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3208      	adds	r2, #8
 800921c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	220f      	movs	r2, #15
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	43db      	mvns	r3, r3
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	4013      	ands	r3, r2
 8009236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	691a      	ldr	r2, [r3, #16]
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	fa02 f303 	lsl.w	r3, r2, r3
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	4313      	orrs	r3, r2
 800924c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	08da      	lsrs	r2, r3, #3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3208      	adds	r2, #8
 8009256:	69b9      	ldr	r1, [r7, #24]
 8009258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	2203      	movs	r2, #3
 8009268:	fa02 f303 	lsl.w	r3, r2, r3
 800926c:	43db      	mvns	r3, r3
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	4013      	ands	r3, r2
 8009272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f003 0203 	and.w	r2, r3, #3
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	005b      	lsls	r3, r3, #1
 8009280:	fa02 f303 	lsl.w	r3, r2, r3
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	4313      	orrs	r3, r2
 8009288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 80b4 	beq.w	8009406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800929e:	2300      	movs	r3, #0
 80092a0:	60fb      	str	r3, [r7, #12]
 80092a2:	4b60      	ldr	r3, [pc, #384]	; (8009424 <HAL_GPIO_Init+0x30c>)
 80092a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a6:	4a5f      	ldr	r2, [pc, #380]	; (8009424 <HAL_GPIO_Init+0x30c>)
 80092a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092ac:	6453      	str	r3, [r2, #68]	; 0x44
 80092ae:	4b5d      	ldr	r3, [pc, #372]	; (8009424 <HAL_GPIO_Init+0x30c>)
 80092b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80092ba:	4a5b      	ldr	r2, [pc, #364]	; (8009428 <HAL_GPIO_Init+0x310>)
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	089b      	lsrs	r3, r3, #2
 80092c0:	3302      	adds	r3, #2
 80092c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	220f      	movs	r2, #15
 80092d2:	fa02 f303 	lsl.w	r3, r2, r3
 80092d6:	43db      	mvns	r3, r3
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	4013      	ands	r3, r2
 80092dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a52      	ldr	r2, [pc, #328]	; (800942c <HAL_GPIO_Init+0x314>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d02b      	beq.n	800933e <HAL_GPIO_Init+0x226>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a51      	ldr	r2, [pc, #324]	; (8009430 <HAL_GPIO_Init+0x318>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d025      	beq.n	800933a <HAL_GPIO_Init+0x222>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a50      	ldr	r2, [pc, #320]	; (8009434 <HAL_GPIO_Init+0x31c>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d01f      	beq.n	8009336 <HAL_GPIO_Init+0x21e>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a4f      	ldr	r2, [pc, #316]	; (8009438 <HAL_GPIO_Init+0x320>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d019      	beq.n	8009332 <HAL_GPIO_Init+0x21a>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a4e      	ldr	r2, [pc, #312]	; (800943c <HAL_GPIO_Init+0x324>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d013      	beq.n	800932e <HAL_GPIO_Init+0x216>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a4d      	ldr	r2, [pc, #308]	; (8009440 <HAL_GPIO_Init+0x328>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d00d      	beq.n	800932a <HAL_GPIO_Init+0x212>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a4c      	ldr	r2, [pc, #304]	; (8009444 <HAL_GPIO_Init+0x32c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d007      	beq.n	8009326 <HAL_GPIO_Init+0x20e>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a4b      	ldr	r2, [pc, #300]	; (8009448 <HAL_GPIO_Init+0x330>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d101      	bne.n	8009322 <HAL_GPIO_Init+0x20a>
 800931e:	2307      	movs	r3, #7
 8009320:	e00e      	b.n	8009340 <HAL_GPIO_Init+0x228>
 8009322:	2308      	movs	r3, #8
 8009324:	e00c      	b.n	8009340 <HAL_GPIO_Init+0x228>
 8009326:	2306      	movs	r3, #6
 8009328:	e00a      	b.n	8009340 <HAL_GPIO_Init+0x228>
 800932a:	2305      	movs	r3, #5
 800932c:	e008      	b.n	8009340 <HAL_GPIO_Init+0x228>
 800932e:	2304      	movs	r3, #4
 8009330:	e006      	b.n	8009340 <HAL_GPIO_Init+0x228>
 8009332:	2303      	movs	r3, #3
 8009334:	e004      	b.n	8009340 <HAL_GPIO_Init+0x228>
 8009336:	2302      	movs	r3, #2
 8009338:	e002      	b.n	8009340 <HAL_GPIO_Init+0x228>
 800933a:	2301      	movs	r3, #1
 800933c:	e000      	b.n	8009340 <HAL_GPIO_Init+0x228>
 800933e:	2300      	movs	r3, #0
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	f002 0203 	and.w	r2, r2, #3
 8009346:	0092      	lsls	r2, r2, #2
 8009348:	4093      	lsls	r3, r2
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	4313      	orrs	r3, r2
 800934e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009350:	4935      	ldr	r1, [pc, #212]	; (8009428 <HAL_GPIO_Init+0x310>)
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	089b      	lsrs	r3, r3, #2
 8009356:	3302      	adds	r3, #2
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800935e:	4b3b      	ldr	r3, [pc, #236]	; (800944c <HAL_GPIO_Init+0x334>)
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	43db      	mvns	r3, r3
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	4013      	ands	r3, r2
 800936c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	4313      	orrs	r3, r2
 8009380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009382:	4a32      	ldr	r2, [pc, #200]	; (800944c <HAL_GPIO_Init+0x334>)
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009388:	4b30      	ldr	r3, [pc, #192]	; (800944c <HAL_GPIO_Init+0x334>)
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	43db      	mvns	r3, r3
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	4013      	ands	r3, r2
 8009396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80093ac:	4a27      	ldr	r2, [pc, #156]	; (800944c <HAL_GPIO_Init+0x334>)
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80093b2:	4b26      	ldr	r3, [pc, #152]	; (800944c <HAL_GPIO_Init+0x334>)
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	43db      	mvns	r3, r3
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	4013      	ands	r3, r2
 80093c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80093d6:	4a1d      	ldr	r2, [pc, #116]	; (800944c <HAL_GPIO_Init+0x334>)
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80093dc:	4b1b      	ldr	r3, [pc, #108]	; (800944c <HAL_GPIO_Init+0x334>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	43db      	mvns	r3, r3
 80093e6:	69ba      	ldr	r2, [r7, #24]
 80093e8:	4013      	ands	r3, r2
 80093ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009400:	4a12      	ldr	r2, [pc, #72]	; (800944c <HAL_GPIO_Init+0x334>)
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	3301      	adds	r3, #1
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	2b0f      	cmp	r3, #15
 8009410:	f67f ae90 	bls.w	8009134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop
 8009418:	3724      	adds	r7, #36	; 0x24
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	40023800 	.word	0x40023800
 8009428:	40013800 	.word	0x40013800
 800942c:	40020000 	.word	0x40020000
 8009430:	40020400 	.word	0x40020400
 8009434:	40020800 	.word	0x40020800
 8009438:	40020c00 	.word	0x40020c00
 800943c:	40021000 	.word	0x40021000
 8009440:	40021400 	.word	0x40021400
 8009444:	40021800 	.word	0x40021800
 8009448:	40021c00 	.word	0x40021c00
 800944c:	40013c00 	.word	0x40013c00

08009450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	807b      	strh	r3, [r7, #2]
 800945c:	4613      	mov	r3, r2
 800945e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009460:	787b      	ldrb	r3, [r7, #1]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009466:	887a      	ldrh	r2, [r7, #2]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800946c:	e003      	b.n	8009476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800946e:	887b      	ldrh	r3, [r7, #2]
 8009470:	041a      	lsls	r2, r3, #16
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	619a      	str	r2, [r3, #24]
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009484:	b08f      	sub	sp, #60	; 0x3c
 8009486:	af0a      	add	r7, sp, #40	; 0x28
 8009488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e054      	b.n	800953e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f005 fc4a 	bl	800ed48 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2203      	movs	r2, #3
 80094b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f003 fc3c 	bl	800cd50 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	603b      	str	r3, [r7, #0]
 80094de:	687e      	ldr	r6, [r7, #4]
 80094e0:	466d      	mov	r5, sp
 80094e2:	f106 0410 	add.w	r4, r6, #16
 80094e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80094f6:	1d33      	adds	r3, r6, #4
 80094f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094fa:	6838      	ldr	r0, [r7, #0]
 80094fc:	f003 fbb6 	bl	800cc6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2101      	movs	r1, #1
 8009506:	4618      	mov	r0, r3
 8009508:	f003 fc33 	bl	800cd72 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	603b      	str	r3, [r7, #0]
 8009512:	687e      	ldr	r6, [r7, #4]
 8009514:	466d      	mov	r5, sp
 8009516:	f106 0410 	add.w	r4, r6, #16
 800951a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800951c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800951e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009522:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009526:	e885 0003 	stmia.w	r5, {r0, r1}
 800952a:	1d33      	adds	r3, r6, #4
 800952c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800952e:	6838      	ldr	r0, [r7, #0]
 8009530:	f003 fdbc 	bl	800d0ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009546 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8009546:	b590      	push	{r4, r7, lr}
 8009548:	b089      	sub	sp, #36	; 0x24
 800954a:	af04      	add	r7, sp, #16
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	4608      	mov	r0, r1
 8009550:	4611      	mov	r1, r2
 8009552:	461a      	mov	r2, r3
 8009554:	4603      	mov	r3, r0
 8009556:	70fb      	strb	r3, [r7, #3]
 8009558:	460b      	mov	r3, r1
 800955a:	70bb      	strb	r3, [r7, #2]
 800955c:	4613      	mov	r3, r2
 800955e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009566:	2b01      	cmp	r3, #1
 8009568:	d101      	bne.n	800956e <HAL_HCD_HC_Init+0x28>
 800956a:	2302      	movs	r3, #2
 800956c:	e076      	b.n	800965c <HAL_HCD_HC_Init+0x116>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	212c      	movs	r1, #44	; 0x2c
 800957c:	fb01 f303 	mul.w	r3, r1, r3
 8009580:	4413      	add	r3, r2
 8009582:	333d      	adds	r3, #61	; 0x3d
 8009584:	2200      	movs	r2, #0
 8009586:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009588:	78fb      	ldrb	r3, [r7, #3]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	212c      	movs	r1, #44	; 0x2c
 800958e:	fb01 f303 	mul.w	r3, r1, r3
 8009592:	4413      	add	r3, r2
 8009594:	3338      	adds	r3, #56	; 0x38
 8009596:	787a      	ldrb	r2, [r7, #1]
 8009598:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800959a:	78fb      	ldrb	r3, [r7, #3]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	212c      	movs	r1, #44	; 0x2c
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	4413      	add	r3, r2
 80095a6:	3340      	adds	r3, #64	; 0x40
 80095a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80095aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	212c      	movs	r1, #44	; 0x2c
 80095b2:	fb01 f303 	mul.w	r3, r1, r3
 80095b6:	4413      	add	r3, r2
 80095b8:	3339      	adds	r3, #57	; 0x39
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	212c      	movs	r1, #44	; 0x2c
 80095c4:	fb01 f303 	mul.w	r3, r1, r3
 80095c8:	4413      	add	r3, r2
 80095ca:	333f      	adds	r3, #63	; 0x3f
 80095cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80095d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	78ba      	ldrb	r2, [r7, #2]
 80095d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095da:	b2d0      	uxtb	r0, r2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	212c      	movs	r1, #44	; 0x2c
 80095e0:	fb01 f303 	mul.w	r3, r1, r3
 80095e4:	4413      	add	r3, r2
 80095e6:	333a      	adds	r3, #58	; 0x3a
 80095e8:	4602      	mov	r2, r0
 80095ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80095ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da09      	bge.n	8009608 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	212c      	movs	r1, #44	; 0x2c
 80095fa:	fb01 f303 	mul.w	r3, r1, r3
 80095fe:	4413      	add	r3, r2
 8009600:	333b      	adds	r3, #59	; 0x3b
 8009602:	2201      	movs	r2, #1
 8009604:	701a      	strb	r2, [r3, #0]
 8009606:	e008      	b.n	800961a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	212c      	movs	r1, #44	; 0x2c
 800960e:	fb01 f303 	mul.w	r3, r1, r3
 8009612:	4413      	add	r3, r2
 8009614:	333b      	adds	r3, #59	; 0x3b
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800961a:	78fb      	ldrb	r3, [r7, #3]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	212c      	movs	r1, #44	; 0x2c
 8009620:	fb01 f303 	mul.w	r3, r1, r3
 8009624:	4413      	add	r3, r2
 8009626:	333c      	adds	r3, #60	; 0x3c
 8009628:	f897 2020 	ldrb.w	r2, [r7, #32]
 800962c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	787c      	ldrb	r4, [r7, #1]
 8009634:	78ba      	ldrb	r2, [r7, #2]
 8009636:	78f9      	ldrb	r1, [r7, #3]
 8009638:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800963a:	9302      	str	r3, [sp, #8]
 800963c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009640:	9301      	str	r3, [sp, #4]
 8009642:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4623      	mov	r3, r4
 800964a:	f003 fe8b 	bl	800d364 <USB_HC_Init>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800965a:	7bfb      	ldrb	r3, [r7, #15]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	bd90      	pop	{r4, r7, pc}

08009664 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800967a:	2b01      	cmp	r3, #1
 800967c:	d101      	bne.n	8009682 <HAL_HCD_HC_Halt+0x1e>
 800967e:	2302      	movs	r3, #2
 8009680:	e00f      	b.n	80096a2 <HAL_HCD_HC_Halt+0x3e>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	4611      	mov	r1, r2
 8009692:	4618      	mov	r0, r3
 8009694:	f004 f8db 	bl	800d84e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	4608      	mov	r0, r1
 80096b6:	4611      	mov	r1, r2
 80096b8:	461a      	mov	r2, r3
 80096ba:	4603      	mov	r3, r0
 80096bc:	70fb      	strb	r3, [r7, #3]
 80096be:	460b      	mov	r3, r1
 80096c0:	70bb      	strb	r3, [r7, #2]
 80096c2:	4613      	mov	r3, r2
 80096c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	212c      	movs	r1, #44	; 0x2c
 80096cc:	fb01 f303 	mul.w	r3, r1, r3
 80096d0:	4413      	add	r3, r2
 80096d2:	333b      	adds	r3, #59	; 0x3b
 80096d4:	78ba      	ldrb	r2, [r7, #2]
 80096d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	212c      	movs	r1, #44	; 0x2c
 80096de:	fb01 f303 	mul.w	r3, r1, r3
 80096e2:	4413      	add	r3, r2
 80096e4:	333f      	adds	r3, #63	; 0x3f
 80096e6:	787a      	ldrb	r2, [r7, #1]
 80096e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80096ea:	7c3b      	ldrb	r3, [r7, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d112      	bne.n	8009716 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	212c      	movs	r1, #44	; 0x2c
 80096f6:	fb01 f303 	mul.w	r3, r1, r3
 80096fa:	4413      	add	r3, r2
 80096fc:	3342      	adds	r3, #66	; 0x42
 80096fe:	2203      	movs	r2, #3
 8009700:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	212c      	movs	r1, #44	; 0x2c
 8009708:	fb01 f303 	mul.w	r3, r1, r3
 800970c:	4413      	add	r3, r2
 800970e:	333d      	adds	r3, #61	; 0x3d
 8009710:	7f3a      	ldrb	r2, [r7, #28]
 8009712:	701a      	strb	r2, [r3, #0]
 8009714:	e008      	b.n	8009728 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009716:	78fb      	ldrb	r3, [r7, #3]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	212c      	movs	r1, #44	; 0x2c
 800971c:	fb01 f303 	mul.w	r3, r1, r3
 8009720:	4413      	add	r3, r2
 8009722:	3342      	adds	r3, #66	; 0x42
 8009724:	2202      	movs	r2, #2
 8009726:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009728:	787b      	ldrb	r3, [r7, #1]
 800972a:	2b03      	cmp	r3, #3
 800972c:	f200 80c6 	bhi.w	80098bc <HAL_HCD_HC_SubmitRequest+0x210>
 8009730:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	08009749 	.word	0x08009749
 800973c:	080098a9 	.word	0x080098a9
 8009740:	080097ad 	.word	0x080097ad
 8009744:	0800982b 	.word	0x0800982b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009748:	7c3b      	ldrb	r3, [r7, #16]
 800974a:	2b01      	cmp	r3, #1
 800974c:	f040 80b8 	bne.w	80098c0 <HAL_HCD_HC_SubmitRequest+0x214>
 8009750:	78bb      	ldrb	r3, [r7, #2]
 8009752:	2b00      	cmp	r3, #0
 8009754:	f040 80b4 	bne.w	80098c0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009758:	8b3b      	ldrh	r3, [r7, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d108      	bne.n	8009770 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800975e:	78fb      	ldrb	r3, [r7, #3]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	212c      	movs	r1, #44	; 0x2c
 8009764:	fb01 f303 	mul.w	r3, r1, r3
 8009768:	4413      	add	r3, r2
 800976a:	3355      	adds	r3, #85	; 0x55
 800976c:	2201      	movs	r2, #1
 800976e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	212c      	movs	r1, #44	; 0x2c
 8009776:	fb01 f303 	mul.w	r3, r1, r3
 800977a:	4413      	add	r3, r2
 800977c:	3355      	adds	r3, #85	; 0x55
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d109      	bne.n	8009798 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	212c      	movs	r1, #44	; 0x2c
 800978a:	fb01 f303 	mul.w	r3, r1, r3
 800978e:	4413      	add	r3, r2
 8009790:	3342      	adds	r3, #66	; 0x42
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009796:	e093      	b.n	80098c0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	212c      	movs	r1, #44	; 0x2c
 800979e:	fb01 f303 	mul.w	r3, r1, r3
 80097a2:	4413      	add	r3, r2
 80097a4:	3342      	adds	r3, #66	; 0x42
 80097a6:	2202      	movs	r2, #2
 80097a8:	701a      	strb	r2, [r3, #0]
      break;
 80097aa:	e089      	b.n	80098c0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80097ac:	78bb      	ldrb	r3, [r7, #2]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d11d      	bne.n	80097ee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	212c      	movs	r1, #44	; 0x2c
 80097b8:	fb01 f303 	mul.w	r3, r1, r3
 80097bc:	4413      	add	r3, r2
 80097be:	3355      	adds	r3, #85	; 0x55
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d109      	bne.n	80097da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80097c6:	78fb      	ldrb	r3, [r7, #3]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	212c      	movs	r1, #44	; 0x2c
 80097cc:	fb01 f303 	mul.w	r3, r1, r3
 80097d0:	4413      	add	r3, r2
 80097d2:	3342      	adds	r3, #66	; 0x42
 80097d4:	2200      	movs	r2, #0
 80097d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80097d8:	e073      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	212c      	movs	r1, #44	; 0x2c
 80097e0:	fb01 f303 	mul.w	r3, r1, r3
 80097e4:	4413      	add	r3, r2
 80097e6:	3342      	adds	r3, #66	; 0x42
 80097e8:	2202      	movs	r2, #2
 80097ea:	701a      	strb	r2, [r3, #0]
      break;
 80097ec:	e069      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80097ee:	78fb      	ldrb	r3, [r7, #3]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	212c      	movs	r1, #44	; 0x2c
 80097f4:	fb01 f303 	mul.w	r3, r1, r3
 80097f8:	4413      	add	r3, r2
 80097fa:	3354      	adds	r3, #84	; 0x54
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009802:	78fb      	ldrb	r3, [r7, #3]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	212c      	movs	r1, #44	; 0x2c
 8009808:	fb01 f303 	mul.w	r3, r1, r3
 800980c:	4413      	add	r3, r2
 800980e:	3342      	adds	r3, #66	; 0x42
 8009810:	2200      	movs	r2, #0
 8009812:	701a      	strb	r2, [r3, #0]
      break;
 8009814:	e055      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	212c      	movs	r1, #44	; 0x2c
 800981c:	fb01 f303 	mul.w	r3, r1, r3
 8009820:	4413      	add	r3, r2
 8009822:	3342      	adds	r3, #66	; 0x42
 8009824:	2202      	movs	r2, #2
 8009826:	701a      	strb	r2, [r3, #0]
      break;
 8009828:	e04b      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800982a:	78bb      	ldrb	r3, [r7, #2]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d11d      	bne.n	800986c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	212c      	movs	r1, #44	; 0x2c
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	4413      	add	r3, r2
 800983c:	3355      	adds	r3, #85	; 0x55
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d109      	bne.n	8009858 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	212c      	movs	r1, #44	; 0x2c
 800984a:	fb01 f303 	mul.w	r3, r1, r3
 800984e:	4413      	add	r3, r2
 8009850:	3342      	adds	r3, #66	; 0x42
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009856:	e034      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	212c      	movs	r1, #44	; 0x2c
 800985e:	fb01 f303 	mul.w	r3, r1, r3
 8009862:	4413      	add	r3, r2
 8009864:	3342      	adds	r3, #66	; 0x42
 8009866:	2202      	movs	r2, #2
 8009868:	701a      	strb	r2, [r3, #0]
      break;
 800986a:	e02a      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800986c:	78fb      	ldrb	r3, [r7, #3]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	212c      	movs	r1, #44	; 0x2c
 8009872:	fb01 f303 	mul.w	r3, r1, r3
 8009876:	4413      	add	r3, r2
 8009878:	3354      	adds	r3, #84	; 0x54
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d109      	bne.n	8009894 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	212c      	movs	r1, #44	; 0x2c
 8009886:	fb01 f303 	mul.w	r3, r1, r3
 800988a:	4413      	add	r3, r2
 800988c:	3342      	adds	r3, #66	; 0x42
 800988e:	2200      	movs	r2, #0
 8009890:	701a      	strb	r2, [r3, #0]
      break;
 8009892:	e016      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	212c      	movs	r1, #44	; 0x2c
 800989a:	fb01 f303 	mul.w	r3, r1, r3
 800989e:	4413      	add	r3, r2
 80098a0:	3342      	adds	r3, #66	; 0x42
 80098a2:	2202      	movs	r2, #2
 80098a4:	701a      	strb	r2, [r3, #0]
      break;
 80098a6:	e00c      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	212c      	movs	r1, #44	; 0x2c
 80098ae:	fb01 f303 	mul.w	r3, r1, r3
 80098b2:	4413      	add	r3, r2
 80098b4:	3342      	adds	r3, #66	; 0x42
 80098b6:	2200      	movs	r2, #0
 80098b8:	701a      	strb	r2, [r3, #0]
      break;
 80098ba:	e002      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80098bc:	bf00      	nop
 80098be:	e000      	b.n	80098c2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80098c0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	212c      	movs	r1, #44	; 0x2c
 80098c8:	fb01 f303 	mul.w	r3, r1, r3
 80098cc:	4413      	add	r3, r2
 80098ce:	3344      	adds	r3, #68	; 0x44
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	8b3a      	ldrh	r2, [r7, #24]
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	202c      	movs	r0, #44	; 0x2c
 80098dc:	fb00 f303 	mul.w	r3, r0, r3
 80098e0:	440b      	add	r3, r1
 80098e2:	334c      	adds	r3, #76	; 0x4c
 80098e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	212c      	movs	r1, #44	; 0x2c
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	4413      	add	r3, r2
 80098f2:	3360      	adds	r3, #96	; 0x60
 80098f4:	2200      	movs	r2, #0
 80098f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	212c      	movs	r1, #44	; 0x2c
 80098fe:	fb01 f303 	mul.w	r3, r1, r3
 8009902:	4413      	add	r3, r2
 8009904:	3350      	adds	r3, #80	; 0x50
 8009906:	2200      	movs	r2, #0
 8009908:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800990a:	78fb      	ldrb	r3, [r7, #3]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	212c      	movs	r1, #44	; 0x2c
 8009910:	fb01 f303 	mul.w	r3, r1, r3
 8009914:	4413      	add	r3, r2
 8009916:	3339      	adds	r3, #57	; 0x39
 8009918:	78fa      	ldrb	r2, [r7, #3]
 800991a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	212c      	movs	r1, #44	; 0x2c
 8009922:	fb01 f303 	mul.w	r3, r1, r3
 8009926:	4413      	add	r3, r2
 8009928:	3361      	adds	r3, #97	; 0x61
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6818      	ldr	r0, [r3, #0]
 8009932:	78fb      	ldrb	r3, [r7, #3]
 8009934:	222c      	movs	r2, #44	; 0x2c
 8009936:	fb02 f303 	mul.w	r3, r2, r3
 800993a:	3338      	adds	r3, #56	; 0x38
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	18d1      	adds	r1, r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	461a      	mov	r2, r3
 8009948:	f003 fe2e 	bl	800d5a8 <USB_HC_StartXfer>
 800994c:	4603      	mov	r3, r0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop

08009958 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4618      	mov	r0, r3
 8009970:	f003 fb59 	bl	800d026 <USB_GetMode>
 8009974:	4603      	mov	r3, r0
 8009976:	2b01      	cmp	r3, #1
 8009978:	f040 80f6 	bne.w	8009b68 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4618      	mov	r0, r3
 8009982:	f003 fb3d 	bl	800d000 <USB_ReadInterrupts>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 80ec 	beq.w	8009b66 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f003 fb34 	bl	800d000 <USB_ReadInterrupts>
 8009998:	4603      	mov	r3, r0
 800999a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800999e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099a2:	d104      	bne.n	80099ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80099ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f003 fb24 	bl	800d000 <USB_ReadInterrupts>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099c2:	d104      	bne.n	80099ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80099cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f003 fb14 	bl	800d000 <USB_ReadInterrupts>
 80099d8:	4603      	mov	r3, r0
 80099da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099e2:	d104      	bne.n	80099ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80099ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f003 fb04 	bl	800d000 <USB_ReadInterrupts>
 80099f8:	4603      	mov	r3, r0
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d103      	bne.n	8009a0a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2202      	movs	r2, #2
 8009a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f003 faf6 	bl	800d000 <USB_ReadInterrupts>
 8009a14:	4603      	mov	r3, r0
 8009a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a1e:	d11c      	bne.n	8009a5a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009a28:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10f      	bne.n	8009a5a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009a3a:	2110      	movs	r1, #16
 8009a3c:	6938      	ldr	r0, [r7, #16]
 8009a3e:	f003 f9e5 	bl	800ce0c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8009a42:	6938      	ldr	r0, [r7, #16]
 8009a44:	f003 fa16 	bl	800ce74 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f003 fbec 	bl	800d22c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f005 f9f5 	bl	800ee44 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f003 face 	bl	800d000 <USB_ReadInterrupts>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a6e:	d102      	bne.n	8009a76 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 f882 	bl	800ab7a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f003 fac0 	bl	800d000 <USB_ReadInterrupts>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f003 0308 	and.w	r3, r3, #8
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	d106      	bne.n	8009a98 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f005 f9be 	bl	800ee0c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2208      	movs	r2, #8
 8009a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f003 faaf 	bl	800d000 <USB_ReadInterrupts>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b10      	cmp	r3, #16
 8009aaa:	d101      	bne.n	8009ab0 <HAL_HCD_IRQHandler+0x158>
 8009aac:	2301      	movs	r3, #1
 8009aae:	e000      	b.n	8009ab2 <HAL_HCD_IRQHandler+0x15a>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d012      	beq.n	8009adc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699a      	ldr	r2, [r3, #24]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f022 0210 	bic.w	r2, r2, #16
 8009ac4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 ff85 	bl	800a9d6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	699a      	ldr	r2, [r3, #24]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0210 	orr.w	r2, r2, #16
 8009ada:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f003 fa8d 	bl	800d000 <USB_ReadInterrupts>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009af0:	d13a      	bne.n	8009b68 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f003 fe98 	bl	800d82c <USB_HC_ReadInterrupt>
 8009afc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	e025      	b.n	8009b50 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f003 030f 	and.w	r3, r3, #15
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d018      	beq.n	8009b4a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b2e:	d106      	bne.n	8009b3e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f88f 	bl	8009c5a <HCD_HC_IN_IRQHandler>
 8009b3c:	e005      	b.n	8009b4a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fbdd 	bl	800a304 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	617b      	str	r3, [r7, #20]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d3d4      	bcc.n	8009b04 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b62:	615a      	str	r2, [r3, #20]
 8009b64:	e000      	b.n	8009b68 <HAL_HCD_IRQHandler+0x210>
      return;
 8009b66:	bf00      	nop
    }
  }
}
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_HCD_Start+0x16>
 8009b80:	2302      	movs	r3, #2
 8009b82:	e013      	b.n	8009bac <HAL_HCD_Start+0x3e>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2101      	movs	r1, #1
 8009b92:	4618      	mov	r0, r3
 8009b94:	f003 fb84 	bl	800d2a0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f003 f8c6 	bl	800cd2e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <HAL_HCD_Stop+0x16>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e00d      	b.n	8009be6 <HAL_HCD_Stop+0x32>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f003 ff72 	bl	800dac0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009bfa:	78fb      	ldrb	r3, [r7, #3]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	212c      	movs	r1, #44	; 0x2c
 8009c00:	fb01 f303 	mul.w	r3, r1, r3
 8009c04:	4413      	add	r3, r2
 8009c06:	3360      	adds	r3, #96	; 0x60
 8009c08:	781b      	ldrb	r3, [r3, #0]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	212c      	movs	r1, #44	; 0x2c
 8009c28:	fb01 f303 	mul.w	r3, r1, r3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	3350      	adds	r3, #80	; 0x50
 8009c30:	681b      	ldr	r3, [r3, #0]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f003 fb78 	bl	800d340 <USB_GetCurrentFrame>
 8009c50:	4603      	mov	r3, r0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b086      	sub	sp, #24
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f003 0304 	and.w	r3, r3, #4
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	d11a      	bne.n	8009cc0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c96:	461a      	mov	r2, r3
 8009c98:	2304      	movs	r3, #4
 8009c9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	212c      	movs	r1, #44	; 0x2c
 8009ca2:	fb01 f303 	mul.w	r3, r1, r3
 8009ca6:	4413      	add	r3, r2
 8009ca8:	3361      	adds	r3, #97	; 0x61
 8009caa:	2206      	movs	r2, #6
 8009cac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	b2d2      	uxtb	r2, r2
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f003 fdc8 	bl	800d84e <USB_HC_Halt>
 8009cbe:	e0af      	b.n	8009e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cd6:	d11b      	bne.n	8009d10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	212c      	movs	r1, #44	; 0x2c
 8009cf2:	fb01 f303 	mul.w	r3, r1, r3
 8009cf6:	4413      	add	r3, r2
 8009cf8:	3361      	adds	r3, #97	; 0x61
 8009cfa:	2207      	movs	r2, #7
 8009cfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	b2d2      	uxtb	r2, r2
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f003 fda0 	bl	800d84e <USB_HC_Halt>
 8009d0e:	e087      	b.n	8009e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f003 0320 	and.w	r3, r3, #32
 8009d22:	2b20      	cmp	r3, #32
 8009d24:	d109      	bne.n	8009d3a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d32:	461a      	mov	r2, r3
 8009d34:	2320      	movs	r3, #32
 8009d36:	6093      	str	r3, [r2, #8]
 8009d38:	e072      	b.n	8009e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f003 0308 	and.w	r3, r3, #8
 8009d4c:	2b08      	cmp	r3, #8
 8009d4e:	d11a      	bne.n	8009d86 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	2308      	movs	r3, #8
 8009d60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	212c      	movs	r1, #44	; 0x2c
 8009d68:	fb01 f303 	mul.w	r3, r1, r3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	3361      	adds	r3, #97	; 0x61
 8009d70:	2205      	movs	r2, #5
 8009d72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f003 fd65 	bl	800d84e <USB_HC_Halt>
 8009d84:	e04c      	b.n	8009e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d9c:	d11b      	bne.n	8009dd6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009daa:	461a      	mov	r2, r3
 8009dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009db0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	212c      	movs	r1, #44	; 0x2c
 8009db8:	fb01 f303 	mul.w	r3, r1, r3
 8009dbc:	4413      	add	r3, r2
 8009dbe:	3361      	adds	r3, #97	; 0x61
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f003 fd3d 	bl	800d84e <USB_HC_Halt>
 8009dd4:	e024      	b.n	8009e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	015a      	lsls	r2, r3, #5
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	4413      	add	r3, r2
 8009dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de8:	2b80      	cmp	r3, #128	; 0x80
 8009dea:	d119      	bne.n	8009e20 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df8:	461a      	mov	r2, r3
 8009dfa:	2380      	movs	r3, #128	; 0x80
 8009dfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	212c      	movs	r1, #44	; 0x2c
 8009e04:	fb01 f303 	mul.w	r3, r1, r3
 8009e08:	4413      	add	r3, r2
 8009e0a:	3361      	adds	r3, #97	; 0x61
 8009e0c:	2206      	movs	r2, #6
 8009e0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	b2d2      	uxtb	r2, r2
 8009e18:	4611      	mov	r1, r2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f003 fd17 	bl	800d84e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e36:	d112      	bne.n	8009e5e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	b2d2      	uxtb	r2, r2
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f003 fd03 	bl	800d84e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e54:	461a      	mov	r2, r3
 8009e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e5a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8009e5c:	e24e      	b.n	800a2fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	f040 80df 	bne.w	800a034 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d019      	beq.n	8009eb2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	212c      	movs	r1, #44	; 0x2c
 8009e84:	fb01 f303 	mul.w	r3, r1, r3
 8009e88:	4413      	add	r3, r2
 8009e8a:	3348      	adds	r3, #72	; 0x48
 8009e8c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	0159      	lsls	r1, r3, #5
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	440b      	add	r3, r1
 8009e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8009ea0:	1ad2      	subs	r2, r2, r3
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	202c      	movs	r0, #44	; 0x2c
 8009ea8:	fb00 f303 	mul.w	r3, r0, r3
 8009eac:	440b      	add	r3, r1
 8009eae:	3350      	adds	r3, #80	; 0x50
 8009eb0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	212c      	movs	r1, #44	; 0x2c
 8009eb8:	fb01 f303 	mul.w	r3, r1, r3
 8009ebc:	4413      	add	r3, r2
 8009ebe:	3361      	adds	r3, #97	; 0x61
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	212c      	movs	r1, #44	; 0x2c
 8009eca:	fb01 f303 	mul.w	r3, r1, r3
 8009ece:	4413      	add	r3, r2
 8009ed0:	335c      	adds	r3, #92	; 0x5c
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	212c      	movs	r1, #44	; 0x2c
 8009eee:	fb01 f303 	mul.w	r3, r1, r3
 8009ef2:	4413      	add	r3, r2
 8009ef4:	333f      	adds	r3, #63	; 0x3f
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d009      	beq.n	8009f10 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	212c      	movs	r1, #44	; 0x2c
 8009f02:	fb01 f303 	mul.w	r3, r1, r3
 8009f06:	4413      	add	r3, r2
 8009f08:	333f      	adds	r3, #63	; 0x3f
 8009f0a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d111      	bne.n	8009f34 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	b2d2      	uxtb	r2, r2
 8009f18:	4611      	mov	r1, r2
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f003 fc97 	bl	800d84e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	2310      	movs	r3, #16
 8009f30:	6093      	str	r3, [r2, #8]
 8009f32:	e03a      	b.n	8009faa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	212c      	movs	r1, #44	; 0x2c
 8009f3a:	fb01 f303 	mul.w	r3, r1, r3
 8009f3e:	4413      	add	r3, r2
 8009f40:	333f      	adds	r3, #63	; 0x3f
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d009      	beq.n	8009f5c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	212c      	movs	r1, #44	; 0x2c
 8009f4e:	fb01 f303 	mul.w	r3, r1, r3
 8009f52:	4413      	add	r3, r2
 8009f54:	333f      	adds	r3, #63	; 0x3f
 8009f56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d126      	bne.n	8009faa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	0151      	lsls	r1, r2, #5
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	440a      	add	r2, r1
 8009f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f7a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	212c      	movs	r1, #44	; 0x2c
 8009f82:	fb01 f303 	mul.w	r3, r1, r3
 8009f86:	4413      	add	r3, r2
 8009f88:	3360      	adds	r3, #96	; 0x60
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	b2d9      	uxtb	r1, r3
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	202c      	movs	r0, #44	; 0x2c
 8009f98:	fb00 f303 	mul.w	r3, r0, r3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	3360      	adds	r3, #96	; 0x60
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f004 ff5b 	bl	800ee60 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d12b      	bne.n	800a00a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	212c      	movs	r1, #44	; 0x2c
 8009fb8:	fb01 f303 	mul.w	r3, r1, r3
 8009fbc:	4413      	add	r3, r2
 8009fbe:	3348      	adds	r3, #72	; 0x48
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6879      	ldr	r1, [r7, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	202c      	movs	r0, #44	; 0x2c
 8009fc8:	fb00 f202 	mul.w	r2, r0, r2
 8009fcc:	440a      	add	r2, r1
 8009fce:	3240      	adds	r2, #64	; 0x40
 8009fd0:	8812      	ldrh	r2, [r2, #0]
 8009fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 818e 	beq.w	800a2fc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	212c      	movs	r1, #44	; 0x2c
 8009fe6:	fb01 f303 	mul.w	r3, r1, r3
 8009fea:	4413      	add	r3, r2
 8009fec:	3354      	adds	r3, #84	; 0x54
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	f083 0301 	eor.w	r3, r3, #1
 8009ff4:	b2d8      	uxtb	r0, r3
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	212c      	movs	r1, #44	; 0x2c
 8009ffc:	fb01 f303 	mul.w	r3, r1, r3
 800a000:	4413      	add	r3, r2
 800a002:	3354      	adds	r3, #84	; 0x54
 800a004:	4602      	mov	r2, r0
 800a006:	701a      	strb	r2, [r3, #0]
}
 800a008:	e178      	b.n	800a2fc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	212c      	movs	r1, #44	; 0x2c
 800a010:	fb01 f303 	mul.w	r3, r1, r3
 800a014:	4413      	add	r3, r2
 800a016:	3354      	adds	r3, #84	; 0x54
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	f083 0301 	eor.w	r3, r3, #1
 800a01e:	b2d8      	uxtb	r0, r3
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	212c      	movs	r1, #44	; 0x2c
 800a026:	fb01 f303 	mul.w	r3, r1, r3
 800a02a:	4413      	add	r3, r2
 800a02c:	3354      	adds	r3, #84	; 0x54
 800a02e:	4602      	mov	r2, r0
 800a030:	701a      	strb	r2, [r3, #0]
}
 800a032:	e163      	b.n	800a2fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f003 0302 	and.w	r3, r3, #2
 800a046:	2b02      	cmp	r3, #2
 800a048:	f040 80f6 	bne.w	800a238 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	212c      	movs	r1, #44	; 0x2c
 800a052:	fb01 f303 	mul.w	r3, r1, r3
 800a056:	4413      	add	r3, r2
 800a058:	3361      	adds	r3, #97	; 0x61
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d109      	bne.n	800a074 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	212c      	movs	r1, #44	; 0x2c
 800a066:	fb01 f303 	mul.w	r3, r1, r3
 800a06a:	4413      	add	r3, r2
 800a06c:	3360      	adds	r3, #96	; 0x60
 800a06e:	2201      	movs	r2, #1
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	e0c9      	b.n	800a208 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	212c      	movs	r1, #44	; 0x2c
 800a07a:	fb01 f303 	mul.w	r3, r1, r3
 800a07e:	4413      	add	r3, r2
 800a080:	3361      	adds	r3, #97	; 0x61
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2b05      	cmp	r3, #5
 800a086:	d109      	bne.n	800a09c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	212c      	movs	r1, #44	; 0x2c
 800a08e:	fb01 f303 	mul.w	r3, r1, r3
 800a092:	4413      	add	r3, r2
 800a094:	3360      	adds	r3, #96	; 0x60
 800a096:	2205      	movs	r2, #5
 800a098:	701a      	strb	r2, [r3, #0]
 800a09a:	e0b5      	b.n	800a208 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	212c      	movs	r1, #44	; 0x2c
 800a0a2:	fb01 f303 	mul.w	r3, r1, r3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	3361      	adds	r3, #97	; 0x61
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b06      	cmp	r3, #6
 800a0ae:	d009      	beq.n	800a0c4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	212c      	movs	r1, #44	; 0x2c
 800a0b6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3361      	adds	r3, #97	; 0x61
 800a0be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d150      	bne.n	800a166 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	212c      	movs	r1, #44	; 0x2c
 800a0ca:	fb01 f303 	mul.w	r3, r1, r3
 800a0ce:	4413      	add	r3, r2
 800a0d0:	335c      	adds	r3, #92	; 0x5c
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	202c      	movs	r0, #44	; 0x2c
 800a0dc:	fb00 f303 	mul.w	r3, r0, r3
 800a0e0:	440b      	add	r3, r1
 800a0e2:	335c      	adds	r3, #92	; 0x5c
 800a0e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	212c      	movs	r1, #44	; 0x2c
 800a0ec:	fb01 f303 	mul.w	r3, r1, r3
 800a0f0:	4413      	add	r3, r2
 800a0f2:	335c      	adds	r3, #92	; 0x5c
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d912      	bls.n	800a120 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	212c      	movs	r1, #44	; 0x2c
 800a100:	fb01 f303 	mul.w	r3, r1, r3
 800a104:	4413      	add	r3, r2
 800a106:	335c      	adds	r3, #92	; 0x5c
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	212c      	movs	r1, #44	; 0x2c
 800a112:	fb01 f303 	mul.w	r3, r1, r3
 800a116:	4413      	add	r3, r2
 800a118:	3360      	adds	r3, #96	; 0x60
 800a11a:	2204      	movs	r2, #4
 800a11c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a11e:	e073      	b.n	800a208 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	212c      	movs	r1, #44	; 0x2c
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	3360      	adds	r3, #96	; 0x60
 800a12e:	2202      	movs	r2, #2
 800a130:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a148:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a150:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a15e:	461a      	mov	r2, r3
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a164:	e050      	b.n	800a208 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	212c      	movs	r1, #44	; 0x2c
 800a16c:	fb01 f303 	mul.w	r3, r1, r3
 800a170:	4413      	add	r3, r2
 800a172:	3361      	adds	r3, #97	; 0x61
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b03      	cmp	r3, #3
 800a178:	d122      	bne.n	800a1c0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	212c      	movs	r1, #44	; 0x2c
 800a180:	fb01 f303 	mul.w	r3, r1, r3
 800a184:	4413      	add	r3, r2
 800a186:	3360      	adds	r3, #96	; 0x60
 800a188:	2202      	movs	r2, #2
 800a18a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	015a      	lsls	r2, r3, #5
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	4413      	add	r3, r2
 800a194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	e023      	b.n	800a208 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	212c      	movs	r1, #44	; 0x2c
 800a1c6:	fb01 f303 	mul.w	r3, r1, r3
 800a1ca:	4413      	add	r3, r2
 800a1cc:	3361      	adds	r3, #97	; 0x61
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b07      	cmp	r3, #7
 800a1d2:	d119      	bne.n	800a208 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	212c      	movs	r1, #44	; 0x2c
 800a1da:	fb01 f303 	mul.w	r3, r1, r3
 800a1de:	4413      	add	r3, r2
 800a1e0:	335c      	adds	r3, #92	; 0x5c
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	202c      	movs	r0, #44	; 0x2c
 800a1ec:	fb00 f303 	mul.w	r3, r0, r3
 800a1f0:	440b      	add	r3, r1
 800a1f2:	335c      	adds	r3, #92	; 0x5c
 800a1f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	212c      	movs	r1, #44	; 0x2c
 800a1fc:	fb01 f303 	mul.w	r3, r1, r3
 800a200:	4413      	add	r3, r2
 800a202:	3360      	adds	r3, #96	; 0x60
 800a204:	2204      	movs	r2, #4
 800a206:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a214:	461a      	mov	r2, r3
 800a216:	2302      	movs	r3, #2
 800a218:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	b2d9      	uxtb	r1, r3
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	202c      	movs	r0, #44	; 0x2c
 800a224:	fb00 f303 	mul.w	r3, r0, r3
 800a228:	4413      	add	r3, r2
 800a22a:	3360      	adds	r3, #96	; 0x60
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f004 fe15 	bl	800ee60 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a236:	e061      	b.n	800a2fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f003 0310 	and.w	r3, r3, #16
 800a24a:	2b10      	cmp	r3, #16
 800a24c:	d156      	bne.n	800a2fc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	212c      	movs	r1, #44	; 0x2c
 800a254:	fb01 f303 	mul.w	r3, r1, r3
 800a258:	4413      	add	r3, r2
 800a25a:	333f      	adds	r3, #63	; 0x3f
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d111      	bne.n	800a286 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	212c      	movs	r1, #44	; 0x2c
 800a268:	fb01 f303 	mul.w	r3, r1, r3
 800a26c:	4413      	add	r3, r2
 800a26e:	335c      	adds	r3, #92	; 0x5c
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	b2d2      	uxtb	r2, r2
 800a27c:	4611      	mov	r1, r2
 800a27e:	4618      	mov	r0, r3
 800a280:	f003 fae5 	bl	800d84e <USB_HC_Halt>
 800a284:	e031      	b.n	800a2ea <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	212c      	movs	r1, #44	; 0x2c
 800a28c:	fb01 f303 	mul.w	r3, r1, r3
 800a290:	4413      	add	r3, r2
 800a292:	333f      	adds	r3, #63	; 0x3f
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d009      	beq.n	800a2ae <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	212c      	movs	r1, #44	; 0x2c
 800a2a0:	fb01 f303 	mul.w	r3, r1, r3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	333f      	adds	r3, #63	; 0x3f
 800a2a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d11d      	bne.n	800a2ea <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	212c      	movs	r1, #44	; 0x2c
 800a2b4:	fb01 f303 	mul.w	r3, r1, r3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	335c      	adds	r3, #92	; 0x5c
 800a2bc:	2200      	movs	r2, #0
 800a2be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d110      	bne.n	800a2ea <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	212c      	movs	r1, #44	; 0x2c
 800a2ce:	fb01 f303 	mul.w	r3, r1, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3361      	adds	r3, #97	; 0x61
 800a2d6:	2203      	movs	r2, #3
 800a2d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	b2d2      	uxtb	r2, r2
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f003 fab2 	bl	800d84e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	6093      	str	r3, [r2, #8]
}
 800a2fc:	bf00      	nop
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800a31a:	78fb      	ldrb	r3, [r7, #3]
 800a31c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	015a      	lsls	r2, r3, #5
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	4413      	add	r3, r2
 800a326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	2b04      	cmp	r3, #4
 800a332:	d11a      	bne.n	800a36a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a340:	461a      	mov	r2, r3
 800a342:	2304      	movs	r3, #4
 800a344:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	212c      	movs	r1, #44	; 0x2c
 800a34c:	fb01 f303 	mul.w	r3, r1, r3
 800a350:	4413      	add	r3, r2
 800a352:	3361      	adds	r3, #97	; 0x61
 800a354:	2206      	movs	r2, #6
 800a356:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	b2d2      	uxtb	r2, r2
 800a360:	4611      	mov	r1, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f003 fa73 	bl	800d84e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800a368:	e331      	b.n	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	4413      	add	r3, r2
 800a372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f003 0320 	and.w	r3, r3, #32
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	d12e      	bne.n	800a3de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	4413      	add	r3, r2
 800a388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a38c:	461a      	mov	r2, r3
 800a38e:	2320      	movs	r3, #32
 800a390:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	212c      	movs	r1, #44	; 0x2c
 800a398:	fb01 f303 	mul.w	r3, r1, r3
 800a39c:	4413      	add	r3, r2
 800a39e:	333d      	adds	r3, #61	; 0x3d
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	f040 8313 	bne.w	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	212c      	movs	r1, #44	; 0x2c
 800a3ae:	fb01 f303 	mul.w	r3, r1, r3
 800a3b2:	4413      	add	r3, r2
 800a3b4:	333d      	adds	r3, #61	; 0x3d
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	212c      	movs	r1, #44	; 0x2c
 800a3c0:	fb01 f303 	mul.w	r3, r1, r3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3360      	adds	r3, #96	; 0x60
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f003 fa39 	bl	800d84e <USB_HC_Halt>
}
 800a3dc:	e2f7      	b.n	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3f4:	d112      	bne.n	800a41c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a402:	461a      	mov	r2, r3
 800a404:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a408:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	b2d2      	uxtb	r2, r2
 800a412:	4611      	mov	r1, r2
 800a414:	4618      	mov	r0, r3
 800a416:	f003 fa1a 	bl	800d84e <USB_HC_Halt>
}
 800a41a:	e2d8      	b.n	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	4413      	add	r3, r2
 800a424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d140      	bne.n	800a4b4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	212c      	movs	r1, #44	; 0x2c
 800a438:	fb01 f303 	mul.w	r3, r1, r3
 800a43c:	4413      	add	r3, r2
 800a43e:	335c      	adds	r3, #92	; 0x5c
 800a440:	2200      	movs	r2, #0
 800a442:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a456:	2b40      	cmp	r3, #64	; 0x40
 800a458:	d111      	bne.n	800a47e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	212c      	movs	r1, #44	; 0x2c
 800a460:	fb01 f303 	mul.w	r3, r1, r3
 800a464:	4413      	add	r3, r2
 800a466:	333d      	adds	r3, #61	; 0x3d
 800a468:	2201      	movs	r2, #1
 800a46a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	015a      	lsls	r2, r3, #5
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	4413      	add	r3, r2
 800a474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a478:	461a      	mov	r2, r3
 800a47a:	2340      	movs	r3, #64	; 0x40
 800a47c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	4413      	add	r3, r2
 800a486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a48a:	461a      	mov	r2, r3
 800a48c:	2301      	movs	r3, #1
 800a48e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	212c      	movs	r1, #44	; 0x2c
 800a496:	fb01 f303 	mul.w	r3, r1, r3
 800a49a:	4413      	add	r3, r2
 800a49c:	3361      	adds	r3, #97	; 0x61
 800a49e:	2201      	movs	r2, #1
 800a4a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	b2d2      	uxtb	r2, r2
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f003 f9ce 	bl	800d84e <USB_HC_Halt>
}
 800a4b2:	e28c      	b.n	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c6:	2b40      	cmp	r3, #64	; 0x40
 800a4c8:	d12c      	bne.n	800a524 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	212c      	movs	r1, #44	; 0x2c
 800a4d0:	fb01 f303 	mul.w	r3, r1, r3
 800a4d4:	4413      	add	r3, r2
 800a4d6:	3361      	adds	r3, #97	; 0x61
 800a4d8:	2204      	movs	r2, #4
 800a4da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	212c      	movs	r1, #44	; 0x2c
 800a4e2:	fb01 f303 	mul.w	r3, r1, r3
 800a4e6:	4413      	add	r3, r2
 800a4e8:	333d      	adds	r3, #61	; 0x3d
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	212c      	movs	r1, #44	; 0x2c
 800a4f4:	fb01 f303 	mul.w	r3, r1, r3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	335c      	adds	r3, #92	; 0x5c
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	b2d2      	uxtb	r2, r2
 800a508:	4611      	mov	r1, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f003 f99f 	bl	800d84e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	4413      	add	r3, r2
 800a518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a51c:	461a      	mov	r2, r3
 800a51e:	2340      	movs	r3, #64	; 0x40
 800a520:	6093      	str	r3, [r2, #8]
}
 800a522:	e254      	b.n	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f003 0308 	and.w	r3, r3, #8
 800a536:	2b08      	cmp	r3, #8
 800a538:	d11a      	bne.n	800a570 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	4413      	add	r3, r2
 800a542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a546:	461a      	mov	r2, r3
 800a548:	2308      	movs	r3, #8
 800a54a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	212c      	movs	r1, #44	; 0x2c
 800a552:	fb01 f303 	mul.w	r3, r1, r3
 800a556:	4413      	add	r3, r2
 800a558:	3361      	adds	r3, #97	; 0x61
 800a55a:	2205      	movs	r2, #5
 800a55c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	4611      	mov	r1, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f003 f970 	bl	800d84e <USB_HC_Halt>
}
 800a56e:	e22e      	b.n	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	4413      	add	r3, r2
 800a578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f003 0310 	and.w	r3, r3, #16
 800a582:	2b10      	cmp	r3, #16
 800a584:	d140      	bne.n	800a608 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	212c      	movs	r1, #44	; 0x2c
 800a58c:	fb01 f303 	mul.w	r3, r1, r3
 800a590:	4413      	add	r3, r2
 800a592:	335c      	adds	r3, #92	; 0x5c
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	212c      	movs	r1, #44	; 0x2c
 800a59e:	fb01 f303 	mul.w	r3, r1, r3
 800a5a2:	4413      	add	r3, r2
 800a5a4:	3361      	adds	r3, #97	; 0x61
 800a5a6:	2203      	movs	r2, #3
 800a5a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	212c      	movs	r1, #44	; 0x2c
 800a5b0:	fb01 f303 	mul.w	r3, r1, r3
 800a5b4:	4413      	add	r3, r2
 800a5b6:	333d      	adds	r3, #61	; 0x3d
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d112      	bne.n	800a5e4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	212c      	movs	r1, #44	; 0x2c
 800a5c4:	fb01 f303 	mul.w	r3, r1, r3
 800a5c8:	4413      	add	r3, r2
 800a5ca:	333c      	adds	r3, #60	; 0x3c
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d108      	bne.n	800a5e4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	212c      	movs	r1, #44	; 0x2c
 800a5d8:	fb01 f303 	mul.w	r3, r1, r3
 800a5dc:	4413      	add	r3, r2
 800a5de:	333d      	adds	r3, #61	; 0x3d
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	b2d2      	uxtb	r2, r2
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f003 f92d 	bl	800d84e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a600:	461a      	mov	r2, r3
 800a602:	2310      	movs	r3, #16
 800a604:	6093      	str	r3, [r2, #8]
}
 800a606:	e1e2      	b.n	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61a:	2b80      	cmp	r3, #128	; 0x80
 800a61c:	d164      	bne.n	800a6e8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d111      	bne.n	800a64a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	212c      	movs	r1, #44	; 0x2c
 800a62c:	fb01 f303 	mul.w	r3, r1, r3
 800a630:	4413      	add	r3, r2
 800a632:	3361      	adds	r3, #97	; 0x61
 800a634:	2206      	movs	r2, #6
 800a636:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	b2d2      	uxtb	r2, r2
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f003 f903 	bl	800d84e <USB_HC_Halt>
 800a648:	e044      	b.n	800a6d4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	212c      	movs	r1, #44	; 0x2c
 800a650:	fb01 f303 	mul.w	r3, r1, r3
 800a654:	4413      	add	r3, r2
 800a656:	335c      	adds	r3, #92	; 0x5c
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	1c5a      	adds	r2, r3, #1
 800a65c:	6879      	ldr	r1, [r7, #4]
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	202c      	movs	r0, #44	; 0x2c
 800a662:	fb00 f303 	mul.w	r3, r0, r3
 800a666:	440b      	add	r3, r1
 800a668:	335c      	adds	r3, #92	; 0x5c
 800a66a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	212c      	movs	r1, #44	; 0x2c
 800a672:	fb01 f303 	mul.w	r3, r1, r3
 800a676:	4413      	add	r3, r2
 800a678:	335c      	adds	r3, #92	; 0x5c
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d920      	bls.n	800a6c2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	212c      	movs	r1, #44	; 0x2c
 800a686:	fb01 f303 	mul.w	r3, r1, r3
 800a68a:	4413      	add	r3, r2
 800a68c:	335c      	adds	r3, #92	; 0x5c
 800a68e:	2200      	movs	r2, #0
 800a690:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	212c      	movs	r1, #44	; 0x2c
 800a698:	fb01 f303 	mul.w	r3, r1, r3
 800a69c:	4413      	add	r3, r2
 800a69e:	3360      	adds	r3, #96	; 0x60
 800a6a0:	2204      	movs	r2, #4
 800a6a2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	b2d9      	uxtb	r1, r3
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	202c      	movs	r0, #44	; 0x2c
 800a6ae:	fb00 f303 	mul.w	r3, r0, r3
 800a6b2:	4413      	add	r3, r2
 800a6b4:	3360      	adds	r3, #96	; 0x60
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f004 fbd0 	bl	800ee60 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a6c0:	e008      	b.n	800a6d4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	212c      	movs	r1, #44	; 0x2c
 800a6c8:	fb01 f303 	mul.w	r3, r1, r3
 800a6cc:	4413      	add	r3, r2
 800a6ce:	3360      	adds	r3, #96	; 0x60
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	2380      	movs	r3, #128	; 0x80
 800a6e4:	6093      	str	r3, [r2, #8]
}
 800a6e6:	e172      	b.n	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6fe:	d11b      	bne.n	800a738 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	212c      	movs	r1, #44	; 0x2c
 800a706:	fb01 f303 	mul.w	r3, r1, r3
 800a70a:	4413      	add	r3, r2
 800a70c:	3361      	adds	r3, #97	; 0x61
 800a70e:	2208      	movs	r2, #8
 800a710:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	b2d2      	uxtb	r2, r2
 800a71a:	4611      	mov	r1, r2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f003 f896 	bl	800d84e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a72e:	461a      	mov	r2, r3
 800a730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a734:	6093      	str	r3, [r2, #8]
}
 800a736:	e14a      	b.n	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	f040 813f 	bne.w	800a9ce <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	212c      	movs	r1, #44	; 0x2c
 800a756:	fb01 f303 	mul.w	r3, r1, r3
 800a75a:	4413      	add	r3, r2
 800a75c:	3361      	adds	r3, #97	; 0x61
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d17d      	bne.n	800a860 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	212c      	movs	r1, #44	; 0x2c
 800a76a:	fb01 f303 	mul.w	r3, r1, r3
 800a76e:	4413      	add	r3, r2
 800a770:	3360      	adds	r3, #96	; 0x60
 800a772:	2201      	movs	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	212c      	movs	r1, #44	; 0x2c
 800a77c:	fb01 f303 	mul.w	r3, r1, r3
 800a780:	4413      	add	r3, r2
 800a782:	333f      	adds	r3, #63	; 0x3f
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b02      	cmp	r3, #2
 800a788:	d00a      	beq.n	800a7a0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	212c      	movs	r1, #44	; 0x2c
 800a790:	fb01 f303 	mul.w	r3, r1, r3
 800a794:	4413      	add	r3, r2
 800a796:	333f      	adds	r3, #63	; 0x3f
 800a798:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	f040 8100 	bne.w	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d113      	bne.n	800a7d0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	212c      	movs	r1, #44	; 0x2c
 800a7ae:	fb01 f303 	mul.w	r3, r1, r3
 800a7b2:	4413      	add	r3, r2
 800a7b4:	3355      	adds	r3, #85	; 0x55
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	f083 0301 	eor.w	r3, r3, #1
 800a7bc:	b2d8      	uxtb	r0, r3
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	212c      	movs	r1, #44	; 0x2c
 800a7c4:	fb01 f303 	mul.w	r3, r1, r3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	3355      	adds	r3, #85	; 0x55
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	f040 80e3 	bne.w	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	212c      	movs	r1, #44	; 0x2c
 800a7e0:	fb01 f303 	mul.w	r3, r1, r3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	334c      	adds	r3, #76	; 0x4c
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 80d8 	beq.w	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	212c      	movs	r1, #44	; 0x2c
 800a7f6:	fb01 f303 	mul.w	r3, r1, r3
 800a7fa:	4413      	add	r3, r2
 800a7fc:	334c      	adds	r3, #76	; 0x4c
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6879      	ldr	r1, [r7, #4]
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	202c      	movs	r0, #44	; 0x2c
 800a806:	fb00 f202 	mul.w	r2, r0, r2
 800a80a:	440a      	add	r2, r1
 800a80c:	3240      	adds	r2, #64	; 0x40
 800a80e:	8812      	ldrh	r2, [r2, #0]
 800a810:	4413      	add	r3, r2
 800a812:	3b01      	subs	r3, #1
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	202c      	movs	r0, #44	; 0x2c
 800a81a:	fb00 f202 	mul.w	r2, r0, r2
 800a81e:	440a      	add	r2, r1
 800a820:	3240      	adds	r2, #64	; 0x40
 800a822:	8812      	ldrh	r2, [r2, #0]
 800a824:	fbb3 f3f2 	udiv	r3, r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	f000 80b5 	beq.w	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	212c      	movs	r1, #44	; 0x2c
 800a83c:	fb01 f303 	mul.w	r3, r1, r3
 800a840:	4413      	add	r3, r2
 800a842:	3355      	adds	r3, #85	; 0x55
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	f083 0301 	eor.w	r3, r3, #1
 800a84a:	b2d8      	uxtb	r0, r3
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	212c      	movs	r1, #44	; 0x2c
 800a852:	fb01 f303 	mul.w	r3, r1, r3
 800a856:	4413      	add	r3, r2
 800a858:	3355      	adds	r3, #85	; 0x55
 800a85a:	4602      	mov	r2, r0
 800a85c:	701a      	strb	r2, [r3, #0]
 800a85e:	e09f      	b.n	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	212c      	movs	r1, #44	; 0x2c
 800a866:	fb01 f303 	mul.w	r3, r1, r3
 800a86a:	4413      	add	r3, r2
 800a86c:	3361      	adds	r3, #97	; 0x61
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b03      	cmp	r3, #3
 800a872:	d109      	bne.n	800a888 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	212c      	movs	r1, #44	; 0x2c
 800a87a:	fb01 f303 	mul.w	r3, r1, r3
 800a87e:	4413      	add	r3, r2
 800a880:	3360      	adds	r3, #96	; 0x60
 800a882:	2202      	movs	r2, #2
 800a884:	701a      	strb	r2, [r3, #0]
 800a886:	e08b      	b.n	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	212c      	movs	r1, #44	; 0x2c
 800a88e:	fb01 f303 	mul.w	r3, r1, r3
 800a892:	4413      	add	r3, r2
 800a894:	3361      	adds	r3, #97	; 0x61
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b04      	cmp	r3, #4
 800a89a:	d109      	bne.n	800a8b0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	212c      	movs	r1, #44	; 0x2c
 800a8a2:	fb01 f303 	mul.w	r3, r1, r3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	3360      	adds	r3, #96	; 0x60
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	e077      	b.n	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	212c      	movs	r1, #44	; 0x2c
 800a8b6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ba:	4413      	add	r3, r2
 800a8bc:	3361      	adds	r3, #97	; 0x61
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b05      	cmp	r3, #5
 800a8c2:	d109      	bne.n	800a8d8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	212c      	movs	r1, #44	; 0x2c
 800a8ca:	fb01 f303 	mul.w	r3, r1, r3
 800a8ce:	4413      	add	r3, r2
 800a8d0:	3360      	adds	r3, #96	; 0x60
 800a8d2:	2205      	movs	r2, #5
 800a8d4:	701a      	strb	r2, [r3, #0]
 800a8d6:	e063      	b.n	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	212c      	movs	r1, #44	; 0x2c
 800a8de:	fb01 f303 	mul.w	r3, r1, r3
 800a8e2:	4413      	add	r3, r2
 800a8e4:	3361      	adds	r3, #97	; 0x61
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	2b06      	cmp	r3, #6
 800a8ea:	d009      	beq.n	800a900 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	212c      	movs	r1, #44	; 0x2c
 800a8f2:	fb01 f303 	mul.w	r3, r1, r3
 800a8f6:	4413      	add	r3, r2
 800a8f8:	3361      	adds	r3, #97	; 0x61
 800a8fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d14f      	bne.n	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	212c      	movs	r1, #44	; 0x2c
 800a906:	fb01 f303 	mul.w	r3, r1, r3
 800a90a:	4413      	add	r3, r2
 800a90c:	335c      	adds	r3, #92	; 0x5c
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	1c5a      	adds	r2, r3, #1
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	202c      	movs	r0, #44	; 0x2c
 800a918:	fb00 f303 	mul.w	r3, r0, r3
 800a91c:	440b      	add	r3, r1
 800a91e:	335c      	adds	r3, #92	; 0x5c
 800a920:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	212c      	movs	r1, #44	; 0x2c
 800a928:	fb01 f303 	mul.w	r3, r1, r3
 800a92c:	4413      	add	r3, r2
 800a92e:	335c      	adds	r3, #92	; 0x5c
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b02      	cmp	r3, #2
 800a934:	d912      	bls.n	800a95c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	212c      	movs	r1, #44	; 0x2c
 800a93c:	fb01 f303 	mul.w	r3, r1, r3
 800a940:	4413      	add	r3, r2
 800a942:	335c      	adds	r3, #92	; 0x5c
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	212c      	movs	r1, #44	; 0x2c
 800a94e:	fb01 f303 	mul.w	r3, r1, r3
 800a952:	4413      	add	r3, r2
 800a954:	3360      	adds	r3, #96	; 0x60
 800a956:	2204      	movs	r2, #4
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	e021      	b.n	800a9a0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	212c      	movs	r1, #44	; 0x2c
 800a962:	fb01 f303 	mul.w	r3, r1, r3
 800a966:	4413      	add	r3, r2
 800a968:	3360      	adds	r3, #96	; 0x60
 800a96a:	2202      	movs	r2, #2
 800a96c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	4413      	add	r3, r2
 800a976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a984:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a98c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	4413      	add	r3, r2
 800a996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a99a:	461a      	mov	r2, r3
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	b2d9      	uxtb	r1, r3
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	202c      	movs	r0, #44	; 0x2c
 800a9bc:	fb00 f303 	mul.w	r3, r0, r3
 800a9c0:	4413      	add	r3, r2
 800a9c2:	3360      	adds	r3, #96	; 0x60
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f004 fa49 	bl	800ee60 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a9ce:	bf00      	nop
 800a9d0:	3720      	adds	r7, #32
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b08a      	sub	sp, #40	; 0x28
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	f003 030f 	and.w	r3, r3, #15
 800a9f6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	0c5b      	lsrs	r3, r3, #17
 800a9fc:	f003 030f 	and.w	r3, r3, #15
 800aa00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	091b      	lsrs	r3, r3, #4
 800aa06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d004      	beq.n	800aa1c <HCD_RXQLVL_IRQHandler+0x46>
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b05      	cmp	r3, #5
 800aa16:	f000 80a9 	beq.w	800ab6c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800aa1a:	e0aa      	b.n	800ab72 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 80a6 	beq.w	800ab70 <HCD_RXQLVL_IRQHandler+0x19a>
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	212c      	movs	r1, #44	; 0x2c
 800aa2a:	fb01 f303 	mul.w	r3, r1, r3
 800aa2e:	4413      	add	r3, r2
 800aa30:	3344      	adds	r3, #68	; 0x44
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 809b 	beq.w	800ab70 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	212c      	movs	r1, #44	; 0x2c
 800aa40:	fb01 f303 	mul.w	r3, r1, r3
 800aa44:	4413      	add	r3, r2
 800aa46:	3350      	adds	r3, #80	; 0x50
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	441a      	add	r2, r3
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	202c      	movs	r0, #44	; 0x2c
 800aa54:	fb00 f303 	mul.w	r3, r0, r3
 800aa58:	440b      	add	r3, r1
 800aa5a:	334c      	adds	r3, #76	; 0x4c
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d87a      	bhi.n	800ab58 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	212c      	movs	r1, #44	; 0x2c
 800aa6c:	fb01 f303 	mul.w	r3, r1, r3
 800aa70:	4413      	add	r3, r2
 800aa72:	3344      	adds	r3, #68	; 0x44
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	b292      	uxth	r2, r2
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	f002 fa68 	bl	800cf50 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	212c      	movs	r1, #44	; 0x2c
 800aa86:	fb01 f303 	mul.w	r3, r1, r3
 800aa8a:	4413      	add	r3, r2
 800aa8c:	3344      	adds	r3, #68	; 0x44
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	441a      	add	r2, r3
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	202c      	movs	r0, #44	; 0x2c
 800aa9a:	fb00 f303 	mul.w	r3, r0, r3
 800aa9e:	440b      	add	r3, r1
 800aaa0:	3344      	adds	r3, #68	; 0x44
 800aaa2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	212c      	movs	r1, #44	; 0x2c
 800aaaa:	fb01 f303 	mul.w	r3, r1, r3
 800aaae:	4413      	add	r3, r2
 800aab0:	3350      	adds	r3, #80	; 0x50
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	441a      	add	r2, r3
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	202c      	movs	r0, #44	; 0x2c
 800aabe:	fb00 f303 	mul.w	r3, r0, r3
 800aac2:	440b      	add	r3, r1
 800aac4:	3350      	adds	r3, #80	; 0x50
 800aac6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	0cdb      	lsrs	r3, r3, #19
 800aad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aadc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	212c      	movs	r1, #44	; 0x2c
 800aae4:	fb01 f303 	mul.w	r3, r1, r3
 800aae8:	4413      	add	r3, r2
 800aaea:	3340      	adds	r3, #64	; 0x40
 800aaec:	881b      	ldrh	r3, [r3, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d13c      	bne.n	800ab70 <HCD_RXQLVL_IRQHandler+0x19a>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d039      	beq.n	800ab70 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	015a      	lsls	r2, r3, #5
 800ab00:	6a3b      	ldr	r3, [r7, #32]
 800ab02:	4413      	add	r3, r2
 800ab04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab12:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab1a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab28:	461a      	mov	r2, r3
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	212c      	movs	r1, #44	; 0x2c
 800ab34:	fb01 f303 	mul.w	r3, r1, r3
 800ab38:	4413      	add	r3, r2
 800ab3a:	3354      	adds	r3, #84	; 0x54
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	f083 0301 	eor.w	r3, r3, #1
 800ab42:	b2d8      	uxtb	r0, r3
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	212c      	movs	r1, #44	; 0x2c
 800ab4a:	fb01 f303 	mul.w	r3, r1, r3
 800ab4e:	4413      	add	r3, r2
 800ab50:	3354      	adds	r3, #84	; 0x54
 800ab52:	4602      	mov	r2, r0
 800ab54:	701a      	strb	r2, [r3, #0]
      break;
 800ab56:	e00b      	b.n	800ab70 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	212c      	movs	r1, #44	; 0x2c
 800ab5e:	fb01 f303 	mul.w	r3, r1, r3
 800ab62:	4413      	add	r3, r2
 800ab64:	3360      	adds	r3, #96	; 0x60
 800ab66:	2204      	movs	r2, #4
 800ab68:	701a      	strb	r2, [r3, #0]
      break;
 800ab6a:	e001      	b.n	800ab70 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800ab6c:	bf00      	nop
 800ab6e:	e000      	b.n	800ab72 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800ab70:	bf00      	nop
  }
}
 800ab72:	bf00      	nop
 800ab74:	3728      	adds	r7, #40	; 0x28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b086      	sub	sp, #24
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aba6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f003 0302 	and.w	r3, r3, #2
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d10b      	bne.n	800abca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d102      	bne.n	800abc2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f004 f933 	bl	800ee28 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	f043 0302 	orr.w	r3, r3, #2
 800abc8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d132      	bne.n	800ac3a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f043 0308 	orr.w	r3, r3, #8
 800abda:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f003 0304 	and.w	r3, r3, #4
 800abe2:	2b04      	cmp	r3, #4
 800abe4:	d126      	bne.n	800ac34 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	2b02      	cmp	r3, #2
 800abec:	d113      	bne.n	800ac16 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800abf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abf8:	d106      	bne.n	800ac08 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2102      	movs	r1, #2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f002 fb13 	bl	800d22c <USB_InitFSLSPClkSel>
 800ac06:	e011      	b.n	800ac2c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f002 fb0c 	bl	800d22c <USB_InitFSLSPClkSel>
 800ac14:	e00a      	b.n	800ac2c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d106      	bne.n	800ac2c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac24:	461a      	mov	r2, r3
 800ac26:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ac2a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f004 f925 	bl	800ee7c <HAL_HCD_PortEnabled_Callback>
 800ac32:	e002      	b.n	800ac3a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f004 f92f 	bl	800ee98 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f003 0320 	and.w	r3, r3, #32
 800ac40:	2b20      	cmp	r3, #32
 800ac42:	d103      	bne.n	800ac4c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	f043 0320 	orr.w	r3, r3, #32
 800ac4a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac52:	461a      	mov	r2, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	6013      	str	r3, [r2, #0]
}
 800ac58:	bf00      	nop
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e12b      	b.n	800aeca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7fd fe9c 	bl	80089c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2224      	movs	r2, #36	; 0x24
 800ac90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f022 0201 	bic.w	r2, r2, #1
 800aca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800acc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800acc4:	f001 fa20 	bl	800c108 <HAL_RCC_GetPCLK1Freq>
 800acc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	4a81      	ldr	r2, [pc, #516]	; (800aed4 <HAL_I2C_Init+0x274>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d807      	bhi.n	800ace4 <HAL_I2C_Init+0x84>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4a80      	ldr	r2, [pc, #512]	; (800aed8 <HAL_I2C_Init+0x278>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	bf94      	ite	ls
 800acdc:	2301      	movls	r3, #1
 800acde:	2300      	movhi	r3, #0
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	e006      	b.n	800acf2 <HAL_I2C_Init+0x92>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	4a7d      	ldr	r2, [pc, #500]	; (800aedc <HAL_I2C_Init+0x27c>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	bf94      	ite	ls
 800acec:	2301      	movls	r3, #1
 800acee:	2300      	movhi	r3, #0
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e0e7      	b.n	800aeca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4a78      	ldr	r2, [pc, #480]	; (800aee0 <HAL_I2C_Init+0x280>)
 800acfe:	fba2 2303 	umull	r2, r3, r2, r3
 800ad02:	0c9b      	lsrs	r3, r3, #18
 800ad04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6a1b      	ldr	r3, [r3, #32]
 800ad20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	4a6a      	ldr	r2, [pc, #424]	; (800aed4 <HAL_I2C_Init+0x274>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d802      	bhi.n	800ad34 <HAL_I2C_Init+0xd4>
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	3301      	adds	r3, #1
 800ad32:	e009      	b.n	800ad48 <HAL_I2C_Init+0xe8>
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ad3a:	fb02 f303 	mul.w	r3, r2, r3
 800ad3e:	4a69      	ldr	r2, [pc, #420]	; (800aee4 <HAL_I2C_Init+0x284>)
 800ad40:	fba2 2303 	umull	r2, r3, r2, r3
 800ad44:	099b      	lsrs	r3, r3, #6
 800ad46:	3301      	adds	r3, #1
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	6812      	ldr	r2, [r2, #0]
 800ad4c:	430b      	orrs	r3, r1
 800ad4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	69db      	ldr	r3, [r3, #28]
 800ad56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ad5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	495c      	ldr	r1, [pc, #368]	; (800aed4 <HAL_I2C_Init+0x274>)
 800ad64:	428b      	cmp	r3, r1
 800ad66:	d819      	bhi.n	800ad9c <HAL_I2C_Init+0x13c>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	1e59      	subs	r1, r3, #1
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad76:	1c59      	adds	r1, r3, #1
 800ad78:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ad7c:	400b      	ands	r3, r1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <HAL_I2C_Init+0x138>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	1e59      	subs	r1, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad90:	3301      	adds	r3, #1
 800ad92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad96:	e051      	b.n	800ae3c <HAL_I2C_Init+0x1dc>
 800ad98:	2304      	movs	r3, #4
 800ad9a:	e04f      	b.n	800ae3c <HAL_I2C_Init+0x1dc>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d111      	bne.n	800adc8 <HAL_I2C_Init+0x168>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	1e58      	subs	r0, r3, #1
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6859      	ldr	r1, [r3, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	005b      	lsls	r3, r3, #1
 800adb0:	440b      	add	r3, r1
 800adb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800adb6:	3301      	adds	r3, #1
 800adb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	bf0c      	ite	eq
 800adc0:	2301      	moveq	r3, #1
 800adc2:	2300      	movne	r3, #0
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	e012      	b.n	800adee <HAL_I2C_Init+0x18e>
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	1e58      	subs	r0, r3, #1
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6859      	ldr	r1, [r3, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	440b      	add	r3, r1
 800add6:	0099      	lsls	r1, r3, #2
 800add8:	440b      	add	r3, r1
 800adda:	fbb0 f3f3 	udiv	r3, r0, r3
 800adde:	3301      	adds	r3, #1
 800ade0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bf0c      	ite	eq
 800ade8:	2301      	moveq	r3, #1
 800adea:	2300      	movne	r3, #0
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <HAL_I2C_Init+0x196>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e022      	b.n	800ae3c <HAL_I2C_Init+0x1dc>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10e      	bne.n	800ae1c <HAL_I2C_Init+0x1bc>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1e58      	subs	r0, r3, #1
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6859      	ldr	r1, [r3, #4]
 800ae06:	460b      	mov	r3, r1
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	440b      	add	r3, r1
 800ae0c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae10:	3301      	adds	r3, #1
 800ae12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae1a:	e00f      	b.n	800ae3c <HAL_I2C_Init+0x1dc>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	1e58      	subs	r0, r3, #1
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6859      	ldr	r1, [r3, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	440b      	add	r3, r1
 800ae2a:	0099      	lsls	r1, r3, #2
 800ae2c:	440b      	add	r3, r1
 800ae2e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae32:	3301      	adds	r3, #1
 800ae34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae3c:	6879      	ldr	r1, [r7, #4]
 800ae3e:	6809      	ldr	r1, [r1, #0]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	69da      	ldr	r2, [r3, #28]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	431a      	orrs	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ae6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	6911      	ldr	r1, [r2, #16]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	68d2      	ldr	r2, [r2, #12]
 800ae76:	4311      	orrs	r1, r2
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6812      	ldr	r2, [r2, #0]
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	695a      	ldr	r2, [r3, #20]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	431a      	orrs	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f042 0201 	orr.w	r2, r2, #1
 800aeaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	000186a0 	.word	0x000186a0
 800aed8:	001e847f 	.word	0x001e847f
 800aedc:	003d08ff 	.word	0x003d08ff
 800aee0:	431bde83 	.word	0x431bde83
 800aee4:	10624dd3 	.word	0x10624dd3

0800aee8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b088      	sub	sp, #32
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e128      	b.n	800b14c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d109      	bne.n	800af1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a90      	ldr	r2, [pc, #576]	; (800b154 <HAL_I2S_Init+0x26c>)
 800af12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7fd fd9d 	bl	8008a54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2202      	movs	r2, #2
 800af1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	6812      	ldr	r2, [r2, #0]
 800af2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800af30:	f023 030f 	bic.w	r3, r3, #15
 800af34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2202      	movs	r2, #2
 800af3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d060      	beq.n	800b008 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d102      	bne.n	800af54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800af4e:	2310      	movs	r3, #16
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	e001      	b.n	800af58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800af54:	2320      	movs	r3, #32
 800af56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	2b20      	cmp	r3, #32
 800af5e:	d802      	bhi.n	800af66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800af66:	2001      	movs	r0, #1
 800af68:	f001 f9d8 	bl	800c31c <HAL_RCCEx_GetPeriphCLKFreq>
 800af6c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af76:	d125      	bne.n	800afc4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d010      	beq.n	800afa2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	fbb2 f2f3 	udiv	r2, r2, r3
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	461a      	mov	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9c:	3305      	adds	r3, #5
 800af9e:	613b      	str	r3, [r7, #16]
 800afa0:	e01f      	b.n	800afe2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	fbb2 f2f3 	udiv	r2, r2, r3
 800afac:	4613      	mov	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	461a      	mov	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	fbb2 f3f3 	udiv	r3, r2, r3
 800afbe:	3305      	adds	r3, #5
 800afc0:	613b      	str	r3, [r7, #16]
 800afc2:	e00e      	b.n	800afe2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	fbb2 f2f3 	udiv	r2, r2, r3
 800afcc:	4613      	mov	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	461a      	mov	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	695b      	ldr	r3, [r3, #20]
 800afda:	fbb2 f3f3 	udiv	r3, r2, r3
 800afde:	3305      	adds	r3, #5
 800afe0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	4a5c      	ldr	r2, [pc, #368]	; (800b158 <HAL_I2S_Init+0x270>)
 800afe6:	fba2 2303 	umull	r2, r3, r2, r3
 800afea:	08db      	lsrs	r3, r3, #3
 800afec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800aff6:	693a      	ldr	r2, [r7, #16]
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	085b      	lsrs	r3, r3, #1
 800affe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	021b      	lsls	r3, r3, #8
 800b004:	61bb      	str	r3, [r7, #24]
 800b006:	e003      	b.n	800b010 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800b008:	2302      	movs	r3, #2
 800b00a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800b00c:	2300      	movs	r3, #0
 800b00e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d902      	bls.n	800b01c <HAL_I2S_Init+0x134>
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	2bff      	cmp	r3, #255	; 0xff
 800b01a:	d907      	bls.n	800b02c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b020:	f043 0210 	orr.w	r2, r3, #16
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e08f      	b.n	800b14c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691a      	ldr	r2, [r3, #16]
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	ea42 0103 	orr.w	r1, r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	69fa      	ldr	r2, [r7, #28]
 800b03c:	430a      	orrs	r2, r1
 800b03e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b04a:	f023 030f 	bic.w	r3, r3, #15
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	6851      	ldr	r1, [r2, #4]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	6892      	ldr	r2, [r2, #8]
 800b056:	4311      	orrs	r1, r2
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	68d2      	ldr	r2, [r2, #12]
 800b05c:	4311      	orrs	r1, r2
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	6992      	ldr	r2, [r2, #24]
 800b062:	430a      	orrs	r2, r1
 800b064:	431a      	orrs	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b06e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a1b      	ldr	r3, [r3, #32]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d161      	bne.n	800b13c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a38      	ldr	r2, [pc, #224]	; (800b15c <HAL_I2S_Init+0x274>)
 800b07c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a37      	ldr	r2, [pc, #220]	; (800b160 <HAL_I2S_Init+0x278>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d101      	bne.n	800b08c <HAL_I2S_Init+0x1a4>
 800b088:	4b36      	ldr	r3, [pc, #216]	; (800b164 <HAL_I2S_Init+0x27c>)
 800b08a:	e001      	b.n	800b090 <HAL_I2S_Init+0x1a8>
 800b08c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	6812      	ldr	r2, [r2, #0]
 800b096:	4932      	ldr	r1, [pc, #200]	; (800b160 <HAL_I2S_Init+0x278>)
 800b098:	428a      	cmp	r2, r1
 800b09a:	d101      	bne.n	800b0a0 <HAL_I2S_Init+0x1b8>
 800b09c:	4a31      	ldr	r2, [pc, #196]	; (800b164 <HAL_I2S_Init+0x27c>)
 800b09e:	e001      	b.n	800b0a4 <HAL_I2S_Init+0x1bc>
 800b0a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800b0a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b0a8:	f023 030f 	bic.w	r3, r3, #15
 800b0ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a2b      	ldr	r2, [pc, #172]	; (800b160 <HAL_I2S_Init+0x278>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d101      	bne.n	800b0bc <HAL_I2S_Init+0x1d4>
 800b0b8:	4b2a      	ldr	r3, [pc, #168]	; (800b164 <HAL_I2S_Init+0x27c>)
 800b0ba:	e001      	b.n	800b0c0 <HAL_I2S_Init+0x1d8>
 800b0bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a25      	ldr	r2, [pc, #148]	; (800b160 <HAL_I2S_Init+0x278>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d101      	bne.n	800b0d2 <HAL_I2S_Init+0x1ea>
 800b0ce:	4b25      	ldr	r3, [pc, #148]	; (800b164 <HAL_I2S_Init+0x27c>)
 800b0d0:	e001      	b.n	800b0d6 <HAL_I2S_Init+0x1ee>
 800b0d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0e2:	d003      	beq.n	800b0ec <HAL_I2S_Init+0x204>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d103      	bne.n	800b0f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800b0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0f0:	613b      	str	r3, [r7, #16]
 800b0f2:	e001      	b.n	800b0f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b102:	4313      	orrs	r3, r2
 800b104:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b10c:	4313      	orrs	r3, r2
 800b10e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b116:	4313      	orrs	r3, r2
 800b118:	b29a      	uxth	r2, r3
 800b11a:	897b      	ldrh	r3, [r7, #10]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	b29b      	uxth	r3, r3
 800b120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b124:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a0d      	ldr	r2, [pc, #52]	; (800b160 <HAL_I2S_Init+0x278>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d101      	bne.n	800b134 <HAL_I2S_Init+0x24c>
 800b130:	4b0c      	ldr	r3, [pc, #48]	; (800b164 <HAL_I2S_Init+0x27c>)
 800b132:	e001      	b.n	800b138 <HAL_I2S_Init+0x250>
 800b134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b138:	897a      	ldrh	r2, [r7, #10]
 800b13a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3720      	adds	r7, #32
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	0800b25f 	.word	0x0800b25f
 800b158:	cccccccd 	.word	0xcccccccd
 800b15c:	0800b375 	.word	0x0800b375
 800b160:	40003800 	.word	0x40003800
 800b164:	40003400 	.word	0x40003400

0800b168 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	881a      	ldrh	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	1c9a      	adds	r2, r3, #2
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10e      	bne.n	800b1f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b1e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff ffb8 	bl	800b168 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b1f8:	bf00      	nop
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68da      	ldr	r2, [r3, #12]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b212:	b292      	uxth	r2, r2
 800b214:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21a:	1c9a      	adds	r2, r3, #2
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b224:	b29b      	uxth	r3, r3
 800b226:	3b01      	subs	r3, #1
 800b228:	b29a      	uxth	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b232:	b29b      	uxth	r3, r3
 800b234:	2b00      	cmp	r3, #0
 800b236:	d10e      	bne.n	800b256 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b246:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff ff93 	bl	800b17c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b256:	bf00      	nop
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b086      	sub	sp, #24
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b04      	cmp	r3, #4
 800b278:	d13a      	bne.n	800b2f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	2b01      	cmp	r3, #1
 800b282:	d109      	bne.n	800b298 <I2S_IRQHandler+0x3a>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b28e:	2b40      	cmp	r3, #64	; 0x40
 800b290:	d102      	bne.n	800b298 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7ff ffb4 	bl	800b200 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b29e:	2b40      	cmp	r3, #64	; 0x40
 800b2a0:	d126      	bne.n	800b2f0 <I2S_IRQHandler+0x92>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	f003 0320 	and.w	r3, r3, #32
 800b2ac:	2b20      	cmp	r3, #32
 800b2ae:	d11f      	bne.n	800b2f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b2be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	613b      	str	r3, [r7, #16]
 800b2d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e2:	f043 0202 	orr.w	r2, r3, #2
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7ff ff50 	bl	800b190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	d136      	bne.n	800b36a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b02      	cmp	r3, #2
 800b304:	d109      	bne.n	800b31a <I2S_IRQHandler+0xbc>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b310:	2b80      	cmp	r3, #128	; 0x80
 800b312:	d102      	bne.n	800b31a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff ff45 	bl	800b1a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f003 0308 	and.w	r3, r3, #8
 800b320:	2b08      	cmp	r3, #8
 800b322:	d122      	bne.n	800b36a <I2S_IRQHandler+0x10c>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b20      	cmp	r3, #32
 800b330:	d11b      	bne.n	800b36a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b340:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35c:	f043 0204 	orr.w	r2, r3, #4
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7ff ff13 	bl	800b190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b36a:	bf00      	nop
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a92      	ldr	r2, [pc, #584]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d101      	bne.n	800b392 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800b38e:	4b92      	ldr	r3, [pc, #584]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b390:	e001      	b.n	800b396 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800b392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a8b      	ldr	r2, [pc, #556]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d101      	bne.n	800b3b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800b3ac:	4b8a      	ldr	r3, [pc, #552]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b3ae:	e001      	b.n	800b3b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800b3b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c0:	d004      	beq.n	800b3cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f040 8099 	bne.w	800b4fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d107      	bne.n	800b3e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f925 	bl	800b630 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d107      	bne.n	800b400 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f9c8 	bl	800b790 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b406:	2b40      	cmp	r3, #64	; 0x40
 800b408:	d13a      	bne.n	800b480 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	f003 0320 	and.w	r3, r3, #32
 800b410:	2b00      	cmp	r3, #0
 800b412:	d035      	beq.n	800b480 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a6e      	ldr	r2, [pc, #440]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d101      	bne.n	800b422 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800b41e:	4b6e      	ldr	r3, [pc, #440]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b420:	e001      	b.n	800b426 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800b422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b426:	685a      	ldr	r2, [r3, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4969      	ldr	r1, [pc, #420]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b42e:	428b      	cmp	r3, r1
 800b430:	d101      	bne.n	800b436 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800b432:	4b69      	ldr	r3, [pc, #420]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b434:	e001      	b.n	800b43a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800b436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b43a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b43e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b44e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b450:	2300      	movs	r3, #0
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b472:	f043 0202 	orr.w	r2, r3, #2
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f7ff fe88 	bl	800b190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	f003 0308 	and.w	r3, r3, #8
 800b486:	2b08      	cmp	r3, #8
 800b488:	f040 80c3 	bne.w	800b612 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f003 0320 	and.w	r3, r3, #32
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 80bd 	beq.w	800b612 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b4a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a49      	ldr	r2, [pc, #292]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d101      	bne.n	800b4b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800b4b2:	4b49      	ldr	r3, [pc, #292]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b4b4:	e001      	b.n	800b4ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800b4b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4944      	ldr	r1, [pc, #272]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b4c2:	428b      	cmp	r3, r1
 800b4c4:	d101      	bne.n	800b4ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800b4c6:	4b44      	ldr	r3, [pc, #272]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b4c8:	e001      	b.n	800b4ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800b4ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b4ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b4d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	60bb      	str	r3, [r7, #8]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	60bb      	str	r3, [r7, #8]
 800b4e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ee:	f043 0204 	orr.w	r2, r3, #4
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7ff fe4a 	bl	800b190 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b4fc:	e089      	b.n	800b612 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	2b02      	cmp	r3, #2
 800b506:	d107      	bne.n	800b518 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f8be 	bl	800b694 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d107      	bne.n	800b532 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d002      	beq.n	800b532 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f8fd 	bl	800b72c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b538:	2b40      	cmp	r3, #64	; 0x40
 800b53a:	d12f      	bne.n	800b59c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f003 0320 	and.w	r3, r3, #32
 800b542:	2b00      	cmp	r3, #0
 800b544:	d02a      	beq.n	800b59c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b554:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a1e      	ldr	r2, [pc, #120]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d101      	bne.n	800b564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800b560:	4b1d      	ldr	r3, [pc, #116]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b562:	e001      	b.n	800b568 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800b564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b568:	685a      	ldr	r2, [r3, #4]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4919      	ldr	r1, [pc, #100]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b570:	428b      	cmp	r3, r1
 800b572:	d101      	bne.n	800b578 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800b574:	4b18      	ldr	r3, [pc, #96]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b576:	e001      	b.n	800b57c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800b578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b57c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b580:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b58e:	f043 0202 	orr.w	r2, r3, #2
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7ff fdfa 	bl	800b190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	f003 0308 	and.w	r3, r3, #8
 800b5a2:	2b08      	cmp	r3, #8
 800b5a4:	d136      	bne.n	800b614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	f003 0320 	and.w	r3, r3, #32
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d031      	beq.n	800b614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a07      	ldr	r2, [pc, #28]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d101      	bne.n	800b5be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800b5ba:	4b07      	ldr	r3, [pc, #28]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b5bc:	e001      	b.n	800b5c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800b5be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4902      	ldr	r1, [pc, #8]	; (800b5d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b5ca:	428b      	cmp	r3, r1
 800b5cc:	d106      	bne.n	800b5dc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800b5ce:	4b02      	ldr	r3, [pc, #8]	; (800b5d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b5d0:	e006      	b.n	800b5e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800b5d2:	bf00      	nop
 800b5d4:	40003800 	.word	0x40003800
 800b5d8:	40003400 	.word	0x40003400
 800b5dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b5e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b5e4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b5f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b602:	f043 0204 	orr.w	r2, r3, #4
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fdc0 	bl	800b190 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b610:	e000      	b.n	800b614 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b612:	bf00      	nop
}
 800b614:	bf00      	nop
 800b616:	3720      	adds	r7, #32
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63c:	1c99      	adds	r1, r3, #2
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	6251      	str	r1, [r2, #36]	; 0x24
 800b642:	881a      	ldrh	r2, [r3, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b64e:	b29b      	uxth	r3, r3
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d113      	bne.n	800b68a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b670:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b676:	b29b      	uxth	r3, r3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d106      	bne.n	800b68a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff ffc9 	bl	800b61c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b68a:	bf00      	nop
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
	...

0800b694 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	1c99      	adds	r1, r3, #2
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	6251      	str	r1, [r2, #36]	; 0x24
 800b6a6:	8819      	ldrh	r1, [r3, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a1d      	ldr	r2, [pc, #116]	; (800b724 <I2SEx_TxISR_I2SExt+0x90>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d101      	bne.n	800b6b6 <I2SEx_TxISR_I2SExt+0x22>
 800b6b2:	4b1d      	ldr	r3, [pc, #116]	; (800b728 <I2SEx_TxISR_I2SExt+0x94>)
 800b6b4:	e001      	b.n	800b6ba <I2SEx_TxISR_I2SExt+0x26>
 800b6b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b6ba:	460a      	mov	r2, r1
 800b6bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d121      	bne.n	800b71a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a12      	ldr	r2, [pc, #72]	; (800b724 <I2SEx_TxISR_I2SExt+0x90>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d101      	bne.n	800b6e4 <I2SEx_TxISR_I2SExt+0x50>
 800b6e0:	4b11      	ldr	r3, [pc, #68]	; (800b728 <I2SEx_TxISR_I2SExt+0x94>)
 800b6e2:	e001      	b.n	800b6e8 <I2SEx_TxISR_I2SExt+0x54>
 800b6e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	490d      	ldr	r1, [pc, #52]	; (800b724 <I2SEx_TxISR_I2SExt+0x90>)
 800b6f0:	428b      	cmp	r3, r1
 800b6f2:	d101      	bne.n	800b6f8 <I2SEx_TxISR_I2SExt+0x64>
 800b6f4:	4b0c      	ldr	r3, [pc, #48]	; (800b728 <I2SEx_TxISR_I2SExt+0x94>)
 800b6f6:	e001      	b.n	800b6fc <I2SEx_TxISR_I2SExt+0x68>
 800b6f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b6fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b700:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b706:	b29b      	uxth	r3, r3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d106      	bne.n	800b71a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ff81 	bl	800b61c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	40003800 	.word	0x40003800
 800b728:	40003400 	.word	0x40003400

0800b72c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68d8      	ldr	r0, [r3, #12]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73e:	1c99      	adds	r1, r3, #2
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	62d1      	str	r1, [r2, #44]	; 0x2c
 800b744:	b282      	uxth	r2, r0
 800b746:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	3b01      	subs	r3, #1
 800b750:	b29a      	uxth	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d113      	bne.n	800b788 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b76e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b774:	b29b      	uxth	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d106      	bne.n	800b788 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2201      	movs	r2, #1
 800b77e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff ff4a 	bl	800b61c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b788:	bf00      	nop
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a20      	ldr	r2, [pc, #128]	; (800b820 <I2SEx_RxISR_I2SExt+0x90>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d101      	bne.n	800b7a6 <I2SEx_RxISR_I2SExt+0x16>
 800b7a2:	4b20      	ldr	r3, [pc, #128]	; (800b824 <I2SEx_RxISR_I2SExt+0x94>)
 800b7a4:	e001      	b.n	800b7aa <I2SEx_RxISR_I2SExt+0x1a>
 800b7a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b7aa:	68d8      	ldr	r0, [r3, #12]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b0:	1c99      	adds	r1, r3, #2
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 800b7b6:	b282      	uxth	r2, r0
 800b7b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d121      	bne.n	800b816 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a12      	ldr	r2, [pc, #72]	; (800b820 <I2SEx_RxISR_I2SExt+0x90>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d101      	bne.n	800b7e0 <I2SEx_RxISR_I2SExt+0x50>
 800b7dc:	4b11      	ldr	r3, [pc, #68]	; (800b824 <I2SEx_RxISR_I2SExt+0x94>)
 800b7de:	e001      	b.n	800b7e4 <I2SEx_RxISR_I2SExt+0x54>
 800b7e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	490d      	ldr	r1, [pc, #52]	; (800b820 <I2SEx_RxISR_I2SExt+0x90>)
 800b7ec:	428b      	cmp	r3, r1
 800b7ee:	d101      	bne.n	800b7f4 <I2SEx_RxISR_I2SExt+0x64>
 800b7f0:	4b0c      	ldr	r3, [pc, #48]	; (800b824 <I2SEx_RxISR_I2SExt+0x94>)
 800b7f2:	e001      	b.n	800b7f8 <I2SEx_RxISR_I2SExt+0x68>
 800b7f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b7f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b7fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b802:	b29b      	uxth	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	d106      	bne.n	800b816 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff ff03 	bl	800b61c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	40003800 	.word	0x40003800
 800b824:	40003400 	.word	0x40003400

0800b828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e267      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d075      	beq.n	800b932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b846:	4b88      	ldr	r3, [pc, #544]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	f003 030c 	and.w	r3, r3, #12
 800b84e:	2b04      	cmp	r3, #4
 800b850:	d00c      	beq.n	800b86c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b852:	4b85      	ldr	r3, [pc, #532]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b85a:	2b08      	cmp	r3, #8
 800b85c:	d112      	bne.n	800b884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b85e:	4b82      	ldr	r3, [pc, #520]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b86a:	d10b      	bne.n	800b884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b86c:	4b7e      	ldr	r3, [pc, #504]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d05b      	beq.n	800b930 <HAL_RCC_OscConfig+0x108>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d157      	bne.n	800b930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e242      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b88c:	d106      	bne.n	800b89c <HAL_RCC_OscConfig+0x74>
 800b88e:	4b76      	ldr	r3, [pc, #472]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a75      	ldr	r2, [pc, #468]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	e01d      	b.n	800b8d8 <HAL_RCC_OscConfig+0xb0>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8a4:	d10c      	bne.n	800b8c0 <HAL_RCC_OscConfig+0x98>
 800b8a6:	4b70      	ldr	r3, [pc, #448]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a6f      	ldr	r2, [pc, #444]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b8ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	4b6d      	ldr	r3, [pc, #436]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a6c      	ldr	r2, [pc, #432]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b8b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	e00b      	b.n	800b8d8 <HAL_RCC_OscConfig+0xb0>
 800b8c0:	4b69      	ldr	r3, [pc, #420]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a68      	ldr	r2, [pc, #416]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b8c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8ca:	6013      	str	r3, [r2, #0]
 800b8cc:	4b66      	ldr	r3, [pc, #408]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a65      	ldr	r2, [pc, #404]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b8d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d013      	beq.n	800b908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8e0:	f7fd fad8 	bl	8008e94 <HAL_GetTick>
 800b8e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8e6:	e008      	b.n	800b8fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b8e8:	f7fd fad4 	bl	8008e94 <HAL_GetTick>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	2b64      	cmp	r3, #100	; 0x64
 800b8f4:	d901      	bls.n	800b8fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	e207      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8fa:	4b5b      	ldr	r3, [pc, #364]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0f0      	beq.n	800b8e8 <HAL_RCC_OscConfig+0xc0>
 800b906:	e014      	b.n	800b932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b908:	f7fd fac4 	bl	8008e94 <HAL_GetTick>
 800b90c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b90e:	e008      	b.n	800b922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b910:	f7fd fac0 	bl	8008e94 <HAL_GetTick>
 800b914:	4602      	mov	r2, r0
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	2b64      	cmp	r3, #100	; 0x64
 800b91c:	d901      	bls.n	800b922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b91e:	2303      	movs	r3, #3
 800b920:	e1f3      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b922:	4b51      	ldr	r3, [pc, #324]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1f0      	bne.n	800b910 <HAL_RCC_OscConfig+0xe8>
 800b92e:	e000      	b.n	800b932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 0302 	and.w	r3, r3, #2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d063      	beq.n	800ba06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b93e:	4b4a      	ldr	r3, [pc, #296]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	f003 030c 	and.w	r3, r3, #12
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00b      	beq.n	800b962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b94a:	4b47      	ldr	r3, [pc, #284]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b952:	2b08      	cmp	r3, #8
 800b954:	d11c      	bne.n	800b990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b956:	4b44      	ldr	r3, [pc, #272]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d116      	bne.n	800b990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b962:	4b41      	ldr	r3, [pc, #260]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0302 	and.w	r3, r3, #2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d005      	beq.n	800b97a <HAL_RCC_OscConfig+0x152>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d001      	beq.n	800b97a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e1c7      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b97a:	4b3b      	ldr	r3, [pc, #236]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	00db      	lsls	r3, r3, #3
 800b988:	4937      	ldr	r1, [pc, #220]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b98a:	4313      	orrs	r3, r2
 800b98c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b98e:	e03a      	b.n	800ba06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d020      	beq.n	800b9da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b998:	4b34      	ldr	r3, [pc, #208]	; (800ba6c <HAL_RCC_OscConfig+0x244>)
 800b99a:	2201      	movs	r2, #1
 800b99c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b99e:	f7fd fa79 	bl	8008e94 <HAL_GetTick>
 800b9a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9a4:	e008      	b.n	800b9b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b9a6:	f7fd fa75 	bl	8008e94 <HAL_GetTick>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d901      	bls.n	800b9b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e1a8      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9b8:	4b2b      	ldr	r3, [pc, #172]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0302 	and.w	r3, r3, #2
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d0f0      	beq.n	800b9a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9c4:	4b28      	ldr	r3, [pc, #160]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	4925      	ldr	r1, [pc, #148]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	600b      	str	r3, [r1, #0]
 800b9d8:	e015      	b.n	800ba06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b9da:	4b24      	ldr	r3, [pc, #144]	; (800ba6c <HAL_RCC_OscConfig+0x244>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9e0:	f7fd fa58 	bl	8008e94 <HAL_GetTick>
 800b9e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9e6:	e008      	b.n	800b9fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b9e8:	f7fd fa54 	bl	8008e94 <HAL_GetTick>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d901      	bls.n	800b9fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e187      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b9fa:	4b1b      	ldr	r3, [pc, #108]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 0302 	and.w	r3, r3, #2
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1f0      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 0308 	and.w	r3, r3, #8
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d036      	beq.n	800ba80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d016      	beq.n	800ba48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba1a:	4b15      	ldr	r3, [pc, #84]	; (800ba70 <HAL_RCC_OscConfig+0x248>)
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba20:	f7fd fa38 	bl	8008e94 <HAL_GetTick>
 800ba24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba26:	e008      	b.n	800ba3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ba28:	f7fd fa34 	bl	8008e94 <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d901      	bls.n	800ba3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e167      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba3a:	4b0b      	ldr	r3, [pc, #44]	; (800ba68 <HAL_RCC_OscConfig+0x240>)
 800ba3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba3e:	f003 0302 	and.w	r3, r3, #2
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0f0      	beq.n	800ba28 <HAL_RCC_OscConfig+0x200>
 800ba46:	e01b      	b.n	800ba80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba48:	4b09      	ldr	r3, [pc, #36]	; (800ba70 <HAL_RCC_OscConfig+0x248>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba4e:	f7fd fa21 	bl	8008e94 <HAL_GetTick>
 800ba52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba54:	e00e      	b.n	800ba74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ba56:	f7fd fa1d 	bl	8008e94 <HAL_GetTick>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d907      	bls.n	800ba74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ba64:	2303      	movs	r3, #3
 800ba66:	e150      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
 800ba68:	40023800 	.word	0x40023800
 800ba6c:	42470000 	.word	0x42470000
 800ba70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ba74:	4b88      	ldr	r3, [pc, #544]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800ba76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba78:	f003 0302 	and.w	r3, r3, #2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1ea      	bne.n	800ba56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0304 	and.w	r3, r3, #4
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 8097 	beq.w	800bbbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba92:	4b81      	ldr	r3, [pc, #516]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10f      	bne.n	800babe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60bb      	str	r3, [r7, #8]
 800baa2:	4b7d      	ldr	r3, [pc, #500]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800baa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa6:	4a7c      	ldr	r2, [pc, #496]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800baa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baac:	6413      	str	r3, [r2, #64]	; 0x40
 800baae:	4b7a      	ldr	r3, [pc, #488]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bab6:	60bb      	str	r3, [r7, #8]
 800bab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800baba:	2301      	movs	r3, #1
 800babc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800babe:	4b77      	ldr	r3, [pc, #476]	; (800bc9c <HAL_RCC_OscConfig+0x474>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d118      	bne.n	800bafc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800baca:	4b74      	ldr	r3, [pc, #464]	; (800bc9c <HAL_RCC_OscConfig+0x474>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a73      	ldr	r2, [pc, #460]	; (800bc9c <HAL_RCC_OscConfig+0x474>)
 800bad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bad6:	f7fd f9dd 	bl	8008e94 <HAL_GetTick>
 800bada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800badc:	e008      	b.n	800baf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bade:	f7fd f9d9 	bl	8008e94 <HAL_GetTick>
 800bae2:	4602      	mov	r2, r0
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	2b02      	cmp	r3, #2
 800baea:	d901      	bls.n	800baf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800baec:	2303      	movs	r3, #3
 800baee:	e10c      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800baf0:	4b6a      	ldr	r3, [pc, #424]	; (800bc9c <HAL_RCC_OscConfig+0x474>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d0f0      	beq.n	800bade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d106      	bne.n	800bb12 <HAL_RCC_OscConfig+0x2ea>
 800bb04:	4b64      	ldr	r3, [pc, #400]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb08:	4a63      	ldr	r2, [pc, #396]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb0a:	f043 0301 	orr.w	r3, r3, #1
 800bb0e:	6713      	str	r3, [r2, #112]	; 0x70
 800bb10:	e01c      	b.n	800bb4c <HAL_RCC_OscConfig+0x324>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	2b05      	cmp	r3, #5
 800bb18:	d10c      	bne.n	800bb34 <HAL_RCC_OscConfig+0x30c>
 800bb1a:	4b5f      	ldr	r3, [pc, #380]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb1e:	4a5e      	ldr	r2, [pc, #376]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb20:	f043 0304 	orr.w	r3, r3, #4
 800bb24:	6713      	str	r3, [r2, #112]	; 0x70
 800bb26:	4b5c      	ldr	r3, [pc, #368]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb2a:	4a5b      	ldr	r2, [pc, #364]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb2c:	f043 0301 	orr.w	r3, r3, #1
 800bb30:	6713      	str	r3, [r2, #112]	; 0x70
 800bb32:	e00b      	b.n	800bb4c <HAL_RCC_OscConfig+0x324>
 800bb34:	4b58      	ldr	r3, [pc, #352]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb38:	4a57      	ldr	r2, [pc, #348]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb3a:	f023 0301 	bic.w	r3, r3, #1
 800bb3e:	6713      	str	r3, [r2, #112]	; 0x70
 800bb40:	4b55      	ldr	r3, [pc, #340]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb44:	4a54      	ldr	r2, [pc, #336]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb46:	f023 0304 	bic.w	r3, r3, #4
 800bb4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d015      	beq.n	800bb80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb54:	f7fd f99e 	bl	8008e94 <HAL_GetTick>
 800bb58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb5a:	e00a      	b.n	800bb72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb5c:	f7fd f99a 	bl	8008e94 <HAL_GetTick>
 800bb60:	4602      	mov	r2, r0
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d901      	bls.n	800bb72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e0cb      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb72:	4b49      	ldr	r3, [pc, #292]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb76:	f003 0302 	and.w	r3, r3, #2
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0ee      	beq.n	800bb5c <HAL_RCC_OscConfig+0x334>
 800bb7e:	e014      	b.n	800bbaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb80:	f7fd f988 	bl	8008e94 <HAL_GetTick>
 800bb84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb86:	e00a      	b.n	800bb9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb88:	f7fd f984 	bl	8008e94 <HAL_GetTick>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d901      	bls.n	800bb9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e0b5      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb9e:	4b3e      	ldr	r3, [pc, #248]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba2:	f003 0302 	and.w	r3, r3, #2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1ee      	bne.n	800bb88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d105      	bne.n	800bbbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bbb0:	4b39      	ldr	r3, [pc, #228]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb4:	4a38      	ldr	r2, [pc, #224]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bbb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 80a1 	beq.w	800bd08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bbc6:	4b34      	ldr	r3, [pc, #208]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	f003 030c 	and.w	r3, r3, #12
 800bbce:	2b08      	cmp	r3, #8
 800bbd0:	d05c      	beq.n	800bc8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d141      	bne.n	800bc5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbda:	4b31      	ldr	r3, [pc, #196]	; (800bca0 <HAL_RCC_OscConfig+0x478>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbe0:	f7fd f958 	bl	8008e94 <HAL_GetTick>
 800bbe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbe6:	e008      	b.n	800bbfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbe8:	f7fd f954 	bl	8008e94 <HAL_GetTick>
 800bbec:	4602      	mov	r2, r0
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	d901      	bls.n	800bbfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	e087      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbfa:	4b27      	ldr	r3, [pc, #156]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1f0      	bne.n	800bbe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	69da      	ldr	r2, [r3, #28]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc14:	019b      	lsls	r3, r3, #6
 800bc16:	431a      	orrs	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1c:	085b      	lsrs	r3, r3, #1
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	041b      	lsls	r3, r3, #16
 800bc22:	431a      	orrs	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc28:	061b      	lsls	r3, r3, #24
 800bc2a:	491b      	ldr	r1, [pc, #108]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc30:	4b1b      	ldr	r3, [pc, #108]	; (800bca0 <HAL_RCC_OscConfig+0x478>)
 800bc32:	2201      	movs	r2, #1
 800bc34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc36:	f7fd f92d 	bl	8008e94 <HAL_GetTick>
 800bc3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc3c:	e008      	b.n	800bc50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc3e:	f7fd f929 	bl	8008e94 <HAL_GetTick>
 800bc42:	4602      	mov	r2, r0
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d901      	bls.n	800bc50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	e05c      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc50:	4b11      	ldr	r3, [pc, #68]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d0f0      	beq.n	800bc3e <HAL_RCC_OscConfig+0x416>
 800bc5c:	e054      	b.n	800bd08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc5e:	4b10      	ldr	r3, [pc, #64]	; (800bca0 <HAL_RCC_OscConfig+0x478>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc64:	f7fd f916 	bl	8008e94 <HAL_GetTick>
 800bc68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc6a:	e008      	b.n	800bc7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc6c:	f7fd f912 	bl	8008e94 <HAL_GetTick>
 800bc70:	4602      	mov	r2, r0
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d901      	bls.n	800bc7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	e045      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc7e:	4b06      	ldr	r3, [pc, #24]	; (800bc98 <HAL_RCC_OscConfig+0x470>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1f0      	bne.n	800bc6c <HAL_RCC_OscConfig+0x444>
 800bc8a:	e03d      	b.n	800bd08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d107      	bne.n	800bca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e038      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
 800bc98:	40023800 	.word	0x40023800
 800bc9c:	40007000 	.word	0x40007000
 800bca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bca4:	4b1b      	ldr	r3, [pc, #108]	; (800bd14 <HAL_RCC_OscConfig+0x4ec>)
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d028      	beq.n	800bd04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d121      	bne.n	800bd04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d11a      	bne.n	800bd04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bcda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d111      	bne.n	800bd04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcea:	085b      	lsrs	r3, r3, #1
 800bcec:	3b01      	subs	r3, #1
 800bcee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d107      	bne.n	800bd04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d001      	beq.n	800bd08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e000      	b.n	800bd0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3718      	adds	r7, #24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	40023800 	.word	0x40023800

0800bd18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e0cc      	b.n	800bec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bd2c:	4b68      	ldr	r3, [pc, #416]	; (800bed0 <HAL_RCC_ClockConfig+0x1b8>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 0307 	and.w	r3, r3, #7
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d90c      	bls.n	800bd54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd3a:	4b65      	ldr	r3, [pc, #404]	; (800bed0 <HAL_RCC_ClockConfig+0x1b8>)
 800bd3c:	683a      	ldr	r2, [r7, #0]
 800bd3e:	b2d2      	uxtb	r2, r2
 800bd40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd42:	4b63      	ldr	r3, [pc, #396]	; (800bed0 <HAL_RCC_ClockConfig+0x1b8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0307 	and.w	r3, r3, #7
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d001      	beq.n	800bd54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e0b8      	b.n	800bec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d020      	beq.n	800bda2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 0304 	and.w	r3, r3, #4
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d005      	beq.n	800bd78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd6c:	4b59      	ldr	r3, [pc, #356]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	4a58      	ldr	r2, [pc, #352]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bd72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bd76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 0308 	and.w	r3, r3, #8
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d005      	beq.n	800bd90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd84:	4b53      	ldr	r3, [pc, #332]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	4a52      	ldr	r2, [pc, #328]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bd8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bd8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd90:	4b50      	ldr	r3, [pc, #320]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	494d      	ldr	r1, [pc, #308]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d044      	beq.n	800be38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d107      	bne.n	800bdc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bdb6:	4b47      	ldr	r3, [pc, #284]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d119      	bne.n	800bdf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e07f      	b.n	800bec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d003      	beq.n	800bdd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d107      	bne.n	800bde6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdd6:	4b3f      	ldr	r3, [pc, #252]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d109      	bne.n	800bdf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e06f      	b.n	800bec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bde6:	4b3b      	ldr	r3, [pc, #236]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0302 	and.w	r3, r3, #2
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e067      	b.n	800bec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bdf6:	4b37      	ldr	r3, [pc, #220]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f023 0203 	bic.w	r2, r3, #3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	4934      	ldr	r1, [pc, #208]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800be04:	4313      	orrs	r3, r2
 800be06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800be08:	f7fd f844 	bl	8008e94 <HAL_GetTick>
 800be0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be0e:	e00a      	b.n	800be26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be10:	f7fd f840 	bl	8008e94 <HAL_GetTick>
 800be14:	4602      	mov	r2, r0
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800be1e:	4293      	cmp	r3, r2
 800be20:	d901      	bls.n	800be26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e04f      	b.n	800bec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be26:	4b2b      	ldr	r3, [pc, #172]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	f003 020c 	and.w	r2, r3, #12
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	429a      	cmp	r2, r3
 800be36:	d1eb      	bne.n	800be10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800be38:	4b25      	ldr	r3, [pc, #148]	; (800bed0 <HAL_RCC_ClockConfig+0x1b8>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f003 0307 	and.w	r3, r3, #7
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	429a      	cmp	r2, r3
 800be44:	d20c      	bcs.n	800be60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be46:	4b22      	ldr	r3, [pc, #136]	; (800bed0 <HAL_RCC_ClockConfig+0x1b8>)
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	b2d2      	uxtb	r2, r2
 800be4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be4e:	4b20      	ldr	r3, [pc, #128]	; (800bed0 <HAL_RCC_ClockConfig+0x1b8>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f003 0307 	and.w	r3, r3, #7
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d001      	beq.n	800be60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e032      	b.n	800bec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d008      	beq.n	800be7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be6c:	4b19      	ldr	r3, [pc, #100]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	4916      	ldr	r1, [pc, #88]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800be7a:	4313      	orrs	r3, r2
 800be7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0308 	and.w	r3, r3, #8
 800be86:	2b00      	cmp	r3, #0
 800be88:	d009      	beq.n	800be9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800be8a:	4b12      	ldr	r3, [pc, #72]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	490e      	ldr	r1, [pc, #56]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800be9a:	4313      	orrs	r3, r2
 800be9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800be9e:	f000 f821 	bl	800bee4 <HAL_RCC_GetSysClockFreq>
 800bea2:	4602      	mov	r2, r0
 800bea4:	4b0b      	ldr	r3, [pc, #44]	; (800bed4 <HAL_RCC_ClockConfig+0x1bc>)
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	091b      	lsrs	r3, r3, #4
 800beaa:	f003 030f 	and.w	r3, r3, #15
 800beae:	490a      	ldr	r1, [pc, #40]	; (800bed8 <HAL_RCC_ClockConfig+0x1c0>)
 800beb0:	5ccb      	ldrb	r3, [r1, r3]
 800beb2:	fa22 f303 	lsr.w	r3, r2, r3
 800beb6:	4a09      	ldr	r2, [pc, #36]	; (800bedc <HAL_RCC_ClockConfig+0x1c4>)
 800beb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800beba:	4b09      	ldr	r3, [pc, #36]	; (800bee0 <HAL_RCC_ClockConfig+0x1c8>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fc ffa4 	bl	8008e0c <HAL_InitTick>

  return HAL_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	40023c00 	.word	0x40023c00
 800bed4:	40023800 	.word	0x40023800
 800bed8:	0800f4b4 	.word	0x0800f4b4
 800bedc:	20000010 	.word	0x20000010
 800bee0:	20000014 	.word	0x20000014

0800bee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bee8:	b094      	sub	sp, #80	; 0x50
 800beea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	647b      	str	r3, [r7, #68]	; 0x44
 800bef0:	2300      	movs	r3, #0
 800bef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bef4:	2300      	movs	r3, #0
 800bef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800befc:	4b79      	ldr	r3, [pc, #484]	; (800c0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	f003 030c 	and.w	r3, r3, #12
 800bf04:	2b08      	cmp	r3, #8
 800bf06:	d00d      	beq.n	800bf24 <HAL_RCC_GetSysClockFreq+0x40>
 800bf08:	2b08      	cmp	r3, #8
 800bf0a:	f200 80e1 	bhi.w	800c0d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <HAL_RCC_GetSysClockFreq+0x34>
 800bf12:	2b04      	cmp	r3, #4
 800bf14:	d003      	beq.n	800bf1e <HAL_RCC_GetSysClockFreq+0x3a>
 800bf16:	e0db      	b.n	800c0d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bf18:	4b73      	ldr	r3, [pc, #460]	; (800c0e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800bf1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800bf1c:	e0db      	b.n	800c0d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bf1e:	4b73      	ldr	r3, [pc, #460]	; (800c0ec <HAL_RCC_GetSysClockFreq+0x208>)
 800bf20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800bf22:	e0d8      	b.n	800c0d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bf24:	4b6f      	ldr	r3, [pc, #444]	; (800c0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bf2e:	4b6d      	ldr	r3, [pc, #436]	; (800c0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d063      	beq.n	800c002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf3a:	4b6a      	ldr	r3, [pc, #424]	; (800c0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	099b      	lsrs	r3, r3, #6
 800bf40:	2200      	movs	r2, #0
 800bf42:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf44:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf4c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf4e:	2300      	movs	r3, #0
 800bf50:	637b      	str	r3, [r7, #52]	; 0x34
 800bf52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bf56:	4622      	mov	r2, r4
 800bf58:	462b      	mov	r3, r5
 800bf5a:	f04f 0000 	mov.w	r0, #0
 800bf5e:	f04f 0100 	mov.w	r1, #0
 800bf62:	0159      	lsls	r1, r3, #5
 800bf64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf68:	0150      	lsls	r0, r2, #5
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4621      	mov	r1, r4
 800bf70:	1a51      	subs	r1, r2, r1
 800bf72:	6139      	str	r1, [r7, #16]
 800bf74:	4629      	mov	r1, r5
 800bf76:	eb63 0301 	sbc.w	r3, r3, r1
 800bf7a:	617b      	str	r3, [r7, #20]
 800bf7c:	f04f 0200 	mov.w	r2, #0
 800bf80:	f04f 0300 	mov.w	r3, #0
 800bf84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf88:	4659      	mov	r1, fp
 800bf8a:	018b      	lsls	r3, r1, #6
 800bf8c:	4651      	mov	r1, sl
 800bf8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bf92:	4651      	mov	r1, sl
 800bf94:	018a      	lsls	r2, r1, #6
 800bf96:	4651      	mov	r1, sl
 800bf98:	ebb2 0801 	subs.w	r8, r2, r1
 800bf9c:	4659      	mov	r1, fp
 800bf9e:	eb63 0901 	sbc.w	r9, r3, r1
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	f04f 0300 	mov.w	r3, #0
 800bfaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bfae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bfb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bfb6:	4690      	mov	r8, r2
 800bfb8:	4699      	mov	r9, r3
 800bfba:	4623      	mov	r3, r4
 800bfbc:	eb18 0303 	adds.w	r3, r8, r3
 800bfc0:	60bb      	str	r3, [r7, #8]
 800bfc2:	462b      	mov	r3, r5
 800bfc4:	eb49 0303 	adc.w	r3, r9, r3
 800bfc8:	60fb      	str	r3, [r7, #12]
 800bfca:	f04f 0200 	mov.w	r2, #0
 800bfce:	f04f 0300 	mov.w	r3, #0
 800bfd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	024b      	lsls	r3, r1, #9
 800bfda:	4621      	mov	r1, r4
 800bfdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	024a      	lsls	r2, r1, #9
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfea:	2200      	movs	r2, #0
 800bfec:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bff4:	f7fc f8e8 	bl	80081c8 <__aeabi_uldivmod>
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	4613      	mov	r3, r2
 800bffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c000:	e058      	b.n	800c0b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c002:	4b38      	ldr	r3, [pc, #224]	; (800c0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	099b      	lsrs	r3, r3, #6
 800c008:	2200      	movs	r2, #0
 800c00a:	4618      	mov	r0, r3
 800c00c:	4611      	mov	r1, r2
 800c00e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c012:	623b      	str	r3, [r7, #32]
 800c014:	2300      	movs	r3, #0
 800c016:	627b      	str	r3, [r7, #36]	; 0x24
 800c018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c01c:	4642      	mov	r2, r8
 800c01e:	464b      	mov	r3, r9
 800c020:	f04f 0000 	mov.w	r0, #0
 800c024:	f04f 0100 	mov.w	r1, #0
 800c028:	0159      	lsls	r1, r3, #5
 800c02a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c02e:	0150      	lsls	r0, r2, #5
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	4641      	mov	r1, r8
 800c036:	ebb2 0a01 	subs.w	sl, r2, r1
 800c03a:	4649      	mov	r1, r9
 800c03c:	eb63 0b01 	sbc.w	fp, r3, r1
 800c040:	f04f 0200 	mov.w	r2, #0
 800c044:	f04f 0300 	mov.w	r3, #0
 800c048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c04c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c054:	ebb2 040a 	subs.w	r4, r2, sl
 800c058:	eb63 050b 	sbc.w	r5, r3, fp
 800c05c:	f04f 0200 	mov.w	r2, #0
 800c060:	f04f 0300 	mov.w	r3, #0
 800c064:	00eb      	lsls	r3, r5, #3
 800c066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c06a:	00e2      	lsls	r2, r4, #3
 800c06c:	4614      	mov	r4, r2
 800c06e:	461d      	mov	r5, r3
 800c070:	4643      	mov	r3, r8
 800c072:	18e3      	adds	r3, r4, r3
 800c074:	603b      	str	r3, [r7, #0]
 800c076:	464b      	mov	r3, r9
 800c078:	eb45 0303 	adc.w	r3, r5, r3
 800c07c:	607b      	str	r3, [r7, #4]
 800c07e:	f04f 0200 	mov.w	r2, #0
 800c082:	f04f 0300 	mov.w	r3, #0
 800c086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c08a:	4629      	mov	r1, r5
 800c08c:	028b      	lsls	r3, r1, #10
 800c08e:	4621      	mov	r1, r4
 800c090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c094:	4621      	mov	r1, r4
 800c096:	028a      	lsls	r2, r1, #10
 800c098:	4610      	mov	r0, r2
 800c09a:	4619      	mov	r1, r3
 800c09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c09e:	2200      	movs	r2, #0
 800c0a0:	61bb      	str	r3, [r7, #24]
 800c0a2:	61fa      	str	r2, [r7, #28]
 800c0a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c0a8:	f7fc f88e 	bl	80081c8 <__aeabi_uldivmod>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c0b4:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	0c1b      	lsrs	r3, r3, #16
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	3301      	adds	r3, #1
 800c0c0:	005b      	lsls	r3, r3, #1
 800c0c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800c0c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c0ce:	e002      	b.n	800c0d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c0d0:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800c0d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c0d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c0d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3750      	adds	r7, #80	; 0x50
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0e2:	bf00      	nop
 800c0e4:	40023800 	.word	0x40023800
 800c0e8:	00f42400 	.word	0x00f42400
 800c0ec:	007a1200 	.word	0x007a1200

0800c0f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0f4:	4b03      	ldr	r3, [pc, #12]	; (800c104 <HAL_RCC_GetHCLKFreq+0x14>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	20000010 	.word	0x20000010

0800c108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c10c:	f7ff fff0 	bl	800c0f0 <HAL_RCC_GetHCLKFreq>
 800c110:	4602      	mov	r2, r0
 800c112:	4b05      	ldr	r3, [pc, #20]	; (800c128 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	0a9b      	lsrs	r3, r3, #10
 800c118:	f003 0307 	and.w	r3, r3, #7
 800c11c:	4903      	ldr	r1, [pc, #12]	; (800c12c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c11e:	5ccb      	ldrb	r3, [r1, r3]
 800c120:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c124:	4618      	mov	r0, r3
 800c126:	bd80      	pop	{r7, pc}
 800c128:	40023800 	.word	0x40023800
 800c12c:	0800f4c4 	.word	0x0800f4c4

0800c130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c134:	f7ff ffdc 	bl	800c0f0 <HAL_RCC_GetHCLKFreq>
 800c138:	4602      	mov	r2, r0
 800c13a:	4b05      	ldr	r3, [pc, #20]	; (800c150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	0b5b      	lsrs	r3, r3, #13
 800c140:	f003 0307 	and.w	r3, r3, #7
 800c144:	4903      	ldr	r1, [pc, #12]	; (800c154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c146:	5ccb      	ldrb	r3, [r1, r3]
 800c148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	40023800 	.word	0x40023800
 800c154:	0800f4c4 	.word	0x0800f4c4

0800c158 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c160:	2300      	movs	r3, #0
 800c162:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c164:	2300      	movs	r3, #0
 800c166:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f003 0301 	and.w	r3, r3, #1
 800c170:	2b00      	cmp	r3, #0
 800c172:	d105      	bne.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d035      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c180:	4b62      	ldr	r3, [pc, #392]	; (800c30c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c186:	f7fc fe85 	bl	8008e94 <HAL_GetTick>
 800c18a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c18c:	e008      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c18e:	f7fc fe81 	bl	8008e94 <HAL_GetTick>
 800c192:	4602      	mov	r2, r0
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d901      	bls.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c19c:	2303      	movs	r3, #3
 800c19e:	e0b0      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c1a0:	4b5b      	ldr	r3, [pc, #364]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1f0      	bne.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	019a      	lsls	r2, r3, #6
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	071b      	lsls	r3, r3, #28
 800c1b8:	4955      	ldr	r1, [pc, #340]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c1c0:	4b52      	ldr	r3, [pc, #328]	; (800c30c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c1c6:	f7fc fe65 	bl	8008e94 <HAL_GetTick>
 800c1ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c1cc:	e008      	b.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c1ce:	f7fc fe61 	bl	8008e94 <HAL_GetTick>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	d901      	bls.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	e090      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c1e0:	4b4b      	ldr	r3, [pc, #300]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d0f0      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0302 	and.w	r3, r3, #2
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 8083 	beq.w	800c300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	4b44      	ldr	r3, [pc, #272]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c202:	4a43      	ldr	r2, [pc, #268]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c208:	6413      	str	r3, [r2, #64]	; 0x40
 800c20a:	4b41      	ldr	r3, [pc, #260]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c216:	4b3f      	ldr	r3, [pc, #252]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a3e      	ldr	r2, [pc, #248]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c21c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c220:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c222:	f7fc fe37 	bl	8008e94 <HAL_GetTick>
 800c226:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c228:	e008      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c22a:	f7fc fe33 	bl	8008e94 <HAL_GetTick>
 800c22e:	4602      	mov	r2, r0
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	2b02      	cmp	r3, #2
 800c236:	d901      	bls.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	e062      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c23c:	4b35      	ldr	r3, [pc, #212]	; (800c314 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c244:	2b00      	cmp	r3, #0
 800c246:	d0f0      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c248:	4b31      	ldr	r3, [pc, #196]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c24c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c250:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d02f      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	429a      	cmp	r2, r3
 800c264:	d028      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c266:	4b2a      	ldr	r3, [pc, #168]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c26a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c26e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c270:	4b29      	ldr	r3, [pc, #164]	; (800c318 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c272:	2201      	movs	r2, #1
 800c274:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c276:	4b28      	ldr	r3, [pc, #160]	; (800c318 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c278:	2200      	movs	r2, #0
 800c27a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c27c:	4a24      	ldr	r2, [pc, #144]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c282:	4b23      	ldr	r3, [pc, #140]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d114      	bne.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c28e:	f7fc fe01 	bl	8008e94 <HAL_GetTick>
 800c292:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c294:	e00a      	b.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c296:	f7fc fdfd 	bl	8008e94 <HAL_GetTick>
 800c29a:	4602      	mov	r2, r0
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d901      	bls.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e02a      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c2ac:	4b18      	ldr	r3, [pc, #96]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2b0:	f003 0302 	and.w	r3, r3, #2
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0ee      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c2c4:	d10d      	bne.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c2c6:	4b12      	ldr	r3, [pc, #72]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c2d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2da:	490d      	ldr	r1, [pc, #52]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	608b      	str	r3, [r1, #8]
 800c2e0:	e005      	b.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c2e2:	4b0b      	ldr	r3, [pc, #44]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	4a0a      	ldr	r2, [pc, #40]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c2e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c2ec:	6093      	str	r3, [r2, #8]
 800c2ee:	4b08      	ldr	r3, [pc, #32]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c2f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2fa:	4905      	ldr	r1, [pc, #20]	; (800c310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	42470068 	.word	0x42470068
 800c310:	40023800 	.word	0x40023800
 800c314:	40007000 	.word	0x40007000
 800c318:	42470e40 	.word	0x42470e40

0800c31c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800c324:	2300      	movs	r3, #0
 800c326:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800c32c:	2300      	movs	r3, #0
 800c32e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800c330:	2300      	movs	r3, #0
 800c332:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d13e      	bne.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800c33a:	4b23      	ldr	r3, [pc, #140]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d005      	beq.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d12f      	bne.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800c350:	4b1e      	ldr	r3, [pc, #120]	; (800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c352:	617b      	str	r3, [r7, #20]
          break;
 800c354:	e02f      	b.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800c356:	4b1c      	ldr	r3, [pc, #112]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c35e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c362:	d108      	bne.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c364:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c36c:	4a18      	ldr	r2, [pc, #96]	; (800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800c36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c372:	613b      	str	r3, [r7, #16]
 800c374:	e007      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c376:	4b14      	ldr	r3, [pc, #80]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c37e:	4a15      	ldr	r2, [pc, #84]	; (800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800c380:	fbb2 f3f3 	udiv	r3, r2, r3
 800c384:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800c386:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c38c:	099b      	lsrs	r3, r3, #6
 800c38e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	fb02 f303 	mul.w	r3, r2, r3
 800c398:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800c39a:	4b0b      	ldr	r3, [pc, #44]	; (800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800c39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3a0:	0f1b      	lsrs	r3, r3, #28
 800c3a2:	f003 0307 	and.w	r3, r3, #7
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ac:	617b      	str	r3, [r7, #20]
          break;
 800c3ae:	e002      	b.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	617b      	str	r3, [r7, #20]
          break;
 800c3b4:	bf00      	nop
        }
      }
      break;
 800c3b6:	bf00      	nop
    }
  }
  return frequency;
 800c3b8:	697b      	ldr	r3, [r7, #20]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	371c      	adds	r7, #28
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	40023800 	.word	0x40023800
 800c3cc:	00bb8000 	.word	0x00bb8000
 800c3d0:	007a1200 	.word	0x007a1200
 800c3d4:	00f42400 	.word	0x00f42400

0800c3d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d101      	bne.n	800c3ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e07b      	b.n	800c4e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d108      	bne.n	800c404 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3fa:	d009      	beq.n	800c410 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	61da      	str	r2, [r3, #28]
 800c402:	e005      	b.n	800c410 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d106      	bne.n	800c430 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7fc fb92 	bl	8008b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2202      	movs	r2, #2
 800c434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c446:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c458:	431a      	orrs	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c462:	431a      	orrs	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	f003 0302 	and.w	r3, r3, #2
 800c46c:	431a      	orrs	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	431a      	orrs	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c480:	431a      	orrs	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	69db      	ldr	r3, [r3, #28]
 800c486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c48a:	431a      	orrs	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c494:	ea42 0103 	orr.w	r1, r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	430a      	orrs	r2, r1
 800c4a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	0c1b      	lsrs	r3, r3, #16
 800c4ae:	f003 0104 	and.w	r1, r3, #4
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b6:	f003 0210 	and.w	r2, r3, #16
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	430a      	orrs	r2, r1
 800c4c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	69da      	ldr	r2, [r3, #28]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b082      	sub	sp, #8
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d101      	bne.n	800c4fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e03f      	b.n	800c57c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7fc fb67 	bl	8008be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2224      	movs	r2, #36	; 0x24
 800c51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	68da      	ldr	r2, [r3, #12]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c52c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f928 	bl	800c784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	691a      	ldr	r2, [r3, #16]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c542:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	695a      	ldr	r2, [r3, #20]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c552:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68da      	ldr	r2, [r3, #12]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c562:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2220      	movs	r2, #32
 800c56e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2220      	movs	r2, #32
 800c576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b08a      	sub	sp, #40	; 0x28
 800c588:	af02      	add	r7, sp, #8
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	603b      	str	r3, [r7, #0]
 800c590:	4613      	mov	r3, r2
 800c592:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c594:	2300      	movs	r3, #0
 800c596:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b20      	cmp	r3, #32
 800c5a2:	d17c      	bne.n	800c69e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d002      	beq.n	800c5b0 <HAL_UART_Transmit+0x2c>
 800c5aa:	88fb      	ldrh	r3, [r7, #6]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e075      	b.n	800c6a0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d101      	bne.n	800c5c2 <HAL_UART_Transmit+0x3e>
 800c5be:	2302      	movs	r3, #2
 800c5c0:	e06e      	b.n	800c6a0 <HAL_UART_Transmit+0x11c>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2221      	movs	r2, #33	; 0x21
 800c5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5d8:	f7fc fc5c 	bl	8008e94 <HAL_GetTick>
 800c5dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	88fa      	ldrh	r2, [r7, #6]
 800c5e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	88fa      	ldrh	r2, [r7, #6]
 800c5e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5f2:	d108      	bne.n	800c606 <HAL_UART_Transmit+0x82>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d104      	bne.n	800c606 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	61bb      	str	r3, [r7, #24]
 800c604:	e003      	b.n	800c60e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c60a:	2300      	movs	r3, #0
 800c60c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c616:	e02a      	b.n	800c66e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	2200      	movs	r2, #0
 800c620:	2180      	movs	r1, #128	; 0x80
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 f840 	bl	800c6a8 <UART_WaitOnFlagUntilTimeout>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c62e:	2303      	movs	r3, #3
 800c630:	e036      	b.n	800c6a0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10b      	bne.n	800c650 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	881b      	ldrh	r3, [r3, #0]
 800c63c:	461a      	mov	r2, r3
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c646:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	3302      	adds	r3, #2
 800c64c:	61bb      	str	r3, [r7, #24]
 800c64e:	e007      	b.n	800c660 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	781a      	ldrb	r2, [r3, #0]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	3301      	adds	r3, #1
 800c65e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c664:	b29b      	uxth	r3, r3
 800c666:	3b01      	subs	r3, #1
 800c668:	b29a      	uxth	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c672:	b29b      	uxth	r3, r3
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1cf      	bne.n	800c618 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2200      	movs	r2, #0
 800c680:	2140      	movs	r1, #64	; 0x40
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f000 f810 	bl	800c6a8 <UART_WaitOnFlagUntilTimeout>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d001      	beq.n	800c692 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	e006      	b.n	800c6a0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2220      	movs	r2, #32
 800c696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	e000      	b.n	800c6a0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c69e:	2302      	movs	r3, #2
  }
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3720      	adds	r7, #32
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b090      	sub	sp, #64	; 0x40
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	603b      	str	r3, [r7, #0]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6b8:	e050      	b.n	800c75c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c0:	d04c      	beq.n	800c75c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d007      	beq.n	800c6d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c6c8:	f7fc fbe4 	bl	8008e94 <HAL_GetTick>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d241      	bcs.n	800c75c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	330c      	adds	r3, #12
 800c6de:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	e853 3f00 	ldrex	r3, [r3]
 800c6e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	330c      	adds	r3, #12
 800c6f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c6f8:	637a      	str	r2, [r7, #52]	; 0x34
 800c6fa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c700:	e841 2300 	strex	r3, r2, [r1]
 800c704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1e5      	bne.n	800c6d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3314      	adds	r3, #20
 800c712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	e853 3f00 	ldrex	r3, [r3]
 800c71a:	613b      	str	r3, [r7, #16]
   return(result);
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	f023 0301 	bic.w	r3, r3, #1
 800c722:	63bb      	str	r3, [r7, #56]	; 0x38
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3314      	adds	r3, #20
 800c72a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c72c:	623a      	str	r2, [r7, #32]
 800c72e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	69f9      	ldr	r1, [r7, #28]
 800c732:	6a3a      	ldr	r2, [r7, #32]
 800c734:	e841 2300 	strex	r3, r2, [r1]
 800c738:	61bb      	str	r3, [r7, #24]
   return(result);
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e5      	bne.n	800c70c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2220      	movs	r2, #32
 800c744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2220      	movs	r2, #32
 800c74c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c758:	2303      	movs	r3, #3
 800c75a:	e00f      	b.n	800c77c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	4013      	ands	r3, r2
 800c766:	68ba      	ldr	r2, [r7, #8]
 800c768:	429a      	cmp	r2, r3
 800c76a:	bf0c      	ite	eq
 800c76c:	2301      	moveq	r3, #1
 800c76e:	2300      	movne	r3, #0
 800c770:	b2db      	uxtb	r3, r3
 800c772:	461a      	mov	r2, r3
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	429a      	cmp	r2, r3
 800c778:	d09f      	beq.n	800c6ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3740      	adds	r7, #64	; 0x40
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c788:	b0c0      	sub	sp, #256	; 0x100
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c79c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7a0:	68d9      	ldr	r1, [r3, #12]
 800c7a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	ea40 0301 	orr.w	r3, r0, r1
 800c7ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c7ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7b2:	689a      	ldr	r2, [r3, #8]
 800c7b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	431a      	orrs	r2, r3
 800c7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	431a      	orrs	r2, r3
 800c7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7c8:	69db      	ldr	r3, [r3, #28]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c7dc:	f021 010c 	bic.w	r1, r1, #12
 800c7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c7ea:	430b      	orrs	r3, r1
 800c7ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c7ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c7fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7fe:	6999      	ldr	r1, [r3, #24]
 800c800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	ea40 0301 	orr.w	r3, r0, r1
 800c80a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	4b8f      	ldr	r3, [pc, #572]	; (800ca50 <UART_SetConfig+0x2cc>)
 800c814:	429a      	cmp	r2, r3
 800c816:	d005      	beq.n	800c824 <UART_SetConfig+0xa0>
 800c818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	4b8d      	ldr	r3, [pc, #564]	; (800ca54 <UART_SetConfig+0x2d0>)
 800c820:	429a      	cmp	r2, r3
 800c822:	d104      	bne.n	800c82e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c824:	f7ff fc84 	bl	800c130 <HAL_RCC_GetPCLK2Freq>
 800c828:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c82c:	e003      	b.n	800c836 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c82e:	f7ff fc6b 	bl	800c108 <HAL_RCC_GetPCLK1Freq>
 800c832:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c840:	f040 810c 	bne.w	800ca5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c848:	2200      	movs	r2, #0
 800c84a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c84e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c852:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c856:	4622      	mov	r2, r4
 800c858:	462b      	mov	r3, r5
 800c85a:	1891      	adds	r1, r2, r2
 800c85c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c85e:	415b      	adcs	r3, r3
 800c860:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c862:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c866:	4621      	mov	r1, r4
 800c868:	eb12 0801 	adds.w	r8, r2, r1
 800c86c:	4629      	mov	r1, r5
 800c86e:	eb43 0901 	adc.w	r9, r3, r1
 800c872:	f04f 0200 	mov.w	r2, #0
 800c876:	f04f 0300 	mov.w	r3, #0
 800c87a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c87e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c886:	4690      	mov	r8, r2
 800c888:	4699      	mov	r9, r3
 800c88a:	4623      	mov	r3, r4
 800c88c:	eb18 0303 	adds.w	r3, r8, r3
 800c890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c894:	462b      	mov	r3, r5
 800c896:	eb49 0303 	adc.w	r3, r9, r3
 800c89a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c89e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c8ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	18db      	adds	r3, r3, r3
 800c8b6:	653b      	str	r3, [r7, #80]	; 0x50
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	eb42 0303 	adc.w	r3, r2, r3
 800c8be:	657b      	str	r3, [r7, #84]	; 0x54
 800c8c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c8c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c8c8:	f7fb fc7e 	bl	80081c8 <__aeabi_uldivmod>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4b61      	ldr	r3, [pc, #388]	; (800ca58 <UART_SetConfig+0x2d4>)
 800c8d2:	fba3 2302 	umull	r2, r3, r3, r2
 800c8d6:	095b      	lsrs	r3, r3, #5
 800c8d8:	011c      	lsls	r4, r3, #4
 800c8da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c8e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c8ec:	4642      	mov	r2, r8
 800c8ee:	464b      	mov	r3, r9
 800c8f0:	1891      	adds	r1, r2, r2
 800c8f2:	64b9      	str	r1, [r7, #72]	; 0x48
 800c8f4:	415b      	adcs	r3, r3
 800c8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c8fc:	4641      	mov	r1, r8
 800c8fe:	eb12 0a01 	adds.w	sl, r2, r1
 800c902:	4649      	mov	r1, r9
 800c904:	eb43 0b01 	adc.w	fp, r3, r1
 800c908:	f04f 0200 	mov.w	r2, #0
 800c90c:	f04f 0300 	mov.w	r3, #0
 800c910:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c914:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c91c:	4692      	mov	sl, r2
 800c91e:	469b      	mov	fp, r3
 800c920:	4643      	mov	r3, r8
 800c922:	eb1a 0303 	adds.w	r3, sl, r3
 800c926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c92a:	464b      	mov	r3, r9
 800c92c:	eb4b 0303 	adc.w	r3, fp, r3
 800c930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c940:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c944:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c948:	460b      	mov	r3, r1
 800c94a:	18db      	adds	r3, r3, r3
 800c94c:	643b      	str	r3, [r7, #64]	; 0x40
 800c94e:	4613      	mov	r3, r2
 800c950:	eb42 0303 	adc.w	r3, r2, r3
 800c954:	647b      	str	r3, [r7, #68]	; 0x44
 800c956:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c95a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c95e:	f7fb fc33 	bl	80081c8 <__aeabi_uldivmod>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4611      	mov	r1, r2
 800c968:	4b3b      	ldr	r3, [pc, #236]	; (800ca58 <UART_SetConfig+0x2d4>)
 800c96a:	fba3 2301 	umull	r2, r3, r3, r1
 800c96e:	095b      	lsrs	r3, r3, #5
 800c970:	2264      	movs	r2, #100	; 0x64
 800c972:	fb02 f303 	mul.w	r3, r2, r3
 800c976:	1acb      	subs	r3, r1, r3
 800c978:	00db      	lsls	r3, r3, #3
 800c97a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c97e:	4b36      	ldr	r3, [pc, #216]	; (800ca58 <UART_SetConfig+0x2d4>)
 800c980:	fba3 2302 	umull	r2, r3, r3, r2
 800c984:	095b      	lsrs	r3, r3, #5
 800c986:	005b      	lsls	r3, r3, #1
 800c988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c98c:	441c      	add	r4, r3
 800c98e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c992:	2200      	movs	r2, #0
 800c994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c998:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c99c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c9a0:	4642      	mov	r2, r8
 800c9a2:	464b      	mov	r3, r9
 800c9a4:	1891      	adds	r1, r2, r2
 800c9a6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c9a8:	415b      	adcs	r3, r3
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c9b0:	4641      	mov	r1, r8
 800c9b2:	1851      	adds	r1, r2, r1
 800c9b4:	6339      	str	r1, [r7, #48]	; 0x30
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	414b      	adcs	r3, r1
 800c9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c9bc:	f04f 0200 	mov.w	r2, #0
 800c9c0:	f04f 0300 	mov.w	r3, #0
 800c9c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c9c8:	4659      	mov	r1, fp
 800c9ca:	00cb      	lsls	r3, r1, #3
 800c9cc:	4651      	mov	r1, sl
 800c9ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9d2:	4651      	mov	r1, sl
 800c9d4:	00ca      	lsls	r2, r1, #3
 800c9d6:	4610      	mov	r0, r2
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4603      	mov	r3, r0
 800c9dc:	4642      	mov	r2, r8
 800c9de:	189b      	adds	r3, r3, r2
 800c9e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c9e4:	464b      	mov	r3, r9
 800c9e6:	460a      	mov	r2, r1
 800c9e8:	eb42 0303 	adc.w	r3, r2, r3
 800c9ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c9fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ca00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ca04:	460b      	mov	r3, r1
 800ca06:	18db      	adds	r3, r3, r3
 800ca08:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	eb42 0303 	adc.w	r3, r2, r3
 800ca10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ca16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ca1a:	f7fb fbd5 	bl	80081c8 <__aeabi_uldivmod>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	4b0d      	ldr	r3, [pc, #52]	; (800ca58 <UART_SetConfig+0x2d4>)
 800ca24:	fba3 1302 	umull	r1, r3, r3, r2
 800ca28:	095b      	lsrs	r3, r3, #5
 800ca2a:	2164      	movs	r1, #100	; 0x64
 800ca2c:	fb01 f303 	mul.w	r3, r1, r3
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	00db      	lsls	r3, r3, #3
 800ca34:	3332      	adds	r3, #50	; 0x32
 800ca36:	4a08      	ldr	r2, [pc, #32]	; (800ca58 <UART_SetConfig+0x2d4>)
 800ca38:	fba2 2303 	umull	r2, r3, r2, r3
 800ca3c:	095b      	lsrs	r3, r3, #5
 800ca3e:	f003 0207 	and.w	r2, r3, #7
 800ca42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4422      	add	r2, r4
 800ca4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ca4c:	e106      	b.n	800cc5c <UART_SetConfig+0x4d8>
 800ca4e:	bf00      	nop
 800ca50:	40011000 	.word	0x40011000
 800ca54:	40011400 	.word	0x40011400
 800ca58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca60:	2200      	movs	r2, #0
 800ca62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ca66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ca6e:	4642      	mov	r2, r8
 800ca70:	464b      	mov	r3, r9
 800ca72:	1891      	adds	r1, r2, r2
 800ca74:	6239      	str	r1, [r7, #32]
 800ca76:	415b      	adcs	r3, r3
 800ca78:	627b      	str	r3, [r7, #36]	; 0x24
 800ca7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca7e:	4641      	mov	r1, r8
 800ca80:	1854      	adds	r4, r2, r1
 800ca82:	4649      	mov	r1, r9
 800ca84:	eb43 0501 	adc.w	r5, r3, r1
 800ca88:	f04f 0200 	mov.w	r2, #0
 800ca8c:	f04f 0300 	mov.w	r3, #0
 800ca90:	00eb      	lsls	r3, r5, #3
 800ca92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca96:	00e2      	lsls	r2, r4, #3
 800ca98:	4614      	mov	r4, r2
 800ca9a:	461d      	mov	r5, r3
 800ca9c:	4643      	mov	r3, r8
 800ca9e:	18e3      	adds	r3, r4, r3
 800caa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800caa4:	464b      	mov	r3, r9
 800caa6:	eb45 0303 	adc.w	r3, r5, r3
 800caaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800caae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800caba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cabe:	f04f 0200 	mov.w	r2, #0
 800cac2:	f04f 0300 	mov.w	r3, #0
 800cac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800caca:	4629      	mov	r1, r5
 800cacc:	008b      	lsls	r3, r1, #2
 800cace:	4621      	mov	r1, r4
 800cad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cad4:	4621      	mov	r1, r4
 800cad6:	008a      	lsls	r2, r1, #2
 800cad8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cadc:	f7fb fb74 	bl	80081c8 <__aeabi_uldivmod>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4b60      	ldr	r3, [pc, #384]	; (800cc68 <UART_SetConfig+0x4e4>)
 800cae6:	fba3 2302 	umull	r2, r3, r3, r2
 800caea:	095b      	lsrs	r3, r3, #5
 800caec:	011c      	lsls	r4, r3, #4
 800caee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caf2:	2200      	movs	r2, #0
 800caf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800caf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cafc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cb00:	4642      	mov	r2, r8
 800cb02:	464b      	mov	r3, r9
 800cb04:	1891      	adds	r1, r2, r2
 800cb06:	61b9      	str	r1, [r7, #24]
 800cb08:	415b      	adcs	r3, r3
 800cb0a:	61fb      	str	r3, [r7, #28]
 800cb0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb10:	4641      	mov	r1, r8
 800cb12:	1851      	adds	r1, r2, r1
 800cb14:	6139      	str	r1, [r7, #16]
 800cb16:	4649      	mov	r1, r9
 800cb18:	414b      	adcs	r3, r1
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	f04f 0200 	mov.w	r2, #0
 800cb20:	f04f 0300 	mov.w	r3, #0
 800cb24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb28:	4659      	mov	r1, fp
 800cb2a:	00cb      	lsls	r3, r1, #3
 800cb2c:	4651      	mov	r1, sl
 800cb2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb32:	4651      	mov	r1, sl
 800cb34:	00ca      	lsls	r2, r1, #3
 800cb36:	4610      	mov	r0, r2
 800cb38:	4619      	mov	r1, r3
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	4642      	mov	r2, r8
 800cb3e:	189b      	adds	r3, r3, r2
 800cb40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb44:	464b      	mov	r3, r9
 800cb46:	460a      	mov	r2, r1
 800cb48:	eb42 0303 	adc.w	r3, r2, r3
 800cb4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cb5c:	f04f 0200 	mov.w	r2, #0
 800cb60:	f04f 0300 	mov.w	r3, #0
 800cb64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cb68:	4649      	mov	r1, r9
 800cb6a:	008b      	lsls	r3, r1, #2
 800cb6c:	4641      	mov	r1, r8
 800cb6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb72:	4641      	mov	r1, r8
 800cb74:	008a      	lsls	r2, r1, #2
 800cb76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cb7a:	f7fb fb25 	bl	80081c8 <__aeabi_uldivmod>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	4611      	mov	r1, r2
 800cb84:	4b38      	ldr	r3, [pc, #224]	; (800cc68 <UART_SetConfig+0x4e4>)
 800cb86:	fba3 2301 	umull	r2, r3, r3, r1
 800cb8a:	095b      	lsrs	r3, r3, #5
 800cb8c:	2264      	movs	r2, #100	; 0x64
 800cb8e:	fb02 f303 	mul.w	r3, r2, r3
 800cb92:	1acb      	subs	r3, r1, r3
 800cb94:	011b      	lsls	r3, r3, #4
 800cb96:	3332      	adds	r3, #50	; 0x32
 800cb98:	4a33      	ldr	r2, [pc, #204]	; (800cc68 <UART_SetConfig+0x4e4>)
 800cb9a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb9e:	095b      	lsrs	r3, r3, #5
 800cba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cba4:	441c      	add	r4, r3
 800cba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbaa:	2200      	movs	r2, #0
 800cbac:	673b      	str	r3, [r7, #112]	; 0x70
 800cbae:	677a      	str	r2, [r7, #116]	; 0x74
 800cbb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cbb4:	4642      	mov	r2, r8
 800cbb6:	464b      	mov	r3, r9
 800cbb8:	1891      	adds	r1, r2, r2
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	415b      	adcs	r3, r3
 800cbbe:	60fb      	str	r3, [r7, #12]
 800cbc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbc4:	4641      	mov	r1, r8
 800cbc6:	1851      	adds	r1, r2, r1
 800cbc8:	6039      	str	r1, [r7, #0]
 800cbca:	4649      	mov	r1, r9
 800cbcc:	414b      	adcs	r3, r1
 800cbce:	607b      	str	r3, [r7, #4]
 800cbd0:	f04f 0200 	mov.w	r2, #0
 800cbd4:	f04f 0300 	mov.w	r3, #0
 800cbd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cbdc:	4659      	mov	r1, fp
 800cbde:	00cb      	lsls	r3, r1, #3
 800cbe0:	4651      	mov	r1, sl
 800cbe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbe6:	4651      	mov	r1, sl
 800cbe8:	00ca      	lsls	r2, r1, #3
 800cbea:	4610      	mov	r0, r2
 800cbec:	4619      	mov	r1, r3
 800cbee:	4603      	mov	r3, r0
 800cbf0:	4642      	mov	r2, r8
 800cbf2:	189b      	adds	r3, r3, r2
 800cbf4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbf6:	464b      	mov	r3, r9
 800cbf8:	460a      	mov	r2, r1
 800cbfa:	eb42 0303 	adc.w	r3, r2, r3
 800cbfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	663b      	str	r3, [r7, #96]	; 0x60
 800cc0a:	667a      	str	r2, [r7, #100]	; 0x64
 800cc0c:	f04f 0200 	mov.w	r2, #0
 800cc10:	f04f 0300 	mov.w	r3, #0
 800cc14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cc18:	4649      	mov	r1, r9
 800cc1a:	008b      	lsls	r3, r1, #2
 800cc1c:	4641      	mov	r1, r8
 800cc1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc22:	4641      	mov	r1, r8
 800cc24:	008a      	lsls	r2, r1, #2
 800cc26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cc2a:	f7fb facd 	bl	80081c8 <__aeabi_uldivmod>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	4b0d      	ldr	r3, [pc, #52]	; (800cc68 <UART_SetConfig+0x4e4>)
 800cc34:	fba3 1302 	umull	r1, r3, r3, r2
 800cc38:	095b      	lsrs	r3, r3, #5
 800cc3a:	2164      	movs	r1, #100	; 0x64
 800cc3c:	fb01 f303 	mul.w	r3, r1, r3
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	3332      	adds	r3, #50	; 0x32
 800cc46:	4a08      	ldr	r2, [pc, #32]	; (800cc68 <UART_SetConfig+0x4e4>)
 800cc48:	fba2 2303 	umull	r2, r3, r2, r3
 800cc4c:	095b      	lsrs	r3, r3, #5
 800cc4e:	f003 020f 	and.w	r2, r3, #15
 800cc52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4422      	add	r2, r4
 800cc5a:	609a      	str	r2, [r3, #8]
}
 800cc5c:	bf00      	nop
 800cc5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cc62:	46bd      	mov	sp, r7
 800cc64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc68:	51eb851f 	.word	0x51eb851f

0800cc6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	f107 001c 	add.w	r0, r7, #28
 800cc7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d122      	bne.n	800ccca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cc98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ccac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d105      	bne.n	800ccbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f9c0 	bl	800d044 <USB_CoreReset>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73fb      	strb	r3, [r7, #15]
 800ccc8:	e01a      	b.n	800cd00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f9b4 	bl	800d044 <USB_CoreReset>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	639a      	str	r2, [r3, #56]	; 0x38
 800ccf2:	e005      	b.n	800cd00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d10b      	bne.n	800cd1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f043 0206 	orr.w	r2, r3, #6
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	f043 0220 	orr.w	r2, r3, #32
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd2a:	b004      	add	sp, #16
 800cd2c:	4770      	bx	lr

0800cd2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	f043 0201 	orr.w	r2, r3, #1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	f023 0201 	bic.w	r2, r3, #1
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b084      	sub	sp, #16
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cd8e:	78fb      	ldrb	r3, [r7, #3]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d115      	bne.n	800cdc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cda0:	2001      	movs	r0, #1
 800cda2:	f7fc f883 	bl	8008eac <HAL_Delay>
      ms++;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 f93a 	bl	800d026 <USB_GetMode>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d01e      	beq.n	800cdf6 <USB_SetCurrentMode+0x84>
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b31      	cmp	r3, #49	; 0x31
 800cdbc:	d9f0      	bls.n	800cda0 <USB_SetCurrentMode+0x2e>
 800cdbe:	e01a      	b.n	800cdf6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cdc0:	78fb      	ldrb	r3, [r7, #3]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d115      	bne.n	800cdf2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cdd2:	2001      	movs	r0, #1
 800cdd4:	f7fc f86a 	bl	8008eac <HAL_Delay>
      ms++;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3301      	adds	r3, #1
 800cddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f921 	bl	800d026 <USB_GetMode>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d005      	beq.n	800cdf6 <USB_SetCurrentMode+0x84>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2b31      	cmp	r3, #49	; 0x31
 800cdee:	d9f0      	bls.n	800cdd2 <USB_SetCurrentMode+0x60>
 800cdf0:	e001      	b.n	800cdf6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e005      	b.n	800ce02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b32      	cmp	r3, #50	; 0x32
 800cdfa:	d101      	bne.n	800ce00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e000      	b.n	800ce02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ce16:	2300      	movs	r3, #0
 800ce18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	4a13      	ldr	r2, [pc, #76]	; (800ce70 <USB_FlushTxFifo+0x64>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d901      	bls.n	800ce2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e01b      	b.n	800ce64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	691b      	ldr	r3, [r3, #16]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	daf2      	bge.n	800ce1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ce34:	2300      	movs	r3, #0
 800ce36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	019b      	lsls	r3, r3, #6
 800ce3c:	f043 0220 	orr.w	r2, r3, #32
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	3301      	adds	r3, #1
 800ce48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	4a08      	ldr	r2, [pc, #32]	; (800ce70 <USB_FlushTxFifo+0x64>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d901      	bls.n	800ce56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e006      	b.n	800ce64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	f003 0320 	and.w	r3, r3, #32
 800ce5e:	2b20      	cmp	r3, #32
 800ce60:	d0f0      	beq.n	800ce44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr
 800ce70:	00030d40 	.word	0x00030d40

0800ce74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	3301      	adds	r3, #1
 800ce84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	4a11      	ldr	r2, [pc, #68]	; (800ced0 <USB_FlushRxFifo+0x5c>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d901      	bls.n	800ce92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	e018      	b.n	800cec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	daf2      	bge.n	800ce80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2210      	movs	r2, #16
 800cea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	3301      	adds	r3, #1
 800cea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	4a08      	ldr	r2, [pc, #32]	; (800ced0 <USB_FlushRxFifo+0x5c>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d901      	bls.n	800ceb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	e006      	b.n	800cec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	f003 0310 	and.w	r3, r3, #16
 800cebe:	2b10      	cmp	r3, #16
 800cec0:	d0f0      	beq.n	800cea4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3714      	adds	r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr
 800ced0:	00030d40 	.word	0x00030d40

0800ced4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b089      	sub	sp, #36	; 0x24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	4611      	mov	r1, r2
 800cee0:	461a      	mov	r2, r3
 800cee2:	460b      	mov	r3, r1
 800cee4:	71fb      	strb	r3, [r7, #7]
 800cee6:	4613      	mov	r3, r2
 800cee8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cef2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d123      	bne.n	800cf42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cefa:	88bb      	ldrh	r3, [r7, #4]
 800cefc:	3303      	adds	r3, #3
 800cefe:	089b      	lsrs	r3, r3, #2
 800cf00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf02:	2300      	movs	r3, #0
 800cf04:	61bb      	str	r3, [r7, #24]
 800cf06:	e018      	b.n	800cf3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf08:	79fb      	ldrb	r3, [r7, #7]
 800cf0a:	031a      	lsls	r2, r3, #12
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	4413      	add	r3, r2
 800cf10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf14:	461a      	mov	r2, r3
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	3301      	adds	r3, #1
 800cf26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	3301      	adds	r3, #1
 800cf32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	3301      	adds	r3, #1
 800cf38:	61bb      	str	r3, [r7, #24]
 800cf3a:	69ba      	ldr	r2, [r7, #24]
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d3e2      	bcc.n	800cf08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3724      	adds	r7, #36	; 0x24
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b08b      	sub	sp, #44	; 0x2c
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cf66:	88fb      	ldrh	r3, [r7, #6]
 800cf68:	089b      	lsrs	r3, r3, #2
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cf6e:	88fb      	ldrh	r3, [r7, #6]
 800cf70:	f003 0303 	and.w	r3, r3, #3
 800cf74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	623b      	str	r3, [r7, #32]
 800cf7a:	e014      	b.n	800cfa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf86:	601a      	str	r2, [r3, #0]
    pDest++;
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf90:	3301      	adds	r3, #1
 800cf92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	3301      	adds	r3, #1
 800cf98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	623b      	str	r3, [r7, #32]
 800cfa6:	6a3a      	ldr	r2, [r7, #32]
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d3e6      	bcc.n	800cf7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cfae:	8bfb      	ldrh	r3, [r7, #30]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d01e      	beq.n	800cff2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f107 0310 	add.w	r3, r7, #16
 800cfc4:	6812      	ldr	r2, [r2, #0]
 800cfc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cfc8:	693a      	ldr	r2, [r7, #16]
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	00db      	lsls	r3, r3, #3
 800cfd0:	fa22 f303 	lsr.w	r3, r2, r3
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd8:	701a      	strb	r2, [r3, #0]
      i++;
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	623b      	str	r3, [r7, #32]
      pDest++;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cfe6:	8bfb      	ldrh	r3, [r7, #30]
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cfec:	8bfb      	ldrh	r3, [r7, #30]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1ea      	bne.n	800cfc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	372c      	adds	r7, #44	; 0x2c
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	695b      	ldr	r3, [r3, #20]
 800d00c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	4013      	ands	r3, r2
 800d016:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d018:	68fb      	ldr	r3, [r7, #12]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3714      	adds	r7, #20
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	f003 0301 	and.w	r3, r3, #1
}
 800d036:	4618      	mov	r0, r3
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
	...

0800d044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d04c:	2300      	movs	r3, #0
 800d04e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	3301      	adds	r3, #1
 800d054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	4a13      	ldr	r2, [pc, #76]	; (800d0a8 <USB_CoreReset+0x64>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d901      	bls.n	800d062 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d05e:	2303      	movs	r3, #3
 800d060:	e01b      	b.n	800d09a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	daf2      	bge.n	800d050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d06a:	2300      	movs	r3, #0
 800d06c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	f043 0201 	orr.w	r2, r3, #1
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3301      	adds	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4a09      	ldr	r2, [pc, #36]	; (800d0a8 <USB_CoreReset+0x64>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d901      	bls.n	800d08c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d088:	2303      	movs	r3, #3
 800d08a:	e006      	b.n	800d09a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	691b      	ldr	r3, [r3, #16]
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b01      	cmp	r3, #1
 800d096:	d0f0      	beq.n	800d07a <USB_CoreReset+0x36>

  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3714      	adds	r7, #20
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	00030d40 	.word	0x00030d40

0800d0ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0ac:	b084      	sub	sp, #16
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b086      	sub	sp, #24
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d0ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d018      	beq.n	800d134 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d104:	2b01      	cmp	r3, #1
 800d106:	d10a      	bne.n	800d11e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d116:	f043 0304 	orr.w	r3, r3, #4
 800d11a:	6013      	str	r3, [r2, #0]
 800d11c:	e014      	b.n	800d148 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d12c:	f023 0304 	bic.w	r3, r3, #4
 800d130:	6013      	str	r3, [r2, #0]
 800d132:	e009      	b.n	800d148 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d142:	f023 0304 	bic.w	r3, r3, #4
 800d146:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d148:	2110      	movs	r1, #16
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7ff fe5e 	bl	800ce0c <USB_FlushTxFifo>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff fe8a 	bl	800ce74 <USB_FlushRxFifo>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d001      	beq.n	800d16a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800d166:	2301      	movs	r3, #1
 800d168:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d16a:	2300      	movs	r3, #0
 800d16c:	613b      	str	r3, [r7, #16]
 800d16e:	e015      	b.n	800d19c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	015a      	lsls	r2, r3, #5
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	4413      	add	r3, r2
 800d178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d17c:	461a      	mov	r2, r3
 800d17e:	f04f 33ff 	mov.w	r3, #4294967295
 800d182:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	015a      	lsls	r2, r3, #5
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	4413      	add	r3, r2
 800d18c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d190:	461a      	mov	r2, r3
 800d192:	2300      	movs	r3, #0
 800d194:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	3301      	adds	r3, #1
 800d19a:	613b      	str	r3, [r7, #16]
 800d19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d3e5      	bcc.n	800d170 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00b      	beq.n	800d1d6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1c4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a13      	ldr	r2, [pc, #76]	; (800d218 <USB_HostInit+0x16c>)
 800d1ca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a13      	ldr	r2, [pc, #76]	; (800d21c <USB_HostInit+0x170>)
 800d1d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d1d4:	e009      	b.n	800d1ea <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2280      	movs	r2, #128	; 0x80
 800d1da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4a10      	ldr	r2, [pc, #64]	; (800d220 <USB_HostInit+0x174>)
 800d1e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4a0f      	ldr	r2, [pc, #60]	; (800d224 <USB_HostInit+0x178>)
 800d1e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d105      	bne.n	800d1fc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	699b      	ldr	r3, [r3, #24]
 800d1f4:	f043 0210 	orr.w	r2, r3, #16
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	699a      	ldr	r2, [r3, #24]
 800d200:	4b09      	ldr	r3, [pc, #36]	; (800d228 <USB_HostInit+0x17c>)
 800d202:	4313      	orrs	r3, r2
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d208:	7dfb      	ldrb	r3, [r7, #23]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3718      	adds	r7, #24
 800d20e:	46bd      	mov	sp, r7
 800d210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d214:	b004      	add	sp, #16
 800d216:	4770      	bx	lr
 800d218:	01000200 	.word	0x01000200
 800d21c:	00e00300 	.word	0x00e00300
 800d220:	00600080 	.word	0x00600080
 800d224:	004000e0 	.word	0x004000e0
 800d228:	a3200008 	.word	0xa3200008

0800d22c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	460b      	mov	r3, r1
 800d236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d24a:	f023 0303 	bic.w	r3, r3, #3
 800d24e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	78fb      	ldrb	r3, [r7, #3]
 800d25a:	f003 0303 	and.w	r3, r3, #3
 800d25e:	68f9      	ldr	r1, [r7, #12]
 800d260:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d264:	4313      	orrs	r3, r2
 800d266:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d268:	78fb      	ldrb	r3, [r7, #3]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d107      	bne.n	800d27e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d274:	461a      	mov	r2, r3
 800d276:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d27a:	6053      	str	r3, [r2, #4]
 800d27c:	e009      	b.n	800d292 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d27e:	78fb      	ldrb	r3, [r7, #3]
 800d280:	2b02      	cmp	r3, #2
 800d282:	d106      	bne.n	800d292 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d28a:	461a      	mov	r2, r3
 800d28c:	f241 7370 	movw	r3, #6000	; 0x1770
 800d290:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d2c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d109      	bne.n	800d2e4 <USB_DriveVbus+0x44>
 800d2d0:	78fb      	ldrb	r3, [r7, #3]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d106      	bne.n	800d2e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d2de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d2e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d2ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2ee:	d109      	bne.n	800d304 <USB_DriveVbus+0x64>
 800d2f0:	78fb      	ldrb	r3, [r7, #3]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d106      	bne.n	800d304 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d2fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d302:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr

0800d312 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d312:	b480      	push	{r7}
 800d314:	b085      	sub	sp, #20
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d31e:	2300      	movs	r3, #0
 800d320:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	0c5b      	lsrs	r3, r3, #17
 800d330:	f003 0303 	and.w	r3, r3, #3
}
 800d334:	4618      	mov	r0, r3
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	b29b      	uxth	r3, r3
}
 800d356:	4618      	mov	r0, r3
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
	...

0800d364 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b088      	sub	sp, #32
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	4608      	mov	r0, r1
 800d36e:	4611      	mov	r1, r2
 800d370:	461a      	mov	r2, r3
 800d372:	4603      	mov	r3, r0
 800d374:	70fb      	strb	r3, [r7, #3]
 800d376:	460b      	mov	r3, r1
 800d378:	70bb      	strb	r3, [r7, #2]
 800d37a:	4613      	mov	r3, r2
 800d37c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d386:	78fb      	ldrb	r3, [r7, #3]
 800d388:	015a      	lsls	r2, r3, #5
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	4413      	add	r3, r2
 800d38e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d392:	461a      	mov	r2, r3
 800d394:	f04f 33ff 	mov.w	r3, #4294967295
 800d398:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d39a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d39e:	2b03      	cmp	r3, #3
 800d3a0:	d87e      	bhi.n	800d4a0 <USB_HC_Init+0x13c>
 800d3a2:	a201      	add	r2, pc, #4	; (adr r2, 800d3a8 <USB_HC_Init+0x44>)
 800d3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a8:	0800d3b9 	.word	0x0800d3b9
 800d3ac:	0800d463 	.word	0x0800d463
 800d3b0:	0800d3b9 	.word	0x0800d3b9
 800d3b4:	0800d425 	.word	0x0800d425
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d3b8:	78fb      	ldrb	r3, [r7, #3]
 800d3ba:	015a      	lsls	r2, r3, #5
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	f240 439d 	movw	r3, #1181	; 0x49d
 800d3ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d3cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	da10      	bge.n	800d3f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	015a      	lsls	r2, r3, #5
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	4413      	add	r3, r2
 800d3dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	78fa      	ldrb	r2, [r7, #3]
 800d3e4:	0151      	lsls	r1, r2, #5
 800d3e6:	693a      	ldr	r2, [r7, #16]
 800d3e8:	440a      	add	r2, r1
 800d3ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3f2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d3f4:	e057      	b.n	800d4a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d051      	beq.n	800d4a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d402:	78fb      	ldrb	r3, [r7, #3]
 800d404:	015a      	lsls	r2, r3, #5
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	4413      	add	r3, r2
 800d40a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	78fa      	ldrb	r2, [r7, #3]
 800d412:	0151      	lsls	r1, r2, #5
 800d414:	693a      	ldr	r2, [r7, #16]
 800d416:	440a      	add	r2, r1
 800d418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d41c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d420:	60d3      	str	r3, [r2, #12]
      break;
 800d422:	e040      	b.n	800d4a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d424:	78fb      	ldrb	r3, [r7, #3]
 800d426:	015a      	lsls	r2, r3, #5
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	4413      	add	r3, r2
 800d42c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d430:	461a      	mov	r2, r3
 800d432:	f240 639d 	movw	r3, #1693	; 0x69d
 800d436:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d438:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	da34      	bge.n	800d4aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d440:	78fb      	ldrb	r3, [r7, #3]
 800d442:	015a      	lsls	r2, r3, #5
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	4413      	add	r3, r2
 800d448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	78fa      	ldrb	r2, [r7, #3]
 800d450:	0151      	lsls	r1, r2, #5
 800d452:	693a      	ldr	r2, [r7, #16]
 800d454:	440a      	add	r2, r1
 800d456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d45a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d45e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d460:	e023      	b.n	800d4aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d462:	78fb      	ldrb	r3, [r7, #3]
 800d464:	015a      	lsls	r2, r3, #5
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	4413      	add	r3, r2
 800d46a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d46e:	461a      	mov	r2, r3
 800d470:	f240 2325 	movw	r3, #549	; 0x225
 800d474:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d476:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	da17      	bge.n	800d4ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d47e:	78fb      	ldrb	r3, [r7, #3]
 800d480:	015a      	lsls	r2, r3, #5
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	4413      	add	r3, r2
 800d486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	78fa      	ldrb	r2, [r7, #3]
 800d48e:	0151      	lsls	r1, r2, #5
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	440a      	add	r2, r1
 800d494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d498:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d49c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d49e:	e006      	b.n	800d4ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	77fb      	strb	r3, [r7, #31]
      break;
 800d4a4:	e004      	b.n	800d4b0 <USB_HC_Init+0x14c>
      break;
 800d4a6:	bf00      	nop
 800d4a8:	e002      	b.n	800d4b0 <USB_HC_Init+0x14c>
      break;
 800d4aa:	bf00      	nop
 800d4ac:	e000      	b.n	800d4b0 <USB_HC_Init+0x14c>
      break;
 800d4ae:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	015a      	lsls	r2, r3, #5
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	78fa      	ldrb	r2, [r7, #3]
 800d4c0:	0151      	lsls	r1, r2, #5
 800d4c2:	693a      	ldr	r2, [r7, #16]
 800d4c4:	440a      	add	r2, r1
 800d4c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4ca:	f043 0302 	orr.w	r3, r3, #2
 800d4ce:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4d6:	699a      	ldr	r2, [r3, #24]
 800d4d8:	78fb      	ldrb	r3, [r7, #3]
 800d4da:	f003 030f 	and.w	r3, r3, #15
 800d4de:	2101      	movs	r1, #1
 800d4e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4e4:	6939      	ldr	r1, [r7, #16]
 800d4e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	699b      	ldr	r3, [r3, #24]
 800d4f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d4fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	da03      	bge.n	800d50a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d506:	61bb      	str	r3, [r7, #24]
 800d508:	e001      	b.n	800d50e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800d50a:	2300      	movs	r3, #0
 800d50c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff feff 	bl	800d312 <USB_GetHostSpeed>
 800d514:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d106      	bne.n	800d52c <USB_HC_Init+0x1c8>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2b02      	cmp	r3, #2
 800d522:	d003      	beq.n	800d52c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d528:	617b      	str	r3, [r7, #20]
 800d52a:	e001      	b.n	800d530 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d52c:	2300      	movs	r3, #0
 800d52e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d530:	787b      	ldrb	r3, [r7, #1]
 800d532:	059b      	lsls	r3, r3, #22
 800d534:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d538:	78bb      	ldrb	r3, [r7, #2]
 800d53a:	02db      	lsls	r3, r3, #11
 800d53c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d540:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d542:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d546:	049b      	lsls	r3, r3, #18
 800d548:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d54c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d54e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d550:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d554:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d55a:	78fb      	ldrb	r3, [r7, #3]
 800d55c:	0159      	lsls	r1, r3, #5
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	440b      	add	r3, r1
 800d562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d566:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d56c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d56e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d572:	2b03      	cmp	r3, #3
 800d574:	d003      	beq.n	800d57e <USB_HC_Init+0x21a>
 800d576:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d10f      	bne.n	800d59e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d57e:	78fb      	ldrb	r3, [r7, #3]
 800d580:	015a      	lsls	r2, r3, #5
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	4413      	add	r3, r2
 800d586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	78fa      	ldrb	r2, [r7, #3]
 800d58e:	0151      	lsls	r1, r2, #5
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	440a      	add	r2, r1
 800d594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d59c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d59e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3720      	adds	r7, #32
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08c      	sub	sp, #48	; 0x30
 800d5ac:	af02      	add	r7, sp, #8
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	785b      	ldrb	r3, [r3, #1]
 800d5be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d5c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5c4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d02d      	beq.n	800d62e <USB_HC_StartXfer+0x86>
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	791b      	ldrb	r3, [r3, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d129      	bne.n	800d62e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d5da:	79fb      	ldrb	r3, [r7, #7]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d117      	bne.n	800d610 <USB_HC_StartXfer+0x68>
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	79db      	ldrb	r3, [r3, #7]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d003      	beq.n	800d5f0 <USB_HC_StartXfer+0x48>
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	79db      	ldrb	r3, [r3, #7]
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	d10f      	bne.n	800d610 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	015a      	lsls	r2, r3, #5
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	69fa      	ldr	r2, [r7, #28]
 800d600:	0151      	lsls	r1, r2, #5
 800d602:	6a3a      	ldr	r2, [r7, #32]
 800d604:	440a      	add	r2, r1
 800d606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d60e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d610:	79fb      	ldrb	r3, [r7, #7]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10b      	bne.n	800d62e <USB_HC_StartXfer+0x86>
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	795b      	ldrb	r3, [r3, #5]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d107      	bne.n	800d62e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	785b      	ldrb	r3, [r3, #1]
 800d622:	4619      	mov	r1, r3
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f000 fa0f 	bl	800da48 <USB_DoPing>
      return HAL_OK;
 800d62a:	2300      	movs	r3, #0
 800d62c:	e0f8      	b.n	800d820 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	695b      	ldr	r3, [r3, #20]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d018      	beq.n	800d668 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	8912      	ldrh	r2, [r2, #8]
 800d63e:	4413      	add	r3, r2
 800d640:	3b01      	subs	r3, #1
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	8912      	ldrh	r2, [r2, #8]
 800d646:	fbb3 f3f2 	udiv	r3, r3, r2
 800d64a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d64c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d64e:	8b7b      	ldrh	r3, [r7, #26]
 800d650:	429a      	cmp	r2, r3
 800d652:	d90b      	bls.n	800d66c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d654:	8b7b      	ldrh	r3, [r7, #26]
 800d656:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d658:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	8912      	ldrh	r2, [r2, #8]
 800d65e:	fb03 f202 	mul.w	r2, r3, r2
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	611a      	str	r2, [r3, #16]
 800d666:	e001      	b.n	800d66c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d668:	2301      	movs	r3, #1
 800d66a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	78db      	ldrb	r3, [r3, #3]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d007      	beq.n	800d684 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	8912      	ldrh	r2, [r2, #8]
 800d67a:	fb03 f202 	mul.w	r2, r3, r2
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	611a      	str	r2, [r3, #16]
 800d682:	e003      	b.n	800d68c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	695a      	ldr	r2, [r3, #20]
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d694:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d696:	04d9      	lsls	r1, r3, #19
 800d698:	4b63      	ldr	r3, [pc, #396]	; (800d828 <USB_HC_StartXfer+0x280>)
 800d69a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d69c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	7a9b      	ldrb	r3, [r3, #10]
 800d6a2:	075b      	lsls	r3, r3, #29
 800d6a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d6a8:	69f9      	ldr	r1, [r7, #28]
 800d6aa:	0148      	lsls	r0, r1, #5
 800d6ac:	6a39      	ldr	r1, [r7, #32]
 800d6ae:	4401      	add	r1, r0
 800d6b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d6b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d6b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d6b8:	79fb      	ldrb	r3, [r7, #7]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d009      	beq.n	800d6d2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	68d9      	ldr	r1, [r3, #12]
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	015a      	lsls	r2, r3, #5
 800d6c6:	6a3b      	ldr	r3, [r7, #32]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6ce:	460a      	mov	r2, r1
 800d6d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d6d2:	6a3b      	ldr	r3, [r7, #32]
 800d6d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	bf0c      	ite	eq
 800d6e2:	2301      	moveq	r3, #1
 800d6e4:	2300      	movne	r3, #0
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	015a      	lsls	r2, r3, #5
 800d6ee:	6a3b      	ldr	r3, [r7, #32]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	69fa      	ldr	r2, [r7, #28]
 800d6fa:	0151      	lsls	r1, r2, #5
 800d6fc:	6a3a      	ldr	r2, [r7, #32]
 800d6fe:	440a      	add	r2, r1
 800d700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d704:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d708:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	015a      	lsls	r2, r3, #5
 800d70e:	6a3b      	ldr	r3, [r7, #32]
 800d710:	4413      	add	r3, r2
 800d712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	7e7b      	ldrb	r3, [r7, #25]
 800d71a:	075b      	lsls	r3, r3, #29
 800d71c:	69f9      	ldr	r1, [r7, #28]
 800d71e:	0148      	lsls	r0, r1, #5
 800d720:	6a39      	ldr	r1, [r7, #32]
 800d722:	4401      	add	r1, r0
 800d724:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d728:	4313      	orrs	r3, r2
 800d72a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	4413      	add	r3, r2
 800d734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d742:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	78db      	ldrb	r3, [r3, #3]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d004      	beq.n	800d756 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d752:	613b      	str	r3, [r7, #16]
 800d754:	e003      	b.n	800d75e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d75c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d764:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	015a      	lsls	r2, r3, #5
 800d76a:	6a3b      	ldr	r3, [r7, #32]
 800d76c:	4413      	add	r3, r2
 800d76e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d772:	461a      	mov	r2, r3
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d778:	79fb      	ldrb	r3, [r7, #7]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	e04e      	b.n	800d820 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	78db      	ldrb	r3, [r3, #3]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d149      	bne.n	800d81e <USB_HC_StartXfer+0x276>
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	695b      	ldr	r3, [r3, #20]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d045      	beq.n	800d81e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	79db      	ldrb	r3, [r3, #7]
 800d796:	2b03      	cmp	r3, #3
 800d798:	d830      	bhi.n	800d7fc <USB_HC_StartXfer+0x254>
 800d79a:	a201      	add	r2, pc, #4	; (adr r2, 800d7a0 <USB_HC_StartXfer+0x1f8>)
 800d79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a0:	0800d7b1 	.word	0x0800d7b1
 800d7a4:	0800d7d5 	.word	0x0800d7d5
 800d7a8:	0800d7b1 	.word	0x0800d7b1
 800d7ac:	0800d7d5 	.word	0x0800d7d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	3303      	adds	r3, #3
 800d7b6:	089b      	lsrs	r3, r3, #2
 800d7b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d7ba:	8afa      	ldrh	r2, [r7, #22]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d91c      	bls.n	800d800 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	699b      	ldr	r3, [r3, #24]
 800d7ca:	f043 0220 	orr.w	r2, r3, #32
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	619a      	str	r2, [r3, #24]
        }
        break;
 800d7d2:	e015      	b.n	800d800 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	695b      	ldr	r3, [r3, #20]
 800d7d8:	3303      	adds	r3, #3
 800d7da:	089b      	lsrs	r3, r3, #2
 800d7dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d7de:	8afa      	ldrh	r2, [r7, #22]
 800d7e0:	6a3b      	ldr	r3, [r7, #32]
 800d7e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d90a      	bls.n	800d804 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	619a      	str	r2, [r3, #24]
        }
        break;
 800d7fa:	e003      	b.n	800d804 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d7fc:	bf00      	nop
 800d7fe:	e002      	b.n	800d806 <USB_HC_StartXfer+0x25e>
        break;
 800d800:	bf00      	nop
 800d802:	e000      	b.n	800d806 <USB_HC_StartXfer+0x25e>
        break;
 800d804:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	68d9      	ldr	r1, [r3, #12]
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	785a      	ldrb	r2, [r3, #1]
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	695b      	ldr	r3, [r3, #20]
 800d812:	b29b      	uxth	r3, r3
 800d814:	2000      	movs	r0, #0
 800d816:	9000      	str	r0, [sp, #0]
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f7ff fb5b 	bl	800ced4 <USB_WritePacket>
  }

  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3728      	adds	r7, #40	; 0x28
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	1ff80000 	.word	0x1ff80000

0800d82c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d83e:	695b      	ldr	r3, [r3, #20]
 800d840:	b29b      	uxth	r3, r3
}
 800d842:	4618      	mov	r0, r3
 800d844:	3714      	adds	r7, #20
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d84e:	b480      	push	{r7}
 800d850:	b089      	sub	sp, #36	; 0x24
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
 800d856:	460b      	mov	r3, r1
 800d858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d85e:	78fb      	ldrb	r3, [r7, #3]
 800d860:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d862:	2300      	movs	r3, #0
 800d864:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	015a      	lsls	r2, r3, #5
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	4413      	add	r3, r2
 800d86e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	0c9b      	lsrs	r3, r3, #18
 800d876:	f003 0303 	and.w	r3, r3, #3
 800d87a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	015a      	lsls	r2, r3, #5
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	4413      	add	r3, r2
 800d884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	0fdb      	lsrs	r3, r3, #31
 800d88c:	f003 0301 	and.w	r3, r3, #1
 800d890:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	f003 0320 	and.w	r3, r3, #32
 800d89a:	2b20      	cmp	r3, #32
 800d89c:	d104      	bne.n	800d8a8 <USB_HC_Halt+0x5a>
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	e0c8      	b.n	800da3a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d002      	beq.n	800d8b4 <USB_HC_Halt+0x66>
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d163      	bne.n	800d97c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	015a      	lsls	r2, r3, #5
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	0151      	lsls	r1, r2, #5
 800d8c6:	69fa      	ldr	r2, [r7, #28]
 800d8c8:	440a      	add	r2, r1
 800d8ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d8d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	f003 0320 	and.w	r3, r3, #32
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f040 80ab 	bne.w	800da38 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d133      	bne.n	800d956 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	015a      	lsls	r2, r3, #5
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	69ba      	ldr	r2, [r7, #24]
 800d8fe:	0151      	lsls	r1, r2, #5
 800d900:	69fa      	ldr	r2, [r7, #28]
 800d902:	440a      	add	r2, r1
 800d904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d90c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	015a      	lsls	r2, r3, #5
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	4413      	add	r3, r2
 800d916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	69ba      	ldr	r2, [r7, #24]
 800d91e:	0151      	lsls	r1, r2, #5
 800d920:	69fa      	ldr	r2, [r7, #28]
 800d922:	440a      	add	r2, r1
 800d924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d92c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	3301      	adds	r3, #1
 800d932:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d93a:	d81d      	bhi.n	800d978 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	015a      	lsls	r2, r3, #5
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	4413      	add	r3, r2
 800d944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d94e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d952:	d0ec      	beq.n	800d92e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d954:	e070      	b.n	800da38 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	015a      	lsls	r2, r3, #5
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	4413      	add	r3, r2
 800d95e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	69ba      	ldr	r2, [r7, #24]
 800d966:	0151      	lsls	r1, r2, #5
 800d968:	69fa      	ldr	r2, [r7, #28]
 800d96a:	440a      	add	r2, r1
 800d96c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d974:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d976:	e05f      	b.n	800da38 <USB_HC_Halt+0x1ea>
            break;
 800d978:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d97a:	e05d      	b.n	800da38 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	015a      	lsls	r2, r3, #5
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	4413      	add	r3, r2
 800d984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	69ba      	ldr	r2, [r7, #24]
 800d98c:	0151      	lsls	r1, r2, #5
 800d98e:	69fa      	ldr	r2, [r7, #28]
 800d990:	440a      	add	r2, r1
 800d992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d99a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d133      	bne.n	800da14 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	015a      	lsls	r2, r3, #5
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	69ba      	ldr	r2, [r7, #24]
 800d9bc:	0151      	lsls	r1, r2, #5
 800d9be:	69fa      	ldr	r2, [r7, #28]
 800d9c0:	440a      	add	r2, r1
 800d9c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	015a      	lsls	r2, r3, #5
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	69ba      	ldr	r2, [r7, #24]
 800d9dc:	0151      	lsls	r1, r2, #5
 800d9de:	69fa      	ldr	r2, [r7, #28]
 800d9e0:	440a      	add	r2, r1
 800d9e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9ea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9f8:	d81d      	bhi.n	800da36 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	4413      	add	r3, r2
 800da02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da10:	d0ec      	beq.n	800d9ec <USB_HC_Halt+0x19e>
 800da12:	e011      	b.n	800da38 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	015a      	lsls	r2, r3, #5
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	4413      	add	r3, r2
 800da1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	69ba      	ldr	r2, [r7, #24]
 800da24:	0151      	lsls	r1, r2, #5
 800da26:	69fa      	ldr	r2, [r7, #28]
 800da28:	440a      	add	r2, r1
 800da2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da32:	6013      	str	r3, [r2, #0]
 800da34:	e000      	b.n	800da38 <USB_HC_Halt+0x1ea>
          break;
 800da36:	bf00      	nop
    }
  }

  return HAL_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3724      	adds	r7, #36	; 0x24
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
	...

0800da48 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800da48:	b480      	push	{r7}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	460b      	mov	r3, r1
 800da52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800da58:	78fb      	ldrb	r3, [r7, #3]
 800da5a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800da5c:	2301      	movs	r3, #1
 800da5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	04da      	lsls	r2, r3, #19
 800da64:	4b15      	ldr	r3, [pc, #84]	; (800dabc <USB_DoPing+0x74>)
 800da66:	4013      	ands	r3, r2
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	0151      	lsls	r1, r2, #5
 800da6c:	697a      	ldr	r2, [r7, #20]
 800da6e:	440a      	add	r2, r1
 800da70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da78:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	015a      	lsls	r2, r3, #5
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	4413      	add	r3, r2
 800da82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800da90:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da98:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	015a      	lsls	r2, r3, #5
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	4413      	add	r3, r2
 800daa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daa6:	461a      	mov	r2, r3
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	371c      	adds	r7, #28
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	1ff80000 	.word	0x1ff80000

0800dac0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800dac8:	2300      	movs	r3, #0
 800daca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800dad0:	2300      	movs	r3, #0
 800dad2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff f93b 	bl	800cd50 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dada:	2110      	movs	r1, #16
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7ff f995 	bl	800ce0c <USB_FlushTxFifo>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d001      	beq.n	800daec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800dae8:	2301      	movs	r3, #1
 800daea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7ff f9c1 	bl	800ce74 <USB_FlushRxFifo>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d001      	beq.n	800dafc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800dafc:	2300      	movs	r3, #0
 800dafe:	61bb      	str	r3, [r7, #24]
 800db00:	e01f      	b.n	800db42 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	015a      	lsls	r2, r3, #5
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	4413      	add	r3, r2
 800db0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800db28:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	015a      	lsls	r2, r3, #5
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	4413      	add	r3, r2
 800db32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db36:	461a      	mov	r2, r3
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	3301      	adds	r3, #1
 800db40:	61bb      	str	r3, [r7, #24]
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	2b0f      	cmp	r3, #15
 800db46:	d9dc      	bls.n	800db02 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800db48:	2300      	movs	r3, #0
 800db4a:	61bb      	str	r3, [r7, #24]
 800db4c:	e034      	b.n	800dbb8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	015a      	lsls	r2, r3, #5
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	4413      	add	r3, r2
 800db56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800db74:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	015a      	lsls	r2, r3, #5
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	4413      	add	r3, r2
 800db7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db82:	461a      	mov	r2, r3
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	3301      	adds	r3, #1
 800db8c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db94:	d80c      	bhi.n	800dbb0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	015a      	lsls	r2, r3, #5
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	4413      	add	r3, r2
 800db9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbac:	d0ec      	beq.n	800db88 <USB_StopHost+0xc8>
 800dbae:	e000      	b.n	800dbb2 <USB_StopHost+0xf2>
        break;
 800dbb0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	61bb      	str	r3, [r7, #24]
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	2b0f      	cmp	r3, #15
 800dbbc:	d9c7      	bls.n	800db4e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	f04f 33ff 	mov.w	r3, #4294967295
 800dbca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff f8aa 	bl	800cd2e <USB_EnableGlobalInt>

  return ret;
 800dbda:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3720      	adds	r7, #32
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800dbe4:	b590      	push	{r4, r7, lr}
 800dbe6:	b089      	sub	sp, #36	; 0x24
 800dbe8:	af04      	add	r7, sp, #16
 800dbea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800dbec:	2301      	movs	r3, #1
 800dbee:	2202      	movs	r2, #2
 800dbf0:	2102      	movs	r1, #2
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fc66 	bl	800e4c4 <USBH_FindInterface>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
 800dbfe:	2bff      	cmp	r3, #255	; 0xff
 800dc00:	d002      	beq.n	800dc08 <USBH_CDC_InterfaceInit+0x24>
 800dc02:	7bfb      	ldrb	r3, [r7, #15]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d901      	bls.n	800dc0c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dc08:	2302      	movs	r3, #2
 800dc0a:	e13d      	b.n	800de88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fc3b 	bl	800e48c <USBH_SelectInterface>
 800dc16:	4603      	mov	r3, r0
 800dc18:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800dc20:	2302      	movs	r3, #2
 800dc22:	e131      	b.n	800de88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800dc2a:	2050      	movs	r0, #80	; 0x50
 800dc2c:	f001 fae8 	bl	800f200 <malloc>
 800dc30:	4603      	mov	r3, r0
 800dc32:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc3a:	69db      	ldr	r3, [r3, #28]
 800dc3c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d101      	bne.n	800dc48 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800dc44:	2302      	movs	r3, #2
 800dc46:	e11f      	b.n	800de88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800dc48:	2250      	movs	r2, #80	; 0x50
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	68b8      	ldr	r0, [r7, #8]
 800dc4e:	f001 fb93 	bl	800f378 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800dc52:	7bfb      	ldrb	r3, [r7, #15]
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	211a      	movs	r1, #26
 800dc58:	fb01 f303 	mul.w	r3, r1, r3
 800dc5c:	4413      	add	r3, r2
 800dc5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	b25b      	sxtb	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	da15      	bge.n	800dc96 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dc6a:	7bfb      	ldrb	r3, [r7, #15]
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	211a      	movs	r1, #26
 800dc70:	fb01 f303 	mul.w	r3, r1, r3
 800dc74:	4413      	add	r3, r2
 800dc76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc7a:	781a      	ldrb	r2, [r3, #0]
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	211a      	movs	r1, #26
 800dc86:	fb01 f303 	mul.w	r3, r1, r3
 800dc8a:	4413      	add	r3, r2
 800dc8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dc90:	881a      	ldrh	r2, [r3, #0]
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	785b      	ldrb	r3, [r3, #1]
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 ff9c 	bl	800ebda <USBH_AllocPipe>
 800dca2:	4603      	mov	r3, r0
 800dca4:	461a      	mov	r2, r3
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	7819      	ldrb	r1, [r3, #0]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	7858      	ldrb	r0, [r3, #1]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	8952      	ldrh	r2, [r2, #10]
 800dcc2:	9202      	str	r2, [sp, #8]
 800dcc4:	2203      	movs	r2, #3
 800dcc6:	9201      	str	r2, [sp, #4]
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	4623      	mov	r3, r4
 800dccc:	4602      	mov	r2, r0
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 ff54 	bl	800eb7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f001 fa17 	bl	800f110 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dce2:	2300      	movs	r3, #0
 800dce4:	2200      	movs	r2, #0
 800dce6:	210a      	movs	r1, #10
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fbeb 	bl	800e4c4 <USBH_FindInterface>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	2bff      	cmp	r3, #255	; 0xff
 800dcf6:	d002      	beq.n	800dcfe <USBH_CDC_InterfaceInit+0x11a>
 800dcf8:	7bfb      	ldrb	r3, [r7, #15]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d901      	bls.n	800dd02 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dcfe:	2302      	movs	r3, #2
 800dd00:	e0c2      	b.n	800de88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	211a      	movs	r1, #26
 800dd08:	fb01 f303 	mul.w	r3, r1, r3
 800dd0c:	4413      	add	r3, r2
 800dd0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	b25b      	sxtb	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	da16      	bge.n	800dd48 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dd1a:	7bfb      	ldrb	r3, [r7, #15]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	211a      	movs	r1, #26
 800dd20:	fb01 f303 	mul.w	r3, r1, r3
 800dd24:	4413      	add	r3, r2
 800dd26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dd2a:	781a      	ldrb	r2, [r3, #0]
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	211a      	movs	r1, #26
 800dd36:	fb01 f303 	mul.w	r3, r1, r3
 800dd3a:	4413      	add	r3, r2
 800dd3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dd40:	881a      	ldrh	r2, [r3, #0]
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	835a      	strh	r2, [r3, #26]
 800dd46:	e015      	b.n	800dd74 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dd48:	7bfb      	ldrb	r3, [r7, #15]
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	211a      	movs	r1, #26
 800dd4e:	fb01 f303 	mul.w	r3, r1, r3
 800dd52:	4413      	add	r3, r2
 800dd54:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dd58:	781a      	ldrb	r2, [r3, #0]
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dd5e:	7bfb      	ldrb	r3, [r7, #15]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	211a      	movs	r1, #26
 800dd64:	fb01 f303 	mul.w	r3, r1, r3
 800dd68:	4413      	add	r3, r2
 800dd6a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dd6e:	881a      	ldrh	r2, [r3, #0]
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	211a      	movs	r1, #26
 800dd7a:	fb01 f303 	mul.w	r3, r1, r3
 800dd7e:	4413      	add	r3, r2
 800dd80:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	b25b      	sxtb	r3, r3
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	da16      	bge.n	800ddba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	211a      	movs	r1, #26
 800dd92:	fb01 f303 	mul.w	r3, r1, r3
 800dd96:	4413      	add	r3, r2
 800dd98:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dd9c:	781a      	ldrb	r2, [r3, #0]
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	211a      	movs	r1, #26
 800dda8:	fb01 f303 	mul.w	r3, r1, r3
 800ddac:	4413      	add	r3, r2
 800ddae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ddb2:	881a      	ldrh	r2, [r3, #0]
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	835a      	strh	r2, [r3, #26]
 800ddb8:	e015      	b.n	800dde6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	211a      	movs	r1, #26
 800ddc0:	fb01 f303 	mul.w	r3, r1, r3
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ddca:	781a      	ldrb	r2, [r3, #0]
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	211a      	movs	r1, #26
 800ddd6:	fb01 f303 	mul.w	r3, r1, r3
 800ddda:	4413      	add	r3, r2
 800dddc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dde0:	881a      	ldrh	r2, [r3, #0]
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	7b9b      	ldrb	r3, [r3, #14]
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 fef4 	bl	800ebda <USBH_AllocPipe>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	7bdb      	ldrb	r3, [r3, #15]
 800ddfe:	4619      	mov	r1, r3
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 feea 	bl	800ebda <USBH_AllocPipe>
 800de06:	4603      	mov	r3, r0
 800de08:	461a      	mov	r2, r3
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	7b59      	ldrb	r1, [r3, #13]
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	7b98      	ldrb	r0, [r3, #14]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800de22:	68ba      	ldr	r2, [r7, #8]
 800de24:	8b12      	ldrh	r2, [r2, #24]
 800de26:	9202      	str	r2, [sp, #8]
 800de28:	2202      	movs	r2, #2
 800de2a:	9201      	str	r2, [sp, #4]
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	4623      	mov	r3, r4
 800de30:	4602      	mov	r2, r0
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fea2 	bl	800eb7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	7b19      	ldrb	r1, [r3, #12]
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	7bd8      	ldrb	r0, [r3, #15]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	8b52      	ldrh	r2, [r2, #26]
 800de50:	9202      	str	r2, [sp, #8]
 800de52:	2202      	movs	r2, #2
 800de54:	9201      	str	r2, [sp, #4]
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	4623      	mov	r3, r4
 800de5a:	4602      	mov	r2, r0
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fe8d 	bl	800eb7c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	7b5b      	ldrb	r3, [r3, #13]
 800de6e:	2200      	movs	r2, #0
 800de70:	4619      	mov	r1, r3
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f001 f94c 	bl	800f110 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	7b1b      	ldrb	r3, [r3, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	4619      	mov	r1, r3
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f001 f945 	bl	800f110 <USBH_LL_SetToggle>

  return USBH_OK;
 800de86:	2300      	movs	r3, #0
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3714      	adds	r7, #20
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd90      	pop	{r4, r7, pc}

0800de90 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de9e:	69db      	ldr	r3, [r3, #28]
 800dea0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00e      	beq.n	800dec8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	4619      	mov	r1, r3
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fe82 	bl	800ebba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	4619      	mov	r1, r3
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 fead 	bl	800ec1c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	7b1b      	ldrb	r3, [r3, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00e      	beq.n	800deee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	7b1b      	ldrb	r3, [r3, #12]
 800ded4:	4619      	mov	r1, r3
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fe6f 	bl	800ebba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	7b1b      	ldrb	r3, [r3, #12]
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 fe9a 	bl	800ec1c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2200      	movs	r2, #0
 800deec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	7b5b      	ldrb	r3, [r3, #13]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00e      	beq.n	800df14 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	7b5b      	ldrb	r3, [r3, #13]
 800defa:	4619      	mov	r1, r3
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fe5c 	bl	800ebba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	7b5b      	ldrb	r3, [r3, #13]
 800df06:	4619      	mov	r1, r3
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fe87 	bl	800ec1c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2200      	movs	r2, #0
 800df12:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df1a:	69db      	ldr	r3, [r3, #28]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00b      	beq.n	800df38 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df26:	69db      	ldr	r3, [r3, #28]
 800df28:	4618      	mov	r0, r3
 800df2a:	f001 f971 	bl	800f210 <free>
    phost->pActiveClass->pData = 0U;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df34:	2200      	movs	r2, #0
 800df36:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b084      	sub	sp, #16
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df50:	69db      	ldr	r3, [r3, #28]
 800df52:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	3340      	adds	r3, #64	; 0x40
 800df58:	4619      	mov	r1, r3
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 f8b1 	bl	800e0c2 <GetLineCoding>
 800df60:	4603      	mov	r3, r0
 800df62:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800df64:	7afb      	ldrb	r3, [r7, #11]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d105      	bne.n	800df76 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df70:	2102      	movs	r1, #2
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800df76:	7afb      	ldrb	r3, [r7, #11]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800df88:	2301      	movs	r3, #1
 800df8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df96:	69db      	ldr	r3, [r3, #28]
 800df98:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dfa0:	2b04      	cmp	r3, #4
 800dfa2:	d877      	bhi.n	800e094 <USBH_CDC_Process+0x114>
 800dfa4:	a201      	add	r2, pc, #4	; (adr r2, 800dfac <USBH_CDC_Process+0x2c>)
 800dfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfaa:	bf00      	nop
 800dfac:	0800dfc1 	.word	0x0800dfc1
 800dfb0:	0800dfc7 	.word	0x0800dfc7
 800dfb4:	0800dff7 	.word	0x0800dff7
 800dfb8:	0800e06b 	.word	0x0800e06b
 800dfbc:	0800e079 	.word	0x0800e079
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73fb      	strb	r3, [r7, #15]
      break;
 800dfc4:	e06d      	b.n	800e0a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 f897 	bl	800e100 <SetLineCoding>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dfd6:	7bbb      	ldrb	r3, [r7, #14]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d104      	bne.n	800dfe6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	2202      	movs	r2, #2
 800dfe0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dfe4:	e058      	b.n	800e098 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800dfe6:	7bbb      	ldrb	r3, [r7, #14]
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d055      	beq.n	800e098 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	2204      	movs	r2, #4
 800dff0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dff4:	e050      	b.n	800e098 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	3340      	adds	r3, #64	; 0x40
 800dffa:	4619      	mov	r1, r3
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 f860 	bl	800e0c2 <GetLineCoding>
 800e002:	4603      	mov	r3, r0
 800e004:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e006:	7bbb      	ldrb	r3, [r7, #14]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d126      	bne.n	800e05a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	2200      	movs	r2, #0
 800e010:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e01e:	791b      	ldrb	r3, [r3, #4]
 800e020:	429a      	cmp	r2, r3
 800e022:	d13b      	bne.n	800e09c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e02e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e030:	429a      	cmp	r2, r3
 800e032:	d133      	bne.n	800e09c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e03e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e040:	429a      	cmp	r2, r3
 800e042:	d12b      	bne.n	800e09c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e04c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e04e:	429a      	cmp	r2, r3
 800e050:	d124      	bne.n	800e09c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 f958 	bl	800e308 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e058:	e020      	b.n	800e09c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e05a:	7bbb      	ldrb	r3, [r7, #14]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d01d      	beq.n	800e09c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2204      	movs	r2, #4
 800e064:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e068:	e018      	b.n	800e09c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f867 	bl	800e13e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 f8da 	bl	800e22a <CDC_ProcessReception>
      break;
 800e076:	e014      	b.n	800e0a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e078:	2100      	movs	r1, #0
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fb08 	bl	800e690 <USBH_ClrFeature>
 800e080:	4603      	mov	r3, r0
 800e082:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e084:	7bbb      	ldrb	r3, [r7, #14]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10a      	bne.n	800e0a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e092:	e005      	b.n	800e0a0 <USBH_CDC_Process+0x120>

    default:
      break;
 800e094:	bf00      	nop
 800e096:	e004      	b.n	800e0a2 <USBH_CDC_Process+0x122>
      break;
 800e098:	bf00      	nop
 800e09a:	e002      	b.n	800e0a2 <USBH_CDC_Process+0x122>
      break;
 800e09c:	bf00      	nop
 800e09e:	e000      	b.n	800e0a2 <USBH_CDC_Process+0x122>
      break;
 800e0a0:	bf00      	nop

  }

  return status;
 800e0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b082      	sub	sp, #8
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	22a1      	movs	r2, #161	; 0xa1
 800e0d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2221      	movs	r2, #33	; 0x21
 800e0d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2207      	movs	r2, #7
 800e0e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	2207      	movs	r2, #7
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 faf1 	bl	800e6d8 <USBH_CtlReq>
 800e0f6:	4603      	mov	r3, r0
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2221      	movs	r2, #33	; 0x21
 800e10e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2220      	movs	r2, #32
 800e114:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2207      	movs	r2, #7
 800e126:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	2207      	movs	r2, #7
 800e12c:	4619      	mov	r1, r3
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fad2 	bl	800e6d8 <USBH_CtlReq>
 800e134:	4603      	mov	r3, r0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3708      	adds	r7, #8
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b086      	sub	sp, #24
 800e142:	af02      	add	r7, sp, #8
 800e144:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e150:	2300      	movs	r3, #0
 800e152:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d002      	beq.n	800e164 <CDC_ProcessTransmission+0x26>
 800e15e:	2b02      	cmp	r3, #2
 800e160:	d023      	beq.n	800e1aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e162:	e05e      	b.n	800e222 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	8b12      	ldrh	r2, [r2, #24]
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d90b      	bls.n	800e188 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	69d9      	ldr	r1, [r3, #28]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	8b1a      	ldrh	r2, [r3, #24]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	7b5b      	ldrb	r3, [r3, #13]
 800e17c:	2001      	movs	r0, #1
 800e17e:	9000      	str	r0, [sp, #0]
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fcb8 	bl	800eaf6 <USBH_BulkSendData>
 800e186:	e00b      	b.n	800e1a0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800e190:	b29a      	uxth	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	7b5b      	ldrb	r3, [r3, #13]
 800e196:	2001      	movs	r0, #1
 800e198:	9000      	str	r0, [sp, #0]
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 fcab 	bl	800eaf6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e1a8:	e03b      	b.n	800e222 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	7b5b      	ldrb	r3, [r3, #13]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 ff83 	bl	800f0bc <USBH_LL_GetURBState>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e1ba:	7afb      	ldrb	r3, [r7, #11]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d128      	bne.n	800e212 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	8b12      	ldrh	r2, [r2, #24]
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d90e      	bls.n	800e1ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	8b12      	ldrh	r2, [r2, #24]
 800e1d4:	1a9a      	subs	r2, r3, r2
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	69db      	ldr	r3, [r3, #28]
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	8b12      	ldrh	r2, [r2, #24]
 800e1e2:	441a      	add	r2, r3
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	61da      	str	r2, [r3, #28]
 800e1e8:	e002      	b.n	800e1f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d004      	beq.n	800e202 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e200:	e00e      	b.n	800e220 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f868 	bl	800e2e0 <USBH_CDC_TransmitCallback>
      break;
 800e210:	e006      	b.n	800e220 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800e212:	7afb      	ldrb	r3, [r7, #11]
 800e214:	2b02      	cmp	r3, #2
 800e216:	d103      	bne.n	800e220 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e220:	bf00      	nop
  }
}
 800e222:	bf00      	nop
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b086      	sub	sp, #24
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e238:	69db      	ldr	r3, [r3, #28]
 800e23a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e23c:	2300      	movs	r3, #0
 800e23e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e246:	2b03      	cmp	r3, #3
 800e248:	d002      	beq.n	800e250 <CDC_ProcessReception+0x26>
 800e24a:	2b04      	cmp	r3, #4
 800e24c:	d00e      	beq.n	800e26c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e24e:	e043      	b.n	800e2d8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	6a19      	ldr	r1, [r3, #32]
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	8b5a      	ldrh	r2, [r3, #26]
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	7b1b      	ldrb	r3, [r3, #12]
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 fc6f 	bl	800eb40 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2204      	movs	r2, #4
 800e266:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e26a:	e035      	b.n	800e2d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	7b1b      	ldrb	r3, [r3, #12]
 800e270:	4619      	mov	r1, r3
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 ff22 	bl	800f0bc <USBH_LL_GetURBState>
 800e278:	4603      	mov	r3, r0
 800e27a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e27c:	7cfb      	ldrb	r3, [r7, #19]
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d129      	bne.n	800e2d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	7b1b      	ldrb	r3, [r3, #12]
 800e286:	4619      	mov	r1, r3
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fe85 	bl	800ef98 <USBH_LL_GetLastXferSize>
 800e28e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	429a      	cmp	r2, r3
 800e298:	d016      	beq.n	800e2c8 <CDC_ProcessReception+0x9e>
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	8b5b      	ldrh	r3, [r3, #26]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d910      	bls.n	800e2c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	1ad2      	subs	r2, r2, r3
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	6a1a      	ldr	r2, [r3, #32]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	441a      	add	r2, r3
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	2203      	movs	r2, #3
 800e2c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e2c6:	e006      	b.n	800e2d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 f80f 	bl	800e2f4 <USBH_CDC_ReceiveCallback>
      break;
 800e2d6:	bf00      	nop
  }
}
 800e2d8:	bf00      	nop
 800e2da:	3718      	adds	r7, #24
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e2e8:	bf00      	nop
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	4613      	mov	r3, r2
 800e328:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d101      	bne.n	800e334 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e330:	2302      	movs	r3, #2
 800e332:	e029      	b.n	800e388 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	79fa      	ldrb	r2, [r7, #7]
 800e338:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2200      	movs	r2, #0
 800e340:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 f81f 	bl	800e390 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d003      	beq.n	800e380 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f000 fd97 	bl	800eeb4 <USBH_LL_Init>

  return USBH_OK;
 800e386:	2300      	movs	r3, #0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e390:	b480      	push	{r7}
 800e392:	b085      	sub	sp, #20
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e398:	2300      	movs	r3, #0
 800e39a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e39c:	2300      	movs	r3, #0
 800e39e:	60fb      	str	r3, [r7, #12]
 800e3a0:	e009      	b.n	800e3b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	33e0      	adds	r3, #224	; 0xe0
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	4413      	add	r3, r2
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	60fb      	str	r3, [r7, #12]
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2b0f      	cmp	r3, #15
 800e3ba:	d9f2      	bls.n	800e3a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e3bc:	2300      	movs	r3, #0
 800e3be:	60fb      	str	r3, [r7, #12]
 800e3c0:	e009      	b.n	800e3d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	60fb      	str	r3, [r7, #12]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3dc:	d3f1      	bcc.n	800e3c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2240      	movs	r2, #64	; 0x40
 800e402:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2201      	movs	r2, #1
 800e416:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e42a:	2300      	movs	r3, #0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3714      	adds	r7, #20
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d016      	beq.n	800e47a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10e      	bne.n	800e474 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e45c:	1c59      	adds	r1, r3, #1
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	33de      	adds	r3, #222	; 0xde
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e46e:	2300      	movs	r3, #0
 800e470:	73fb      	strb	r3, [r7, #15]
 800e472:	e004      	b.n	800e47e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e474:	2302      	movs	r3, #2
 800e476:	73fb      	strb	r3, [r7, #15]
 800e478:	e001      	b.n	800e47e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e47a:	2302      	movs	r3, #2
 800e47c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e480:	4618      	mov	r0, r3
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e4a2:	78fa      	ldrb	r2, [r7, #3]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d204      	bcs.n	800e4b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	78fa      	ldrb	r2, [r7, #3]
 800e4ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e4b0:	e001      	b.n	800e4b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e4b2:	2302      	movs	r3, #2
 800e4b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b087      	sub	sp, #28
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	4608      	mov	r0, r1
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	70fb      	strb	r3, [r7, #3]
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	70bb      	strb	r3, [r7, #2]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e4ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e4ee:	e025      	b.n	800e53c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e4f0:	7dfb      	ldrb	r3, [r7, #23]
 800e4f2:	221a      	movs	r2, #26
 800e4f4:	fb02 f303 	mul.w	r3, r2, r3
 800e4f8:	3308      	adds	r3, #8
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	3302      	adds	r3, #2
 800e500:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	795b      	ldrb	r3, [r3, #5]
 800e506:	78fa      	ldrb	r2, [r7, #3]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d002      	beq.n	800e512 <USBH_FindInterface+0x4e>
 800e50c:	78fb      	ldrb	r3, [r7, #3]
 800e50e:	2bff      	cmp	r3, #255	; 0xff
 800e510:	d111      	bne.n	800e536 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e516:	78ba      	ldrb	r2, [r7, #2]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d002      	beq.n	800e522 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e51c:	78bb      	ldrb	r3, [r7, #2]
 800e51e:	2bff      	cmp	r3, #255	; 0xff
 800e520:	d109      	bne.n	800e536 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e526:	787a      	ldrb	r2, [r7, #1]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d002      	beq.n	800e532 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e52c:	787b      	ldrb	r3, [r7, #1]
 800e52e:	2bff      	cmp	r3, #255	; 0xff
 800e530:	d101      	bne.n	800e536 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	e006      	b.n	800e544 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e536:	7dfb      	ldrb	r3, [r7, #23]
 800e538:	3301      	adds	r3, #1
 800e53a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e53c:	7dfb      	ldrb	r3, [r7, #23]
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d9d6      	bls.n	800e4f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e542:	23ff      	movs	r3, #255	; 0xff
}
 800e544:	4618      	mov	r0, r3
 800e546:	371c      	adds	r7, #28
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fce7 	bl	800ef2c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800e55e:	2101      	movs	r1, #1
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 fdbe 	bl	800f0e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e566:	2300      	movs	r3, #0
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	683a      	ldr	r2, [r7, #0]
 800e57e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e582:	bf00      	nop
 800e584:	370c      	adds	r7, #12
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b082      	sub	sp, #8
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 f804 	bl	800e5b2 <USBH_HandleSof>
}
 800e5aa:	bf00      	nop
 800e5ac:	3708      	adds	r7, #8
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b082      	sub	sp, #8
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	2b0b      	cmp	r3, #11
 800e5c2:	d10a      	bne.n	800e5da <USBH_HandleSof+0x28>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d005      	beq.n	800e5da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5d4:	699b      	ldr	r3, [r3, #24]
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	4798      	blx	r3
  }
}
 800e5da:	bf00      	nop
 800e5dc:	3708      	adds	r7, #8
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e5e2:	b480      	push	{r7}
 800e5e4:	b083      	sub	sp, #12
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e5f2:	bf00      	nop
}
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e60e:	bf00      	nop
}
 800e610:	370c      	adds	r7, #12
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr

0800e61a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e61a:	b480      	push	{r7}
 800e61c:	b083      	sub	sp, #12
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2201      	movs	r2, #1
 800e626:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2200      	movs	r2, #0
 800e636:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2201      	movs	r2, #1
 800e654:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 fc7a 	bl	800ef62 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	791b      	ldrb	r3, [r3, #4]
 800e672:	4619      	mov	r1, r3
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 fad1 	bl	800ec1c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	795b      	ldrb	r3, [r3, #5]
 800e67e:	4619      	mov	r1, r3
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 facb 	bl	800ec1c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	460b      	mov	r3, r1
 800e69a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	789b      	ldrb	r3, [r3, #2]
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d10f      	bne.n	800e6c4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2202      	movs	r2, #2
 800e6a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e6b6:	78fb      	ldrb	r3, [r7, #3]
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f805 	bl	800e6d8 <USBH_CtlReq>
 800e6ce:	4603      	mov	r3, r0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	789b      	ldrb	r3, [r3, #2]
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d002      	beq.n	800e6f8 <USBH_CtlReq+0x20>
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d00f      	beq.n	800e716 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e6f6:	e027      	b.n	800e748 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	88fa      	ldrh	r2, [r7, #6]
 800e702:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2201      	movs	r2, #1
 800e708:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2202      	movs	r2, #2
 800e70e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e710:	2301      	movs	r3, #1
 800e712:	75fb      	strb	r3, [r7, #23]
      break;
 800e714:	e018      	b.n	800e748 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f000 f81c 	bl	800e754 <USBH_HandleControl>
 800e71c:	4603      	mov	r3, r0
 800e71e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e720:	7dfb      	ldrb	r3, [r7, #23]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d002      	beq.n	800e72c <USBH_CtlReq+0x54>
 800e726:	7dfb      	ldrb	r3, [r7, #23]
 800e728:	2b03      	cmp	r3, #3
 800e72a:	d106      	bne.n	800e73a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2201      	movs	r2, #1
 800e730:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2200      	movs	r2, #0
 800e736:	761a      	strb	r2, [r3, #24]
      break;
 800e738:	e005      	b.n	800e746 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e73a:	7dfb      	ldrb	r3, [r7, #23]
 800e73c:	2b02      	cmp	r3, #2
 800e73e:	d102      	bne.n	800e746 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2201      	movs	r2, #1
 800e744:	709a      	strb	r2, [r3, #2]
      break;
 800e746:	bf00      	nop
  }
  return status;
 800e748:	7dfb      	ldrb	r3, [r7, #23]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3718      	adds	r7, #24
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
	...

0800e754 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af02      	add	r7, sp, #8
 800e75a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e75c:	2301      	movs	r3, #1
 800e75e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e760:	2300      	movs	r3, #0
 800e762:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	7e1b      	ldrb	r3, [r3, #24]
 800e768:	3b01      	subs	r3, #1
 800e76a:	2b0a      	cmp	r3, #10
 800e76c:	f200 8156 	bhi.w	800ea1c <USBH_HandleControl+0x2c8>
 800e770:	a201      	add	r2, pc, #4	; (adr r2, 800e778 <USBH_HandleControl+0x24>)
 800e772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e776:	bf00      	nop
 800e778:	0800e7a5 	.word	0x0800e7a5
 800e77c:	0800e7bf 	.word	0x0800e7bf
 800e780:	0800e829 	.word	0x0800e829
 800e784:	0800e84f 	.word	0x0800e84f
 800e788:	0800e887 	.word	0x0800e887
 800e78c:	0800e8b1 	.word	0x0800e8b1
 800e790:	0800e903 	.word	0x0800e903
 800e794:	0800e925 	.word	0x0800e925
 800e798:	0800e961 	.word	0x0800e961
 800e79c:	0800e987 	.word	0x0800e987
 800e7a0:	0800e9c5 	.word	0x0800e9c5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f103 0110 	add.w	r1, r3, #16
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	795b      	ldrb	r3, [r3, #5]
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f943 	bl	800ea3c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2202      	movs	r2, #2
 800e7ba:	761a      	strb	r2, [r3, #24]
      break;
 800e7bc:	e139      	b.n	800ea32 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	795b      	ldrb	r3, [r3, #5]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 fc79 	bl	800f0bc <USBH_LL_GetURBState>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e7ce:	7bbb      	ldrb	r3, [r7, #14]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d11e      	bne.n	800e812 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7c1b      	ldrb	r3, [r3, #16]
 800e7d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e7dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	8adb      	ldrh	r3, [r3, #22]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00a      	beq.n	800e7fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e7e6:	7b7b      	ldrb	r3, [r7, #13]
 800e7e8:	2b80      	cmp	r3, #128	; 0x80
 800e7ea:	d103      	bne.n	800e7f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2203      	movs	r2, #3
 800e7f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e7f2:	e115      	b.n	800ea20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2205      	movs	r2, #5
 800e7f8:	761a      	strb	r2, [r3, #24]
      break;
 800e7fa:	e111      	b.n	800ea20 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e7fc:	7b7b      	ldrb	r3, [r7, #13]
 800e7fe:	2b80      	cmp	r3, #128	; 0x80
 800e800:	d103      	bne.n	800e80a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2209      	movs	r2, #9
 800e806:	761a      	strb	r2, [r3, #24]
      break;
 800e808:	e10a      	b.n	800ea20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2207      	movs	r2, #7
 800e80e:	761a      	strb	r2, [r3, #24]
      break;
 800e810:	e106      	b.n	800ea20 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e812:	7bbb      	ldrb	r3, [r7, #14]
 800e814:	2b04      	cmp	r3, #4
 800e816:	d003      	beq.n	800e820 <USBH_HandleControl+0xcc>
 800e818:	7bbb      	ldrb	r3, [r7, #14]
 800e81a:	2b02      	cmp	r3, #2
 800e81c:	f040 8100 	bne.w	800ea20 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	220b      	movs	r2, #11
 800e824:	761a      	strb	r2, [r3, #24]
      break;
 800e826:	e0fb      	b.n	800ea20 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e82e:	b29a      	uxth	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6899      	ldr	r1, [r3, #8]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	899a      	ldrh	r2, [r3, #12]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	791b      	ldrb	r3, [r3, #4]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 f93a 	bl	800eaba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2204      	movs	r2, #4
 800e84a:	761a      	strb	r2, [r3, #24]
      break;
 800e84c:	e0f1      	b.n	800ea32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	791b      	ldrb	r3, [r3, #4]
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 fc31 	bl	800f0bc <USBH_LL_GetURBState>
 800e85a:	4603      	mov	r3, r0
 800e85c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e85e:	7bbb      	ldrb	r3, [r7, #14]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d102      	bne.n	800e86a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2209      	movs	r2, #9
 800e868:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e86a:	7bbb      	ldrb	r3, [r7, #14]
 800e86c:	2b05      	cmp	r3, #5
 800e86e:	d102      	bne.n	800e876 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e870:	2303      	movs	r3, #3
 800e872:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e874:	e0d6      	b.n	800ea24 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e876:	7bbb      	ldrb	r3, [r7, #14]
 800e878:	2b04      	cmp	r3, #4
 800e87a:	f040 80d3 	bne.w	800ea24 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	220b      	movs	r2, #11
 800e882:	761a      	strb	r2, [r3, #24]
      break;
 800e884:	e0ce      	b.n	800ea24 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6899      	ldr	r1, [r3, #8]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	899a      	ldrh	r2, [r3, #12]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	795b      	ldrb	r3, [r3, #5]
 800e892:	2001      	movs	r0, #1
 800e894:	9000      	str	r0, [sp, #0]
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f000 f8ea 	bl	800ea70 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2206      	movs	r2, #6
 800e8ac:	761a      	strb	r2, [r3, #24]
      break;
 800e8ae:	e0c0      	b.n	800ea32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	795b      	ldrb	r3, [r3, #5]
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 fc00 	bl	800f0bc <USBH_LL_GetURBState>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e8c0:	7bbb      	ldrb	r3, [r7, #14]
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d103      	bne.n	800e8ce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2207      	movs	r2, #7
 800e8ca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e8cc:	e0ac      	b.n	800ea28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e8ce:	7bbb      	ldrb	r3, [r7, #14]
 800e8d0:	2b05      	cmp	r3, #5
 800e8d2:	d105      	bne.n	800e8e0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	220c      	movs	r2, #12
 800e8d8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e8da:	2303      	movs	r3, #3
 800e8dc:	73fb      	strb	r3, [r7, #15]
      break;
 800e8de:	e0a3      	b.n	800ea28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e8e0:	7bbb      	ldrb	r3, [r7, #14]
 800e8e2:	2b02      	cmp	r3, #2
 800e8e4:	d103      	bne.n	800e8ee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2205      	movs	r2, #5
 800e8ea:	761a      	strb	r2, [r3, #24]
      break;
 800e8ec:	e09c      	b.n	800ea28 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e8ee:	7bbb      	ldrb	r3, [r7, #14]
 800e8f0:	2b04      	cmp	r3, #4
 800e8f2:	f040 8099 	bne.w	800ea28 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	220b      	movs	r2, #11
 800e8fa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e8fc:	2302      	movs	r3, #2
 800e8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e900:	e092      	b.n	800ea28 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	791b      	ldrb	r3, [r3, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	2100      	movs	r1, #0
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 f8d5 	bl	800eaba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e916:	b29a      	uxth	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2208      	movs	r2, #8
 800e920:	761a      	strb	r2, [r3, #24]

      break;
 800e922:	e086      	b.n	800ea32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	791b      	ldrb	r3, [r3, #4]
 800e928:	4619      	mov	r1, r3
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 fbc6 	bl	800f0bc <USBH_LL_GetURBState>
 800e930:	4603      	mov	r3, r0
 800e932:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e934:	7bbb      	ldrb	r3, [r7, #14]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d105      	bne.n	800e946 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	220d      	movs	r2, #13
 800e93e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e940:	2300      	movs	r3, #0
 800e942:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e944:	e072      	b.n	800ea2c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e946:	7bbb      	ldrb	r3, [r7, #14]
 800e948:	2b04      	cmp	r3, #4
 800e94a:	d103      	bne.n	800e954 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	220b      	movs	r2, #11
 800e950:	761a      	strb	r2, [r3, #24]
      break;
 800e952:	e06b      	b.n	800ea2c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e954:	7bbb      	ldrb	r3, [r7, #14]
 800e956:	2b05      	cmp	r3, #5
 800e958:	d168      	bne.n	800ea2c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e95a:	2303      	movs	r3, #3
 800e95c:	73fb      	strb	r3, [r7, #15]
      break;
 800e95e:	e065      	b.n	800ea2c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	795b      	ldrb	r3, [r3, #5]
 800e964:	2201      	movs	r2, #1
 800e966:	9200      	str	r2, [sp, #0]
 800e968:	2200      	movs	r2, #0
 800e96a:	2100      	movs	r1, #0
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f87f 	bl	800ea70 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e978:	b29a      	uxth	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	220a      	movs	r2, #10
 800e982:	761a      	strb	r2, [r3, #24]
      break;
 800e984:	e055      	b.n	800ea32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	795b      	ldrb	r3, [r3, #5]
 800e98a:	4619      	mov	r1, r3
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 fb95 	bl	800f0bc <USBH_LL_GetURBState>
 800e992:	4603      	mov	r3, r0
 800e994:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e996:	7bbb      	ldrb	r3, [r7, #14]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d105      	bne.n	800e9a8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	220d      	movs	r2, #13
 800e9a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e9a6:	e043      	b.n	800ea30 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e9a8:	7bbb      	ldrb	r3, [r7, #14]
 800e9aa:	2b02      	cmp	r3, #2
 800e9ac:	d103      	bne.n	800e9b6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2209      	movs	r2, #9
 800e9b2:	761a      	strb	r2, [r3, #24]
      break;
 800e9b4:	e03c      	b.n	800ea30 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e9b6:	7bbb      	ldrb	r3, [r7, #14]
 800e9b8:	2b04      	cmp	r3, #4
 800e9ba:	d139      	bne.n	800ea30 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	220b      	movs	r2, #11
 800e9c0:	761a      	strb	r2, [r3, #24]
      break;
 800e9c2:	e035      	b.n	800ea30 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	7e5b      	ldrb	r3, [r3, #25]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	765a      	strb	r2, [r3, #25]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	7e5b      	ldrb	r3, [r3, #25]
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	d806      	bhi.n	800e9e6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e9e4:	e025      	b.n	800ea32 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9ec:	2106      	movs	r1, #6
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	795b      	ldrb	r3, [r3, #5]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 f90c 	bl	800ec1c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	791b      	ldrb	r3, [r3, #4]
 800ea08:	4619      	mov	r1, r3
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 f906 	bl	800ec1c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ea16:	2302      	movs	r3, #2
 800ea18:	73fb      	strb	r3, [r7, #15]
      break;
 800ea1a:	e00a      	b.n	800ea32 <USBH_HandleControl+0x2de>

    default:
      break;
 800ea1c:	bf00      	nop
 800ea1e:	e008      	b.n	800ea32 <USBH_HandleControl+0x2de>
      break;
 800ea20:	bf00      	nop
 800ea22:	e006      	b.n	800ea32 <USBH_HandleControl+0x2de>
      break;
 800ea24:	bf00      	nop
 800ea26:	e004      	b.n	800ea32 <USBH_HandleControl+0x2de>
      break;
 800ea28:	bf00      	nop
 800ea2a:	e002      	b.n	800ea32 <USBH_HandleControl+0x2de>
      break;
 800ea2c:	bf00      	nop
 800ea2e:	e000      	b.n	800ea32 <USBH_HandleControl+0x2de>
      break;
 800ea30:	bf00      	nop
  }

  return status;
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b088      	sub	sp, #32
 800ea40:	af04      	add	r7, sp, #16
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	4613      	mov	r3, r2
 800ea48:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ea4a:	79f9      	ldrb	r1, [r7, #7]
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	9303      	str	r3, [sp, #12]
 800ea50:	2308      	movs	r3, #8
 800ea52:	9302      	str	r3, [sp, #8]
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	9301      	str	r3, [sp, #4]
 800ea58:	2300      	movs	r3, #0
 800ea5a:	9300      	str	r3, [sp, #0]
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	2200      	movs	r2, #0
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f000 fafa 	bl	800f05a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ea66:	2300      	movs	r3, #0
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3710      	adds	r7, #16
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b088      	sub	sp, #32
 800ea74:	af04      	add	r7, sp, #16
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	460b      	mov	r3, r1
 800ea80:	80fb      	strh	r3, [r7, #6]
 800ea82:	4613      	mov	r3, r2
 800ea84:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d001      	beq.n	800ea94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ea90:	2300      	movs	r3, #0
 800ea92:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ea94:	7979      	ldrb	r1, [r7, #5]
 800ea96:	7e3b      	ldrb	r3, [r7, #24]
 800ea98:	9303      	str	r3, [sp, #12]
 800ea9a:	88fb      	ldrh	r3, [r7, #6]
 800ea9c:	9302      	str	r3, [sp, #8]
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	9301      	str	r3, [sp, #4]
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f000 fad5 	bl	800f05a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b088      	sub	sp, #32
 800eabe:	af04      	add	r7, sp, #16
 800eac0:	60f8      	str	r0, [r7, #12]
 800eac2:	60b9      	str	r1, [r7, #8]
 800eac4:	4611      	mov	r1, r2
 800eac6:	461a      	mov	r2, r3
 800eac8:	460b      	mov	r3, r1
 800eaca:	80fb      	strh	r3, [r7, #6]
 800eacc:	4613      	mov	r3, r2
 800eace:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ead0:	7979      	ldrb	r1, [r7, #5]
 800ead2:	2300      	movs	r3, #0
 800ead4:	9303      	str	r3, [sp, #12]
 800ead6:	88fb      	ldrh	r3, [r7, #6]
 800ead8:	9302      	str	r3, [sp, #8]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	9301      	str	r3, [sp, #4]
 800eade:	2301      	movs	r3, #1
 800eae0:	9300      	str	r3, [sp, #0]
 800eae2:	2300      	movs	r3, #0
 800eae4:	2201      	movs	r2, #1
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f000 fab7 	bl	800f05a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800eaec:	2300      	movs	r3, #0

}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b088      	sub	sp, #32
 800eafa:	af04      	add	r7, sp, #16
 800eafc:	60f8      	str	r0, [r7, #12]
 800eafe:	60b9      	str	r1, [r7, #8]
 800eb00:	4611      	mov	r1, r2
 800eb02:	461a      	mov	r2, r3
 800eb04:	460b      	mov	r3, r1
 800eb06:	80fb      	strh	r3, [r7, #6]
 800eb08:	4613      	mov	r3, r2
 800eb0a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800eb16:	2300      	movs	r3, #0
 800eb18:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eb1a:	7979      	ldrb	r1, [r7, #5]
 800eb1c:	7e3b      	ldrb	r3, [r7, #24]
 800eb1e:	9303      	str	r3, [sp, #12]
 800eb20:	88fb      	ldrh	r3, [r7, #6]
 800eb22:	9302      	str	r3, [sp, #8]
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	9301      	str	r3, [sp, #4]
 800eb28:	2301      	movs	r3, #1
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	2200      	movs	r2, #0
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f000 fa92 	bl	800f05a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b088      	sub	sp, #32
 800eb44:	af04      	add	r7, sp, #16
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	460b      	mov	r3, r1
 800eb50:	80fb      	strh	r3, [r7, #6]
 800eb52:	4613      	mov	r3, r2
 800eb54:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eb56:	7979      	ldrb	r1, [r7, #5]
 800eb58:	2300      	movs	r3, #0
 800eb5a:	9303      	str	r3, [sp, #12]
 800eb5c:	88fb      	ldrh	r3, [r7, #6]
 800eb5e:	9302      	str	r3, [sp, #8]
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	9301      	str	r3, [sp, #4]
 800eb64:	2301      	movs	r3, #1
 800eb66:	9300      	str	r3, [sp, #0]
 800eb68:	2302      	movs	r3, #2
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f000 fa74 	bl	800f05a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800eb72:	2300      	movs	r3, #0
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b086      	sub	sp, #24
 800eb80:	af04      	add	r7, sp, #16
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	4608      	mov	r0, r1
 800eb86:	4611      	mov	r1, r2
 800eb88:	461a      	mov	r2, r3
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	70fb      	strb	r3, [r7, #3]
 800eb8e:	460b      	mov	r3, r1
 800eb90:	70bb      	strb	r3, [r7, #2]
 800eb92:	4613      	mov	r3, r2
 800eb94:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800eb96:	7878      	ldrb	r0, [r7, #1]
 800eb98:	78ba      	ldrb	r2, [r7, #2]
 800eb9a:	78f9      	ldrb	r1, [r7, #3]
 800eb9c:	8b3b      	ldrh	r3, [r7, #24]
 800eb9e:	9302      	str	r3, [sp, #8]
 800eba0:	7d3b      	ldrb	r3, [r7, #20]
 800eba2:	9301      	str	r3, [sp, #4]
 800eba4:	7c3b      	ldrb	r3, [r7, #16]
 800eba6:	9300      	str	r3, [sp, #0]
 800eba8:	4603      	mov	r3, r0
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 fa07 	bl	800efbe <USBH_LL_OpenPipe>

  return USBH_OK;
 800ebb0:	2300      	movs	r3, #0
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3708      	adds	r7, #8
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b082      	sub	sp, #8
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ebc6:	78fb      	ldrb	r3, [r7, #3]
 800ebc8:	4619      	mov	r1, r3
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fa26 	bl	800f01c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3708      	adds	r7, #8
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b084      	sub	sp, #16
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 f836 	bl	800ec58 <USBH_GetFreePipe>
 800ebec:	4603      	mov	r3, r0
 800ebee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ebf0:	89fb      	ldrh	r3, [r7, #14]
 800ebf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d00a      	beq.n	800ec10 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ebfa:	78fa      	ldrb	r2, [r7, #3]
 800ebfc:	89fb      	ldrh	r3, [r7, #14]
 800ebfe:	f003 030f 	and.w	r3, r3, #15
 800ec02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec06:	6879      	ldr	r1, [r7, #4]
 800ec08:	33e0      	adds	r3, #224	; 0xe0
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	440b      	add	r3, r1
 800ec0e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ec10:	89fb      	ldrh	r3, [r7, #14]
 800ec12:	b2db      	uxtb	r3, r3
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	460b      	mov	r3, r1
 800ec26:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ec28:	78fb      	ldrb	r3, [r7, #3]
 800ec2a:	2b0f      	cmp	r3, #15
 800ec2c:	d80d      	bhi.n	800ec4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ec2e:	78fb      	ldrb	r3, [r7, #3]
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	33e0      	adds	r3, #224	; 0xe0
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	4413      	add	r3, r2
 800ec38:	685a      	ldr	r2, [r3, #4]
 800ec3a:	78fb      	ldrb	r3, [r7, #3]
 800ec3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ec40:	6879      	ldr	r1, [r7, #4]
 800ec42:	33e0      	adds	r3, #224	; 0xe0
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	440b      	add	r3, r1
 800ec48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ec4a:	2300      	movs	r3, #0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	370c      	adds	r7, #12
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ec60:	2300      	movs	r3, #0
 800ec62:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ec64:	2300      	movs	r3, #0
 800ec66:	73fb      	strb	r3, [r7, #15]
 800ec68:	e00f      	b.n	800ec8a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	33e0      	adds	r3, #224	; 0xe0
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	4413      	add	r3, r2
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d102      	bne.n	800ec84 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ec7e:	7bfb      	ldrb	r3, [r7, #15]
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	e007      	b.n	800ec94 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ec84:	7bfb      	ldrb	r3, [r7, #15]
 800ec86:	3301      	adds	r3, #1
 800ec88:	73fb      	strb	r3, [r7, #15]
 800ec8a:	7bfb      	ldrb	r3, [r7, #15]
 800ec8c:	2b0f      	cmp	r3, #15
 800ec8e:	d9ec      	bls.n	800ec6a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ec90:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800eca4:	2201      	movs	r2, #1
 800eca6:	490e      	ldr	r1, [pc, #56]	; (800ece0 <MX_USB_HOST_Init+0x40>)
 800eca8:	480e      	ldr	r0, [pc, #56]	; (800ece4 <MX_USB_HOST_Init+0x44>)
 800ecaa:	f7ff fb37 	bl	800e31c <USBH_Init>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d001      	beq.n	800ecb8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ecb4:	f7f9 fe58 	bl	8008968 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ecb8:	490b      	ldr	r1, [pc, #44]	; (800ece8 <MX_USB_HOST_Init+0x48>)
 800ecba:	480a      	ldr	r0, [pc, #40]	; (800ece4 <MX_USB_HOST_Init+0x44>)
 800ecbc:	f7ff fbbc 	bl	800e438 <USBH_RegisterClass>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d001      	beq.n	800ecca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ecc6:	f7f9 fe4f 	bl	8008968 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ecca:	4806      	ldr	r0, [pc, #24]	; (800ece4 <MX_USB_HOST_Init+0x44>)
 800eccc:	f7ff fc40 	bl	800e550 <USBH_Start>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ecd6:	f7f9 fe47 	bl	8008968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ecda:	bf00      	nop
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	0800eced 	.word	0x0800eced
 800ece4:	200001e8 	.word	0x200001e8
 800ece8:	2000001c 	.word	0x2000001c

0800ecec <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ecf8:	78fb      	ldrb	r3, [r7, #3]
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	2b04      	cmp	r3, #4
 800ecfe:	d819      	bhi.n	800ed34 <USBH_UserProcess+0x48>
 800ed00:	a201      	add	r2, pc, #4	; (adr r2, 800ed08 <USBH_UserProcess+0x1c>)
 800ed02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed06:	bf00      	nop
 800ed08:	0800ed35 	.word	0x0800ed35
 800ed0c:	0800ed25 	.word	0x0800ed25
 800ed10:	0800ed35 	.word	0x0800ed35
 800ed14:	0800ed2d 	.word	0x0800ed2d
 800ed18:	0800ed1d 	.word	0x0800ed1d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ed1c:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <USBH_UserProcess+0x58>)
 800ed1e:	2203      	movs	r2, #3
 800ed20:	701a      	strb	r2, [r3, #0]
  break;
 800ed22:	e008      	b.n	800ed36 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ed24:	4b07      	ldr	r3, [pc, #28]	; (800ed44 <USBH_UserProcess+0x58>)
 800ed26:	2202      	movs	r2, #2
 800ed28:	701a      	strb	r2, [r3, #0]
  break;
 800ed2a:	e004      	b.n	800ed36 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ed2c:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <USBH_UserProcess+0x58>)
 800ed2e:	2201      	movs	r2, #1
 800ed30:	701a      	strb	r2, [r3, #0]
  break;
 800ed32:	e000      	b.n	800ed36 <USBH_UserProcess+0x4a>

  default:
  break;
 800ed34:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ed36:	bf00      	nop
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	200005c0 	.word	0x200005c0

0800ed48 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b08a      	sub	sp, #40	; 0x28
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed50:	f107 0314 	add.w	r3, r7, #20
 800ed54:	2200      	movs	r2, #0
 800ed56:	601a      	str	r2, [r3, #0]
 800ed58:	605a      	str	r2, [r3, #4]
 800ed5a:	609a      	str	r2, [r3, #8]
 800ed5c:	60da      	str	r2, [r3, #12]
 800ed5e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed68:	d147      	bne.n	800edfa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	613b      	str	r3, [r7, #16]
 800ed6e:	4b25      	ldr	r3, [pc, #148]	; (800ee04 <HAL_HCD_MspInit+0xbc>)
 800ed70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed72:	4a24      	ldr	r2, [pc, #144]	; (800ee04 <HAL_HCD_MspInit+0xbc>)
 800ed74:	f043 0301 	orr.w	r3, r3, #1
 800ed78:	6313      	str	r3, [r2, #48]	; 0x30
 800ed7a:	4b22      	ldr	r3, [pc, #136]	; (800ee04 <HAL_HCD_MspInit+0xbc>)
 800ed7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	613b      	str	r3, [r7, #16]
 800ed84:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ed86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed90:	2300      	movs	r3, #0
 800ed92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ed94:	f107 0314 	add.w	r3, r7, #20
 800ed98:	4619      	mov	r1, r3
 800ed9a:	481b      	ldr	r0, [pc, #108]	; (800ee08 <HAL_HCD_MspInit+0xc0>)
 800ed9c:	f7fa f9bc 	bl	8009118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800eda0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800eda4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eda6:	2302      	movs	r3, #2
 800eda8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edaa:	2300      	movs	r3, #0
 800edac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800edae:	2300      	movs	r3, #0
 800edb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800edb2:	230a      	movs	r3, #10
 800edb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edb6:	f107 0314 	add.w	r3, r7, #20
 800edba:	4619      	mov	r1, r3
 800edbc:	4812      	ldr	r0, [pc, #72]	; (800ee08 <HAL_HCD_MspInit+0xc0>)
 800edbe:	f7fa f9ab 	bl	8009118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800edc2:	4b10      	ldr	r3, [pc, #64]	; (800ee04 <HAL_HCD_MspInit+0xbc>)
 800edc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edc6:	4a0f      	ldr	r2, [pc, #60]	; (800ee04 <HAL_HCD_MspInit+0xbc>)
 800edc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edcc:	6353      	str	r3, [r2, #52]	; 0x34
 800edce:	2300      	movs	r3, #0
 800edd0:	60fb      	str	r3, [r7, #12]
 800edd2:	4b0c      	ldr	r3, [pc, #48]	; (800ee04 <HAL_HCD_MspInit+0xbc>)
 800edd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edd6:	4a0b      	ldr	r2, [pc, #44]	; (800ee04 <HAL_HCD_MspInit+0xbc>)
 800edd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eddc:	6453      	str	r3, [r2, #68]	; 0x44
 800edde:	4b09      	ldr	r3, [pc, #36]	; (800ee04 <HAL_HCD_MspInit+0xbc>)
 800ede0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ede2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ede6:	60fb      	str	r3, [r7, #12]
 800ede8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800edea:	2200      	movs	r2, #0
 800edec:	2100      	movs	r1, #0
 800edee:	2043      	movs	r0, #67	; 0x43
 800edf0:	f7fa f95b 	bl	80090aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800edf4:	2043      	movs	r0, #67	; 0x43
 800edf6:	f7fa f974 	bl	80090e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800edfa:	bf00      	nop
 800edfc:	3728      	adds	r7, #40	; 0x28
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	40023800 	.word	0x40023800
 800ee08:	40020000 	.word	0x40020000

0800ee0c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff fbb7 	bl	800e58e <USBH_LL_IncTimer>
}
 800ee20:	bf00      	nop
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7ff fbef 	bl	800e61a <USBH_LL_Connect>
}
 800ee3c:	bf00      	nop
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff fbf8 	bl	800e648 <USBH_LL_Disconnect>
}
 800ee58:	bf00      	nop
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	70fb      	strb	r3, [r7, #3]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7ff fba9 	bl	800e5e2 <USBH_LL_PortEnabled>
}
 800ee90:	bf00      	nop
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fba9 	bl	800e5fe <USBH_LL_PortDisabled>
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d12a      	bne.n	800ef1c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800eec6:	4a18      	ldr	r2, [pc, #96]	; (800ef28 <USBH_LL_Init+0x74>)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4a15      	ldr	r2, [pc, #84]	; (800ef28 <USBH_LL_Init+0x74>)
 800eed2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eed6:	4b14      	ldr	r3, [pc, #80]	; (800ef28 <USBH_LL_Init+0x74>)
 800eed8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eedc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800eede:	4b12      	ldr	r3, [pc, #72]	; (800ef28 <USBH_LL_Init+0x74>)
 800eee0:	2208      	movs	r2, #8
 800eee2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800eee4:	4b10      	ldr	r3, [pc, #64]	; (800ef28 <USBH_LL_Init+0x74>)
 800eee6:	2201      	movs	r2, #1
 800eee8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eeea:	4b0f      	ldr	r3, [pc, #60]	; (800ef28 <USBH_LL_Init+0x74>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800eef0:	4b0d      	ldr	r3, [pc, #52]	; (800ef28 <USBH_LL_Init+0x74>)
 800eef2:	2202      	movs	r2, #2
 800eef4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eef6:	4b0c      	ldr	r3, [pc, #48]	; (800ef28 <USBH_LL_Init+0x74>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800eefc:	480a      	ldr	r0, [pc, #40]	; (800ef28 <USBH_LL_Init+0x74>)
 800eefe:	f7fa fac0 	bl	8009482 <HAL_HCD_Init>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d001      	beq.n	800ef0c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ef08:	f7f9 fd2e 	bl	8008968 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ef0c:	4806      	ldr	r0, [pc, #24]	; (800ef28 <USBH_LL_Init+0x74>)
 800ef0e:	f7fa fe96 	bl	8009c3e <HAL_HCD_GetCurrentFrame>
 800ef12:	4603      	mov	r3, r0
 800ef14:	4619      	mov	r1, r3
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7ff fb2a 	bl	800e570 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3708      	adds	r7, #8
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	200005c4 	.word	0x200005c4

0800ef2c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fa fe13 	bl	8009b6e <HAL_HCD_Start>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef4c:	7bfb      	ldrb	r3, [r7, #15]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f000 f90e 	bl	800f170 <USBH_Get_USB_Status>
 800ef54:	4603      	mov	r3, r0
 800ef56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b084      	sub	sp, #16
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fa fe1b 	bl	8009bb4 <HAL_HCD_Stop>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef82:	7bfb      	ldrb	r3, [r7, #15]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f000 f8f3 	bl	800f170 <USBH_Get_USB_Status>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efaa:	78fa      	ldrb	r2, [r7, #3]
 800efac:	4611      	mov	r1, r2
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fa fe31 	bl	8009c16 <HAL_HCD_HC_GetXferCount>
 800efb4:	4603      	mov	r3, r0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3708      	adds	r7, #8
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}

0800efbe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800efbe:	b590      	push	{r4, r7, lr}
 800efc0:	b089      	sub	sp, #36	; 0x24
 800efc2:	af04      	add	r7, sp, #16
 800efc4:	6078      	str	r0, [r7, #4]
 800efc6:	4608      	mov	r0, r1
 800efc8:	4611      	mov	r1, r2
 800efca:	461a      	mov	r2, r3
 800efcc:	4603      	mov	r3, r0
 800efce:	70fb      	strb	r3, [r7, #3]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70bb      	strb	r3, [r7, #2]
 800efd4:	4613      	mov	r3, r2
 800efd6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efd8:	2300      	movs	r3, #0
 800efda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800efe6:	787c      	ldrb	r4, [r7, #1]
 800efe8:	78ba      	ldrb	r2, [r7, #2]
 800efea:	78f9      	ldrb	r1, [r7, #3]
 800efec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efee:	9302      	str	r3, [sp, #8]
 800eff0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eff4:	9301      	str	r3, [sp, #4]
 800eff6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800effa:	9300      	str	r3, [sp, #0]
 800effc:	4623      	mov	r3, r4
 800effe:	f7fa faa2 	bl	8009546 <HAL_HCD_HC_Init>
 800f002:	4603      	mov	r3, r0
 800f004:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f006:	7bfb      	ldrb	r3, [r7, #15]
 800f008:	4618      	mov	r0, r3
 800f00a:	f000 f8b1 	bl	800f170 <USBH_Get_USB_Status>
 800f00e:	4603      	mov	r3, r0
 800f010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f012:	7bbb      	ldrb	r3, [r7, #14]
}
 800f014:	4618      	mov	r0, r3
 800f016:	3714      	adds	r7, #20
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd90      	pop	{r4, r7, pc}

0800f01c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	460b      	mov	r3, r1
 800f026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f02c:	2300      	movs	r3, #0
 800f02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f036:	78fa      	ldrb	r2, [r7, #3]
 800f038:	4611      	mov	r1, r2
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fa fb12 	bl	8009664 <HAL_HCD_HC_Halt>
 800f040:	4603      	mov	r3, r0
 800f042:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f044:	7bfb      	ldrb	r3, [r7, #15]
 800f046:	4618      	mov	r0, r3
 800f048:	f000 f892 	bl	800f170 <USBH_Get_USB_Status>
 800f04c:	4603      	mov	r3, r0
 800f04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f050:	7bbb      	ldrb	r3, [r7, #14]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3710      	adds	r7, #16
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f05a:	b590      	push	{r4, r7, lr}
 800f05c:	b089      	sub	sp, #36	; 0x24
 800f05e:	af04      	add	r7, sp, #16
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	4608      	mov	r0, r1
 800f064:	4611      	mov	r1, r2
 800f066:	461a      	mov	r2, r3
 800f068:	4603      	mov	r3, r0
 800f06a:	70fb      	strb	r3, [r7, #3]
 800f06c:	460b      	mov	r3, r1
 800f06e:	70bb      	strb	r3, [r7, #2]
 800f070:	4613      	mov	r3, r2
 800f072:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f078:	2300      	movs	r3, #0
 800f07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f082:	787c      	ldrb	r4, [r7, #1]
 800f084:	78ba      	ldrb	r2, [r7, #2]
 800f086:	78f9      	ldrb	r1, [r7, #3]
 800f088:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f08c:	9303      	str	r3, [sp, #12]
 800f08e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f090:	9302      	str	r3, [sp, #8]
 800f092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f094:	9301      	str	r3, [sp, #4]
 800f096:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	4623      	mov	r3, r4
 800f09e:	f7fa fb05 	bl	80096ac <HAL_HCD_HC_SubmitRequest>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f0a6:	7bfb      	ldrb	r3, [r7, #15]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 f861 	bl	800f170 <USBH_Get_USB_Status>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3714      	adds	r7, #20
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd90      	pop	{r4, r7, pc}

0800f0bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0ce:	78fa      	ldrb	r2, [r7, #3]
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fa fd8b 	bl	8009bee <HAL_HCD_HC_GetURBState>
 800f0d8:	4603      	mov	r3, r0
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3708      	adds	r7, #8
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b082      	sub	sp, #8
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d103      	bne.n	800f100 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f0f8:	78fb      	ldrb	r3, [r7, #3]
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f000 f864 	bl	800f1c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f100:	20c8      	movs	r0, #200	; 0xc8
 800f102:	f7f9 fed3 	bl	8008eac <HAL_Delay>
  return USBH_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3708      	adds	r7, #8
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	460b      	mov	r3, r1
 800f11a:	70fb      	strb	r3, [r7, #3]
 800f11c:	4613      	mov	r3, r2
 800f11e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f126:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f128:	78fb      	ldrb	r3, [r7, #3]
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	212c      	movs	r1, #44	; 0x2c
 800f12e:	fb01 f303 	mul.w	r3, r1, r3
 800f132:	4413      	add	r3, r2
 800f134:	333b      	adds	r3, #59	; 0x3b
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d009      	beq.n	800f150 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f13c:	78fb      	ldrb	r3, [r7, #3]
 800f13e:	68fa      	ldr	r2, [r7, #12]
 800f140:	212c      	movs	r1, #44	; 0x2c
 800f142:	fb01 f303 	mul.w	r3, r1, r3
 800f146:	4413      	add	r3, r2
 800f148:	3354      	adds	r3, #84	; 0x54
 800f14a:	78ba      	ldrb	r2, [r7, #2]
 800f14c:	701a      	strb	r2, [r3, #0]
 800f14e:	e008      	b.n	800f162 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f150:	78fb      	ldrb	r3, [r7, #3]
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	212c      	movs	r1, #44	; 0x2c
 800f156:	fb01 f303 	mul.w	r3, r1, r3
 800f15a:	4413      	add	r3, r2
 800f15c:	3355      	adds	r3, #85	; 0x55
 800f15e:	78ba      	ldrb	r2, [r7, #2]
 800f160:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	4603      	mov	r3, r0
 800f178:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f17a:	2300      	movs	r3, #0
 800f17c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f17e:	79fb      	ldrb	r3, [r7, #7]
 800f180:	2b03      	cmp	r3, #3
 800f182:	d817      	bhi.n	800f1b4 <USBH_Get_USB_Status+0x44>
 800f184:	a201      	add	r2, pc, #4	; (adr r2, 800f18c <USBH_Get_USB_Status+0x1c>)
 800f186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f18a:	bf00      	nop
 800f18c:	0800f19d 	.word	0x0800f19d
 800f190:	0800f1a3 	.word	0x0800f1a3
 800f194:	0800f1a9 	.word	0x0800f1a9
 800f198:	0800f1af 	.word	0x0800f1af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f19c:	2300      	movs	r3, #0
 800f19e:	73fb      	strb	r3, [r7, #15]
    break;
 800f1a0:	e00b      	b.n	800f1ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f1a2:	2302      	movs	r3, #2
 800f1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1a6:	e008      	b.n	800f1ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ac:	e005      	b.n	800f1ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f1ae:	2302      	movs	r3, #2
 800f1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f1b2:	e002      	b.n	800f1ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f1b4:	2302      	movs	r3, #2
 800f1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f1b8:	bf00      	nop
  }
  return usb_status;
 800f1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3714      	adds	r7, #20
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr

0800f1c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f1d6:	79fb      	ldrb	r3, [r7, #7]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d102      	bne.n	800f1e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	73fb      	strb	r3, [r7, #15]
 800f1e0:	e001      	b.n	800f1e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f1e6:	7bfb      	ldrb	r3, [r7, #15]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	2101      	movs	r1, #1
 800f1ec:	4803      	ldr	r0, [pc, #12]	; (800f1fc <MX_DriverVbusFS+0x34>)
 800f1ee:	f7fa f92f 	bl	8009450 <HAL_GPIO_WritePin>
}
 800f1f2:	bf00      	nop
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	40020800 	.word	0x40020800

0800f200 <malloc>:
 800f200:	4b02      	ldr	r3, [pc, #8]	; (800f20c <malloc+0xc>)
 800f202:	4601      	mov	r1, r0
 800f204:	6818      	ldr	r0, [r3, #0]
 800f206:	f000 b82b 	b.w	800f260 <_malloc_r>
 800f20a:	bf00      	nop
 800f20c:	20000088 	.word	0x20000088

0800f210 <free>:
 800f210:	4b02      	ldr	r3, [pc, #8]	; (800f21c <free+0xc>)
 800f212:	4601      	mov	r1, r0
 800f214:	6818      	ldr	r0, [r3, #0]
 800f216:	f000 b8f3 	b.w	800f400 <_free_r>
 800f21a:	bf00      	nop
 800f21c:	20000088 	.word	0x20000088

0800f220 <sbrk_aligned>:
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	4e0e      	ldr	r6, [pc, #56]	; (800f25c <sbrk_aligned+0x3c>)
 800f224:	460c      	mov	r4, r1
 800f226:	6831      	ldr	r1, [r6, #0]
 800f228:	4605      	mov	r5, r0
 800f22a:	b911      	cbnz	r1, 800f232 <sbrk_aligned+0x12>
 800f22c:	f000 f8ac 	bl	800f388 <_sbrk_r>
 800f230:	6030      	str	r0, [r6, #0]
 800f232:	4621      	mov	r1, r4
 800f234:	4628      	mov	r0, r5
 800f236:	f000 f8a7 	bl	800f388 <_sbrk_r>
 800f23a:	1c43      	adds	r3, r0, #1
 800f23c:	d00a      	beq.n	800f254 <sbrk_aligned+0x34>
 800f23e:	1cc4      	adds	r4, r0, #3
 800f240:	f024 0403 	bic.w	r4, r4, #3
 800f244:	42a0      	cmp	r0, r4
 800f246:	d007      	beq.n	800f258 <sbrk_aligned+0x38>
 800f248:	1a21      	subs	r1, r4, r0
 800f24a:	4628      	mov	r0, r5
 800f24c:	f000 f89c 	bl	800f388 <_sbrk_r>
 800f250:	3001      	adds	r0, #1
 800f252:	d101      	bne.n	800f258 <sbrk_aligned+0x38>
 800f254:	f04f 34ff 	mov.w	r4, #4294967295
 800f258:	4620      	mov	r0, r4
 800f25a:	bd70      	pop	{r4, r5, r6, pc}
 800f25c:	200008cc 	.word	0x200008cc

0800f260 <_malloc_r>:
 800f260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f264:	1ccd      	adds	r5, r1, #3
 800f266:	f025 0503 	bic.w	r5, r5, #3
 800f26a:	3508      	adds	r5, #8
 800f26c:	2d0c      	cmp	r5, #12
 800f26e:	bf38      	it	cc
 800f270:	250c      	movcc	r5, #12
 800f272:	2d00      	cmp	r5, #0
 800f274:	4607      	mov	r7, r0
 800f276:	db01      	blt.n	800f27c <_malloc_r+0x1c>
 800f278:	42a9      	cmp	r1, r5
 800f27a:	d905      	bls.n	800f288 <_malloc_r+0x28>
 800f27c:	230c      	movs	r3, #12
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	2600      	movs	r6, #0
 800f282:	4630      	mov	r0, r6
 800f284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f288:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f35c <_malloc_r+0xfc>
 800f28c:	f000 f868 	bl	800f360 <__malloc_lock>
 800f290:	f8d8 3000 	ldr.w	r3, [r8]
 800f294:	461c      	mov	r4, r3
 800f296:	bb5c      	cbnz	r4, 800f2f0 <_malloc_r+0x90>
 800f298:	4629      	mov	r1, r5
 800f29a:	4638      	mov	r0, r7
 800f29c:	f7ff ffc0 	bl	800f220 <sbrk_aligned>
 800f2a0:	1c43      	adds	r3, r0, #1
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	d155      	bne.n	800f352 <_malloc_r+0xf2>
 800f2a6:	f8d8 4000 	ldr.w	r4, [r8]
 800f2aa:	4626      	mov	r6, r4
 800f2ac:	2e00      	cmp	r6, #0
 800f2ae:	d145      	bne.n	800f33c <_malloc_r+0xdc>
 800f2b0:	2c00      	cmp	r4, #0
 800f2b2:	d048      	beq.n	800f346 <_malloc_r+0xe6>
 800f2b4:	6823      	ldr	r3, [r4, #0]
 800f2b6:	4631      	mov	r1, r6
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	eb04 0903 	add.w	r9, r4, r3
 800f2be:	f000 f863 	bl	800f388 <_sbrk_r>
 800f2c2:	4581      	cmp	r9, r0
 800f2c4:	d13f      	bne.n	800f346 <_malloc_r+0xe6>
 800f2c6:	6821      	ldr	r1, [r4, #0]
 800f2c8:	1a6d      	subs	r5, r5, r1
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	4638      	mov	r0, r7
 800f2ce:	f7ff ffa7 	bl	800f220 <sbrk_aligned>
 800f2d2:	3001      	adds	r0, #1
 800f2d4:	d037      	beq.n	800f346 <_malloc_r+0xe6>
 800f2d6:	6823      	ldr	r3, [r4, #0]
 800f2d8:	442b      	add	r3, r5
 800f2da:	6023      	str	r3, [r4, #0]
 800f2dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d038      	beq.n	800f356 <_malloc_r+0xf6>
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	42a2      	cmp	r2, r4
 800f2e8:	d12b      	bne.n	800f342 <_malloc_r+0xe2>
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	605a      	str	r2, [r3, #4]
 800f2ee:	e00f      	b.n	800f310 <_malloc_r+0xb0>
 800f2f0:	6822      	ldr	r2, [r4, #0]
 800f2f2:	1b52      	subs	r2, r2, r5
 800f2f4:	d41f      	bmi.n	800f336 <_malloc_r+0xd6>
 800f2f6:	2a0b      	cmp	r2, #11
 800f2f8:	d917      	bls.n	800f32a <_malloc_r+0xca>
 800f2fa:	1961      	adds	r1, r4, r5
 800f2fc:	42a3      	cmp	r3, r4
 800f2fe:	6025      	str	r5, [r4, #0]
 800f300:	bf18      	it	ne
 800f302:	6059      	strne	r1, [r3, #4]
 800f304:	6863      	ldr	r3, [r4, #4]
 800f306:	bf08      	it	eq
 800f308:	f8c8 1000 	streq.w	r1, [r8]
 800f30c:	5162      	str	r2, [r4, r5]
 800f30e:	604b      	str	r3, [r1, #4]
 800f310:	4638      	mov	r0, r7
 800f312:	f104 060b 	add.w	r6, r4, #11
 800f316:	f000 f829 	bl	800f36c <__malloc_unlock>
 800f31a:	f026 0607 	bic.w	r6, r6, #7
 800f31e:	1d23      	adds	r3, r4, #4
 800f320:	1af2      	subs	r2, r6, r3
 800f322:	d0ae      	beq.n	800f282 <_malloc_r+0x22>
 800f324:	1b9b      	subs	r3, r3, r6
 800f326:	50a3      	str	r3, [r4, r2]
 800f328:	e7ab      	b.n	800f282 <_malloc_r+0x22>
 800f32a:	42a3      	cmp	r3, r4
 800f32c:	6862      	ldr	r2, [r4, #4]
 800f32e:	d1dd      	bne.n	800f2ec <_malloc_r+0x8c>
 800f330:	f8c8 2000 	str.w	r2, [r8]
 800f334:	e7ec      	b.n	800f310 <_malloc_r+0xb0>
 800f336:	4623      	mov	r3, r4
 800f338:	6864      	ldr	r4, [r4, #4]
 800f33a:	e7ac      	b.n	800f296 <_malloc_r+0x36>
 800f33c:	4634      	mov	r4, r6
 800f33e:	6876      	ldr	r6, [r6, #4]
 800f340:	e7b4      	b.n	800f2ac <_malloc_r+0x4c>
 800f342:	4613      	mov	r3, r2
 800f344:	e7cc      	b.n	800f2e0 <_malloc_r+0x80>
 800f346:	230c      	movs	r3, #12
 800f348:	603b      	str	r3, [r7, #0]
 800f34a:	4638      	mov	r0, r7
 800f34c:	f000 f80e 	bl	800f36c <__malloc_unlock>
 800f350:	e797      	b.n	800f282 <_malloc_r+0x22>
 800f352:	6025      	str	r5, [r4, #0]
 800f354:	e7dc      	b.n	800f310 <_malloc_r+0xb0>
 800f356:	605b      	str	r3, [r3, #4]
 800f358:	deff      	udf	#255	; 0xff
 800f35a:	bf00      	nop
 800f35c:	200008c8 	.word	0x200008c8

0800f360 <__malloc_lock>:
 800f360:	4801      	ldr	r0, [pc, #4]	; (800f368 <__malloc_lock+0x8>)
 800f362:	f000 b84b 	b.w	800f3fc <__retarget_lock_acquire_recursive>
 800f366:	bf00      	nop
 800f368:	20000a0c 	.word	0x20000a0c

0800f36c <__malloc_unlock>:
 800f36c:	4801      	ldr	r0, [pc, #4]	; (800f374 <__malloc_unlock+0x8>)
 800f36e:	f000 b846 	b.w	800f3fe <__retarget_lock_release_recursive>
 800f372:	bf00      	nop
 800f374:	20000a0c 	.word	0x20000a0c

0800f378 <memset>:
 800f378:	4402      	add	r2, r0
 800f37a:	4603      	mov	r3, r0
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d100      	bne.n	800f382 <memset+0xa>
 800f380:	4770      	bx	lr
 800f382:	f803 1b01 	strb.w	r1, [r3], #1
 800f386:	e7f9      	b.n	800f37c <memset+0x4>

0800f388 <_sbrk_r>:
 800f388:	b538      	push	{r3, r4, r5, lr}
 800f38a:	4d06      	ldr	r5, [pc, #24]	; (800f3a4 <_sbrk_r+0x1c>)
 800f38c:	2300      	movs	r3, #0
 800f38e:	4604      	mov	r4, r0
 800f390:	4608      	mov	r0, r1
 800f392:	602b      	str	r3, [r5, #0]
 800f394:	f7f9 fca2 	bl	8008cdc <_sbrk>
 800f398:	1c43      	adds	r3, r0, #1
 800f39a:	d102      	bne.n	800f3a2 <_sbrk_r+0x1a>
 800f39c:	682b      	ldr	r3, [r5, #0]
 800f39e:	b103      	cbz	r3, 800f3a2 <_sbrk_r+0x1a>
 800f3a0:	6023      	str	r3, [r4, #0]
 800f3a2:	bd38      	pop	{r3, r4, r5, pc}
 800f3a4:	20000a08 	.word	0x20000a08

0800f3a8 <__errno>:
 800f3a8:	4b01      	ldr	r3, [pc, #4]	; (800f3b0 <__errno+0x8>)
 800f3aa:	6818      	ldr	r0, [r3, #0]
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	20000088 	.word	0x20000088

0800f3b4 <__libc_init_array>:
 800f3b4:	b570      	push	{r4, r5, r6, lr}
 800f3b6:	4d0d      	ldr	r5, [pc, #52]	; (800f3ec <__libc_init_array+0x38>)
 800f3b8:	4c0d      	ldr	r4, [pc, #52]	; (800f3f0 <__libc_init_array+0x3c>)
 800f3ba:	1b64      	subs	r4, r4, r5
 800f3bc:	10a4      	asrs	r4, r4, #2
 800f3be:	2600      	movs	r6, #0
 800f3c0:	42a6      	cmp	r6, r4
 800f3c2:	d109      	bne.n	800f3d8 <__libc_init_array+0x24>
 800f3c4:	4d0b      	ldr	r5, [pc, #44]	; (800f3f4 <__libc_init_array+0x40>)
 800f3c6:	4c0c      	ldr	r4, [pc, #48]	; (800f3f8 <__libc_init_array+0x44>)
 800f3c8:	f000 f866 	bl	800f498 <_init>
 800f3cc:	1b64      	subs	r4, r4, r5
 800f3ce:	10a4      	asrs	r4, r4, #2
 800f3d0:	2600      	movs	r6, #0
 800f3d2:	42a6      	cmp	r6, r4
 800f3d4:	d105      	bne.n	800f3e2 <__libc_init_array+0x2e>
 800f3d6:	bd70      	pop	{r4, r5, r6, pc}
 800f3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3dc:	4798      	blx	r3
 800f3de:	3601      	adds	r6, #1
 800f3e0:	e7ee      	b.n	800f3c0 <__libc_init_array+0xc>
 800f3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3e6:	4798      	blx	r3
 800f3e8:	3601      	adds	r6, #1
 800f3ea:	e7f2      	b.n	800f3d2 <__libc_init_array+0x1e>
 800f3ec:	0800f4d4 	.word	0x0800f4d4
 800f3f0:	0800f4d4 	.word	0x0800f4d4
 800f3f4:	0800f4d4 	.word	0x0800f4d4
 800f3f8:	0800f4d8 	.word	0x0800f4d8

0800f3fc <__retarget_lock_acquire_recursive>:
 800f3fc:	4770      	bx	lr

0800f3fe <__retarget_lock_release_recursive>:
 800f3fe:	4770      	bx	lr

0800f400 <_free_r>:
 800f400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f402:	2900      	cmp	r1, #0
 800f404:	d044      	beq.n	800f490 <_free_r+0x90>
 800f406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f40a:	9001      	str	r0, [sp, #4]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f1a1 0404 	sub.w	r4, r1, #4
 800f412:	bfb8      	it	lt
 800f414:	18e4      	addlt	r4, r4, r3
 800f416:	f7ff ffa3 	bl	800f360 <__malloc_lock>
 800f41a:	4a1e      	ldr	r2, [pc, #120]	; (800f494 <_free_r+0x94>)
 800f41c:	9801      	ldr	r0, [sp, #4]
 800f41e:	6813      	ldr	r3, [r2, #0]
 800f420:	b933      	cbnz	r3, 800f430 <_free_r+0x30>
 800f422:	6063      	str	r3, [r4, #4]
 800f424:	6014      	str	r4, [r2, #0]
 800f426:	b003      	add	sp, #12
 800f428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f42c:	f7ff bf9e 	b.w	800f36c <__malloc_unlock>
 800f430:	42a3      	cmp	r3, r4
 800f432:	d908      	bls.n	800f446 <_free_r+0x46>
 800f434:	6825      	ldr	r5, [r4, #0]
 800f436:	1961      	adds	r1, r4, r5
 800f438:	428b      	cmp	r3, r1
 800f43a:	bf01      	itttt	eq
 800f43c:	6819      	ldreq	r1, [r3, #0]
 800f43e:	685b      	ldreq	r3, [r3, #4]
 800f440:	1949      	addeq	r1, r1, r5
 800f442:	6021      	streq	r1, [r4, #0]
 800f444:	e7ed      	b.n	800f422 <_free_r+0x22>
 800f446:	461a      	mov	r2, r3
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	b10b      	cbz	r3, 800f450 <_free_r+0x50>
 800f44c:	42a3      	cmp	r3, r4
 800f44e:	d9fa      	bls.n	800f446 <_free_r+0x46>
 800f450:	6811      	ldr	r1, [r2, #0]
 800f452:	1855      	adds	r5, r2, r1
 800f454:	42a5      	cmp	r5, r4
 800f456:	d10b      	bne.n	800f470 <_free_r+0x70>
 800f458:	6824      	ldr	r4, [r4, #0]
 800f45a:	4421      	add	r1, r4
 800f45c:	1854      	adds	r4, r2, r1
 800f45e:	42a3      	cmp	r3, r4
 800f460:	6011      	str	r1, [r2, #0]
 800f462:	d1e0      	bne.n	800f426 <_free_r+0x26>
 800f464:	681c      	ldr	r4, [r3, #0]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	6053      	str	r3, [r2, #4]
 800f46a:	440c      	add	r4, r1
 800f46c:	6014      	str	r4, [r2, #0]
 800f46e:	e7da      	b.n	800f426 <_free_r+0x26>
 800f470:	d902      	bls.n	800f478 <_free_r+0x78>
 800f472:	230c      	movs	r3, #12
 800f474:	6003      	str	r3, [r0, #0]
 800f476:	e7d6      	b.n	800f426 <_free_r+0x26>
 800f478:	6825      	ldr	r5, [r4, #0]
 800f47a:	1961      	adds	r1, r4, r5
 800f47c:	428b      	cmp	r3, r1
 800f47e:	bf04      	itt	eq
 800f480:	6819      	ldreq	r1, [r3, #0]
 800f482:	685b      	ldreq	r3, [r3, #4]
 800f484:	6063      	str	r3, [r4, #4]
 800f486:	bf04      	itt	eq
 800f488:	1949      	addeq	r1, r1, r5
 800f48a:	6021      	streq	r1, [r4, #0]
 800f48c:	6054      	str	r4, [r2, #4]
 800f48e:	e7ca      	b.n	800f426 <_free_r+0x26>
 800f490:	b003      	add	sp, #12
 800f492:	bd30      	pop	{r4, r5, pc}
 800f494:	200008c8 	.word	0x200008c8

0800f498 <_init>:
 800f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49a:	bf00      	nop
 800f49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f49e:	bc08      	pop	{r3}
 800f4a0:	469e      	mov	lr, r3
 800f4a2:	4770      	bx	lr

0800f4a4 <_fini>:
 800f4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4a6:	bf00      	nop
 800f4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4aa:	bc08      	pop	{r3}
 800f4ac:	469e      	mov	lr, r3
 800f4ae:	4770      	bx	lr
