
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008338  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080084c0  080084c0  000184c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f4  080084f4  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084fc  080084fc  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08008504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020108  2**0
                  CONTENTS
 10 .bss          00000ab8  20000108  20000108  00020108  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bc0  20000bc0  00020108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001981b  00000000  00000000  0002017b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000431a  00000000  00000000  00039996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001570  00000000  00000000  0003dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001079  00000000  00000000  0003f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024b4c  00000000  00000000  00040299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d0f8  00000000  00000000  00064de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce350  00000000  00000000  00081edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005cb4  00000000  00000000  00150230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00155ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000108 	.word	0x20000108
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084a8 	.word	0x080084a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000010c 	.word	0x2000010c
 80001c4:	080084a8 	.word	0x080084a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f001 f88a 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 fb6a 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fcce 	bl	8000e70 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 fbe4 	bl	8000ca0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 fc10 	bl	8000cfc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 fc3e 	bl	8000d5c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f007 fbe6 	bl	8007cb0 <MX_USB_HOST_Init>
  MX_CRC_Init();
 80004e4:	f000 fbc8 	bl	8000c78 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 fc6e 	bl	8000dc8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004ec:	f000 fc96 	bl	8000e1c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)== 1){
 80004f0:	2101      	movs	r1, #1
 80004f2:	4807      	ldr	r0, [pc, #28]	; (8000510 <main+0x4c>)
 80004f4:	f001 fed6 	bl	80022a4 <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d102      	bne.n	8000504 <main+0x40>
  	  bootloader_uart_read_data();
 80004fe:	f000 f809 	bl	8000514 <bootloader_uart_read_data>
 8000502:	e001      	b.n	8000508 <main+0x44>
    }
    else{
  	  bootloader_jump_to_user_app();
 8000504:	f000 f866 	bl	80005d4 <bootloader_jump_to_user_app>
 8000508:	2300      	movs	r3, #0
    }


}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40020000 	.word	0x40020000

08000514 <bootloader_uart_read_data>:


void  bootloader_uart_read_data(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(uart_buff,0,200);
 800051e:	22c8      	movs	r2, #200	; 0xc8
 8000520:	2100      	movs	r1, #0
 8000522:	4828      	ldr	r0, [pc, #160]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 8000524:	f007 ff30 	bl	8008388 <memset>
		HAL_UART_Receive(&huart2,uart_buff,1,HAL_MAX_DELAY);
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	2201      	movs	r2, #1
 800052e:	4925      	ldr	r1, [pc, #148]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 8000530:	4825      	ldr	r0, [pc, #148]	; (80005c8 <bootloader_uart_read_data+0xb4>)
 8000532:	f005 f81f 	bl	8005574 <HAL_UART_Receive>
		rcv_len= uart_buff[0];
 8000536:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart2,&uart_buff[1],rcv_len,HAL_MAX_DELAY);
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	b29a      	uxth	r2, r3
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	4921      	ldr	r1, [pc, #132]	; (80005cc <bootloader_uart_read_data+0xb8>)
 8000546:	4820      	ldr	r0, [pc, #128]	; (80005c8 <bootloader_uart_read_data+0xb4>)
 8000548:	f005 f814 	bl	8005574 <HAL_UART_Receive>
		switch(uart_buff[1])
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 800054e:	785b      	ldrb	r3, [r3, #1]
 8000550:	3b51      	subs	r3, #81	; 0x51
 8000552:	2b06      	cmp	r3, #6
 8000554:	d82c      	bhi.n	80005b0 <bootloader_uart_read_data+0x9c>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <bootloader_uart_read_data+0x48>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	08000579 	.word	0x08000579
 8000560:	08000581 	.word	0x08000581
 8000564:	08000589 	.word	0x08000589
 8000568:	08000591 	.word	0x08000591
 800056c:	08000599 	.word	0x08000599
 8000570:	080005a1 	.word	0x080005a1
 8000574:	080005a9 	.word	0x080005a9
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(uart_buff);
 8000578:	4812      	ldr	r0, [pc, #72]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 800057a:	f000 f83b 	bl	80005f4 <bootloader_handle_getver_cmd>
                break;
 800057e:	e01f      	b.n	80005c0 <bootloader_uart_read_data+0xac>
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(uart_buff);
 8000580:	4810      	ldr	r0, [pc, #64]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 8000582:	f000 f863 	bl	800064c <bootloader_handle_gethelp_cmd>
                break;
 8000586:	e01b      	b.n	80005c0 <bootloader_uart_read_data+0xac>
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(uart_buff);
 8000588:	480e      	ldr	r0, [pc, #56]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 800058a:	f000 f887 	bl	800069c <bootloader_handle_getcid_cmd>
                break;
 800058e:	e017      	b.n	80005c0 <bootloader_uart_read_data+0xac>
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(uart_buff);
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 8000592:	f000 f8af 	bl	80006f4 <bootloader_handle_getrdp_cmd>
                break;
 8000596:	e013      	b.n	80005c0 <bootloader_uart_read_data+0xac>
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(uart_buff);
 8000598:	480a      	ldr	r0, [pc, #40]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 800059a:	f000 f8dd 	bl	8000758 <bootloader_handle_go_cmd>
                break;
 800059e:	e00f      	b.n	80005c0 <bootloader_uart_read_data+0xac>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(uart_buff);
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 80005a2:	f000 f925 	bl	80007f0 <bootloader_handle_flash_erase_cmd>
                break;
 80005a6:	e00b      	b.n	80005c0 <bootloader_uart_read_data+0xac>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(uart_buff);
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <bootloader_uart_read_data+0xb0>)
 80005aa:	f000 f957 	bl	800085c <bootloader_handle_mem_write_cmd>
                break;
 80005ae:	e007      	b.n	80005c0 <bootloader_uart_read_data+0xac>
            	default:
            	 HAL_UART_Transmit(&huart2,(uint8_t*)for_error, (uint16_t)sizeof(for_error),HAL_MAX_DELAY);
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	220a      	movs	r2, #10
 80005b6:	4906      	ldr	r1, [pc, #24]	; (80005d0 <bootloader_uart_read_data+0xbc>)
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <bootloader_uart_read_data+0xb4>)
 80005ba:	f004 ff49 	bl	8005450 <HAL_UART_Transmit>
            	 				 break;
 80005be:	bf00      	nop
		memset(uart_buff,0,200);
 80005c0:	e7ad      	b.n	800051e <bootloader_uart_read_data+0xa>
 80005c2:	bf00      	nop
 80005c4:	200002a8 	.word	0x200002a8
 80005c8:	20000220 	.word	0x20000220
 80005cc:	200002a9 	.word	0x200002a9
 80005d0:	20000000 	.word	0x20000000

080005d4 <bootloader_jump_to_user_app>:
}




void bootloader_jump_to_user_app(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
    void (*app_reset_handler)(void);

    volatile uint32_t resethandler_address = *(uint32_t*)(0x08008000U+4);
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <bootloader_jump_to_user_app+0x1c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	603b      	str	r3, [r7, #0]
	app_reset_handler = (void*) resethandler_address;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	607b      	str	r3, [r7, #4]
	app_reset_handler();
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4798      	blx	r3


}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08008004 	.word	0x08008004

080005f4 <bootloader_handle_getver_cmd>:
//------------------------------Bootloader Functions Area----------------------------------------------------------------------------------------------------------------
void bootloader_handle_getver_cmd(uint8_t *uart_buff){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	uint8_t bootloader_version;

	uint32_t command_packet_length = uart_buff[0]+1;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *(uint32_t*)(uart_buff + command_packet_length - 4);
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	3b04      	subs	r3, #4
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	613b      	str	r3, [r7, #16]


	if(crc_verification(&uart_buff[0], command_packet_length - 4, host_crc )){
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3b04      	subs	r3, #4
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f9c3 	bl	80009a4 <crc_verification>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d00d      	beq.n	8000640 <bootloader_handle_getver_cmd+0x4c>
		bootloader_send_ack(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f000 f993 	bl	8000950 <bootloader_send_ack>
		bootloader_version = get_bootloader_version();
 800062a:	f000 f9ef 	bl	8000a0c <get_bootloader_version>
 800062e:	4603      	mov	r3, r0
 8000630:	73fb      	strb	r3, [r7, #15]
		bootloader_uart_write_data(&bootloader_version,1);
 8000632:	f107 030f 	add.w	r3, r7, #15
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f9ef 	bl	8000a1c <bootloader_uart_write_data>
	}
	else
	{
		bootloader_send_nack();
	}
}
 800063e:	e001      	b.n	8000644 <bootloader_handle_getver_cmd+0x50>
		bootloader_send_nack();
 8000640:	f000 f99e 	bl	8000980 <bootloader_send_nack>
}
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <bootloader_handle_gethelp_cmd>:


void bootloader_handle_gethelp_cmd(uint8_t *uart_buff){
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

	uint32_t command_packet_length = uart_buff[0]+1;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *(uint32_t*)(uart_buff + command_packet_length - 4);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3b04      	subs	r3, #4
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	60bb      	str	r3, [r7, #8]

	if(crc_verification(&uart_buff[0], command_packet_length - 4, host_crc )){
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3b04      	subs	r3, #4
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	4619      	mov	r1, r3
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f997 	bl	80009a4 <crc_verification>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d007      	beq.n	800068c <bootloader_handle_gethelp_cmd+0x40>
		bootloader_send_ack(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f967 	bl	8000950 <bootloader_send_ack>
		bootloader_uart_write_data((uint8_t*)commands_available, (uint16_t)sizeof(commands_available));
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <bootloader_handle_gethelp_cmd+0x4c>)
 8000686:	f000 f9c9 	bl	8000a1c <bootloader_uart_write_data>
	else
	{
		bootloader_send_nack();
	}

}
 800068a:	e001      	b.n	8000690 <bootloader_handle_gethelp_cmd+0x44>
		bootloader_send_nack();
 800068c:	f000 f978 	bl	8000980 <bootloader_send_nack>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000000c 	.word	0x2000000c

0800069c <bootloader_handle_getcid_cmd>:





void bootloader_handle_getcid_cmd(uint8_t *uart_buff){
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]


	uint16_t bootloader_ID;

		uint32_t command_packet_length = uart_buff[0]+1;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
		uint32_t host_crc = *(uint32_t*)(uart_buff + command_packet_length - 4);
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	3b04      	subs	r3, #4
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	613b      	str	r3, [r7, #16]
		if(crc_verification(&uart_buff[0], command_packet_length - 4, host_crc )){
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	3b04      	subs	r3, #4
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	4619      	mov	r1, r3
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f96f 	bl	80009a4 <crc_verification>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00d      	beq.n	80006e8 <bootloader_handle_getcid_cmd+0x4c>
			bootloader_send_ack(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 f93f 	bl	8000950 <bootloader_send_ack>
			bootloader_ID = get_cid();
 80006d2:	f000 f9b7 	bl	8000a44 <get_cid>
 80006d6:	4603      	mov	r3, r0
 80006d8:	81fb      	strh	r3, [r7, #14]
			bootloader_uart_write_data((uint8_t*)&bootloader_ID, 2);
 80006da:	f107 030e 	add.w	r3, r7, #14
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f99b 	bl	8000a1c <bootloader_uart_write_data>
		else
		{
			bootloader_send_nack();
		}

}
 80006e6:	e001      	b.n	80006ec <bootloader_handle_getcid_cmd+0x50>
			bootloader_send_nack();
 80006e8:	f000 f94a 	bl	8000980 <bootloader_send_nack>
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <bootloader_handle_getrdp_cmd>:


void bootloader_handle_getrdp_cmd(uint8_t *uart_buff){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
		uint8_t rdp = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]
		uint32_t command_packet_length = uart_buff[0]+1;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
		uint32_t host_crc = *(uint32_t*)(uart_buff + command_packet_length - 4);
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3b04      	subs	r3, #4
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	613b      	str	r3, [r7, #16]

		if(crc_verification(&uart_buff[0], command_packet_length - 4, host_crc )){
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3b04      	subs	r3, #4
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f941 	bl	80009a4 <crc_verification>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00f      	beq.n	8000748 <bootloader_handle_getrdp_cmd+0x54>
			bootloader_send_ack(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 f911 	bl	8000950 <bootloader_send_ack>
			rdp = get_flash_rdp_level();
 800072e:	f000 f99d 	bl	8000a6c <get_flash_rdp_level>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart2, &rdp, sizeof(rdp), HAL_MAX_DELAY);
 8000736:	f107 010f 	add.w	r1, r7, #15
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	2201      	movs	r2, #1
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <bootloader_handle_getrdp_cmd+0x60>)
 8000742:	f004 fe85 	bl	8005450 <HAL_UART_Transmit>
		}
		else
		{
			bootloader_send_nack();
		}
}
 8000746:	e001      	b.n	800074c <bootloader_handle_getrdp_cmd+0x58>
			bootloader_send_nack();
 8000748:	f000 f91a 	bl	8000980 <bootloader_send_nack>
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000220 	.word	0x20000220

08000758 <bootloader_handle_go_cmd>:

void bootloader_handle_go_cmd(uint8_t *uart_buff){
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

		volatile uint32_t address_desired=0;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
		char invalid[] = "address is invalid\r\n";
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <bootloader_handle_go_cmd+0x90>)
 8000766:	f107 0408 	add.w	r4, r7, #8
 800076a:	461d      	mov	r5, r3
 800076c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000770:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000774:	6020      	str	r0, [r4, #0]
 8000776:	3404      	adds	r4, #4
 8000778:	7021      	strb	r1, [r4, #0]
		uint32_t command_packet_len = uart_buff[0]+1 ;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t host_crc = *((uint32_t * ) (uart_buff+command_packet_len - 4) ) ;
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000784:	3b04      	subs	r3, #4
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28

		if (crc_verification(&uart_buff[0],command_packet_len-4,host_crc))
 800078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000790:	3b04      	subs	r3, #4
 8000792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000794:	4619      	mov	r1, r3
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f904 	bl	80009a4 <crc_verification>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d01b      	beq.n	80007da <bootloader_handle_go_cmd+0x82>
		{
	        bootloader_send_ack(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 f8d4 	bl	8000950 <bootloader_send_ack>
	        address_desired = *((uint32_t *)&uart_buff[2] );
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80007ae:	623b      	str	r3, [r7, #32]
	        if( verify_address(address_desired) == 0 )
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f972 	bl	8000a9c <verify_address>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d104      	bne.n	80007c8 <bootloader_handle_go_cmd+0x70>
	        {

	            void (*execute)(void) = (void *)address_desired;
 80007be:	6a3b      	ldr	r3, [r7, #32]
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
	            execute();
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	4798      	blx	r3

	        bootloader_send_nack();
		}


}
 80007c6:	e00a      	b.n	80007de <bootloader_handle_go_cmd+0x86>
				HAL_UART_Transmit(&huart2,(uint8_t*)invalid,(uint16_t)sizeof(invalid), HAL_MAX_DELAY);
 80007c8:	f107 0108 	add.w	r1, r7, #8
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	2215      	movs	r2, #21
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <bootloader_handle_go_cmd+0x94>)
 80007d4:	f004 fe3c 	bl	8005450 <HAL_UART_Transmit>
}
 80007d8:	e001      	b.n	80007de <bootloader_handle_go_cmd+0x86>
	        bootloader_send_nack();
 80007da:	f000 f8d1 	bl	8000980 <bootloader_send_nack>
}
 80007de:	bf00      	nop
 80007e0:	3730      	adds	r7, #48	; 0x30
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bdb0      	pop	{r4, r5, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	080084c0 	.word	0x080084c0
 80007ec:	20000220 	.word	0x20000220

080007f0 <bootloader_handle_flash_erase_cmd>:




void bootloader_handle_flash_erase_cmd(uint8_t *uart_buff){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	 	 uint8_t erase_status = 0x00;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
	 	 uint32_t command_packet_len = uart_buff[0]+1 ;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
	 	 uint32_t host_crc = *((uint32_t * ) (uart_buff+command_packet_len - 4) ) ;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3b04      	subs	r3, #4
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	613b      	str	r3, [r7, #16]

		if (crc_verification(&uart_buff[0],command_packet_len-4,host_crc))
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3b04      	subs	r3, #4
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	4619      	mov	r1, r3
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 f8c3 	bl	80009a4 <crc_verification>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d015      	beq.n	8000850 <bootloader_handle_flash_erase_cmd+0x60>
		{
	        bootloader_send_ack(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f000 f893 	bl	8000950 <bootloader_send_ack>
	        erase_status = execute_flash_erase(uart_buff[2] , uart_buff[3]);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3302      	adds	r3, #2
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3303      	adds	r3, #3
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	4610      	mov	r0, r2
 800083a:	f000 f96b 	bl	8000b14 <execute_flash_erase>
 800083e:	4603      	mov	r3, r0
 8000840:	73fb      	strb	r3, [r7, #15]
	        bootloader_uart_write_data(&erase_status,1);
 8000842:	f107 030f 	add.w	r3, r7, #15
 8000846:	2101      	movs	r1, #1
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f8e7 	bl	8000a1c <bootloader_uart_write_data>
		}else
		{
			bootloader_send_nack();
		}

}
 800084e:	e001      	b.n	8000854 <bootloader_handle_flash_erase_cmd+0x64>
			bootloader_send_nack();
 8000850:	f000 f896 	bl	8000980 <bootloader_send_nack>
}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

	uint8_t write_status = 0x00;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]
	uint8_t payload_len = pBuffer[6];
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	799b      	ldrb	r3, [r3, #6]
 800086c:	77fb      	strb	r3, [r7, #31]
	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000874:	61bb      	str	r3, [r7, #24]


	uint32_t command_packet_len = uart_buff[0]+1 ;
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <bootloader_handle_mem_write_cmd+0x94>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (uart_buff+command_packet_len - 4) ) ;
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3b04      	subs	r3, #4
 8000882:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <bootloader_handle_mem_write_cmd+0x94>)
 8000884:	4413      	add	r3, r2
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	613b      	str	r3, [r7, #16]
	if (crc_verification(&uart_buff[0],command_packet_len-4,host_crc))
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3b04      	subs	r3, #4
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4619      	mov	r1, r3
 8000892:	4817      	ldr	r0, [pc, #92]	; (80008f0 <bootloader_handle_mem_write_cmd+0x94>)
 8000894:	f000 f886 	bl	80009a4 <crc_verification>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d021      	beq.n	80008e2 <bootloader_handle_mem_write_cmd+0x86>
	{
        bootloader_send_ack(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 f856 	bl	8000950 <bootloader_send_ack>
		if( verify_address(mem_address) == 0x00 )
 80008a4:	69b8      	ldr	r0, [r7, #24]
 80008a6:	f000 f8f9 	bl	8000a9c <verify_address>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10f      	bne.n	80008d0 <bootloader_handle_mem_write_cmd+0x74>
		{
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3307      	adds	r3, #7
 80008b4:	7ffa      	ldrb	r2, [r7, #31]
 80008b6:	69b9      	ldr	r1, [r7, #24]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f81b 	bl	80008f4 <execute_mem_write>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 80008c2:	f107 030f 	add.w	r3, r7, #15
 80008c6:	2101      	movs	r1, #1
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f8a7 	bl	8000a1c <bootloader_uart_write_data>
	}else
	{
        bootloader_send_nack();
	}

}
 80008ce:	e00a      	b.n	80008e6 <bootloader_handle_mem_write_cmd+0x8a>
            write_status = 0x01;
 80008d0:	2301      	movs	r3, #1
 80008d2:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 80008d4:	f107 030f 	add.w	r3, r7, #15
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f89e 	bl	8000a1c <bootloader_uart_write_data>
}
 80008e0:	e001      	b.n	80008e6 <bootloader_handle_mem_write_cmd+0x8a>
        bootloader_send_nack();
 80008e2:	f000 f84d 	bl	8000980 <bootloader_send_nack>
}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200002a8 	.word	0x200002a8

080008f4 <execute_mem_write>:

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 80008f4:	b5b0      	push	{r4, r5, r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8000900:	2300      	movs	r3, #0
 8000902:	75fb      	strb	r3, [r7, #23]


    HAL_FLASH_Unlock();
 8000904:	f001 f8ae 	bl	8001a64 <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	e014      	b.n	8000938 <execute_mem_write+0x44>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	18d1      	adds	r1, r2, r3
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2200      	movs	r2, #0
 8000920:	461c      	mov	r4, r3
 8000922:	4615      	mov	r5, r2
 8000924:	4622      	mov	r2, r4
 8000926:	462b      	mov	r3, r5
 8000928:	2000      	movs	r0, #0
 800092a:	f001 f847 	bl	80019bc <HAL_FLASH_Program>
 800092e:	4603      	mov	r3, r0
 8000930:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3301      	adds	r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	d3e6      	bcc.n	800090e <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8000940:	f001 f8b2 	bl	8001aa8 <HAL_FLASH_Lock>

    return status;
 8000944:	7dfb      	ldrb	r3, [r7, #23]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000950 <bootloader_send_ack>:


//----------------------------------------------------------------------------------------------------------------------------------------


void bootloader_send_ack(uint8_t follow_len){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	//length to follow depends on the commands
	uint8_t ack_buf[2];
	ack_buf[0] = 0xA5;
 800095a:	23a5      	movs	r3, #165	; 0xa5
 800095c:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2, ack_buf, 2, HAL_MAX_DELAY);
 8000962:	f107 010c 	add.w	r1, r7, #12
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	2202      	movs	r2, #2
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <bootloader_send_ack+0x2c>)
 800096e:	f004 fd6f 	bl	8005450 <HAL_UART_Transmit>
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000220 	.word	0x20000220

08000980 <bootloader_send_nack>:

void bootloader_send_nack(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	uint8_t nack = 0x7F;
 8000986:	237f      	movs	r3, #127	; 0x7f
 8000988:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart2, &nack, 1, HAL_MAX_DELAY);
 800098a:	1df9      	adds	r1, r7, #7
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	2201      	movs	r2, #1
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <bootloader_send_nack+0x20>)
 8000994:	f004 fd5c 	bl	8005450 <HAL_UART_Transmit>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000220 	.word	0x20000220

080009a4 <crc_verification>:

uint8_t crc_verification(uint8_t *pData, uint32_t len, uint32_t crc_host){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue=0xff;
 80009b0:	23ff      	movs	r3, #255	; 0xff
 80009b2:	61fb      	str	r3, [r7, #28]

	for (uint32_t i =0; i < len; i++){
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	e00f      	b.n	80009da <crc_verification+0x36>
		uint32_t i_data = pData[i];
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc,&i_data, 1);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2201      	movs	r2, #1
 80009ca:	4619      	mov	r1, r3
 80009cc:	480e      	ldr	r0, [pc, #56]	; (8000a08 <crc_verification+0x64>)
 80009ce:	f000 ffca 	bl	8001966 <HAL_CRC_Accumulate>
 80009d2:	61f8      	str	r0, [r7, #28]
	for (uint32_t i =0; i < len; i++){
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	3301      	adds	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3eb      	bcc.n	80009ba <crc_verification+0x16>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <crc_verification+0x64>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <crc_verification+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f042 0201 	orr.w	r2, r2, #1
 80009f0:	609a      	str	r2, [r3, #8]

	if(uwCRCValue == crc_host){
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d101      	bne.n	80009fe <crc_verification+0x5a>
		return 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <crc_verification+0x5c>
	}
	return 0;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000124 	.word	0x20000124

08000a0c <get_bootloader_version>:


uint8_t get_bootloader_version(void){
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	return (uint8_t)bootloader_ver;
 8000a10:	2301      	movs	r3, #1
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <bootloader_uart_write_data>:


void bootloader_uart_write_data(uint8_t *version_bootloader, uint32_t length){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(&huart2, version_bootloader, length, HAL_MAX_DELAY);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <bootloader_uart_write_data+0x24>)
 8000a32:	f004 fd0d 	bl	8005450 <HAL_UART_Transmit>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000220 	.word	0x20000220

08000a44 <get_cid>:

//-----------------------------------------------------------------------------------------------------------------------

uint16_t get_cid(void){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
	uint32_t *cid_full;
	uint16_t cid;
	cid_full = (uint32_t*)DBGMCU_BASE;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <get_cid+0x24>)
 8000a4c:	607b      	str	r3, [r7, #4]
	cid = *cid_full & 0x0FFF ;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a58:	807b      	strh	r3, [r7, #2]


	return cid;
 8000a5a:	887b      	ldrh	r3, [r7, #2]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e0042000 	.word	0xe0042000

08000a6c <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0

	uint8_t rdp=0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	73fb      	strb	r3, [r7, #15]


	uint16_t rdp_buffer;
	volatile uint32_t *rdp_address = (uint32_t*) 0x1FFFC000;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <get_flash_rdp_level+0x2c>)
 8000a78:	60bb      	str	r3, [r7, #8]
	rdp_buffer = *rdp_address;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	80fb      	strh	r3, [r7, #6]
	rdp = (uint8_t)((rdp_buffer & 0xFF00)>>8);
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	73fb      	strb	r3, [r7, #15]


	return rdp;
 8000a88:	7bfb      	ldrb	r3, [r7, #15]


}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	1fffc000 	.word	0x1fffc000

08000a9c <verify_address>:

uint8_t verify_address(uint32_t address_desired)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if ( address_desired >= SRAM1_BASE && address_desired <= SRAM1_END)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000aaa:	d305      	bcc.n	8000ab8 <verify_address+0x1c>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <verify_address+0x68>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d801      	bhi.n	8000ab8 <verify_address+0x1c>
	{
		return 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e01e      	b.n	8000af6 <verify_address+0x5a>
	}
	else if ( address_desired >= SRAM2_BASE && address_desired <= SRAM2_END)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <verify_address+0x68>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d305      	bcc.n	8000acc <verify_address+0x30>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <verify_address+0x6c>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d801      	bhi.n	8000acc <verify_address+0x30>
	{
		return 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e014      	b.n	8000af6 <verify_address+0x5a>
	}
	else if ( address_desired >= FLASH_BASE && address_desired <= FLASH_END)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ad2:	d305      	bcc.n	8000ae0 <verify_address+0x44>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000ada:	d201      	bcs.n	8000ae0 <verify_address+0x44>
	{
		return 0 ;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e00a      	b.n	8000af6 <verify_address+0x5a>
	}
	else if ( address_desired >= BKPSRAM_BASE && address_desired <= BKPSRAM_END)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <verify_address+0x70>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d305      	bcc.n	8000af4 <verify_address+0x58>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <verify_address+0x74>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d801      	bhi.n	8000af4 <verify_address+0x58>
	{
		return 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	e000      	b.n	8000af6 <verify_address+0x5a>
	}
	else
		return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	2001c000 	.word	0x2001c000
 8000b08:	20020000 	.word	0x20020000
 8000b0c:	40024000 	.word	0x40024000
 8000b10:	40025000 	.word	0x40025000

08000b14 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	4613      	mov	r3, r2
 8000b22:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d901      	bls.n	8000b2e <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e035      	b.n	8000b9a <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2bff      	cmp	r3, #255	; 0xff
 8000b32:	d002      	beq.n	8000b3a <execute_flash_erase+0x26>
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d82e      	bhi.n	8000b98 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2bff      	cmp	r3, #255	; 0xff
 8000b3e:	d102      	bne.n	8000b46 <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000b40:	2301      	movs	r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	e012      	b.n	8000b6c <execute_flash_erase+0x58>
		}
		else
		{
			uint8_t remanining_sector = 8 - sector_number;
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f1c3 0308 	rsb	r3, r3, #8
 8000b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( number_of_sector > remanining_sector)
 8000b50:	79ba      	ldrb	r2, [r7, #6]
 8000b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d902      	bls.n	8000b60 <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 8000b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b5e:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]


		HAL_FLASH_Unlock();
 8000b70:	f000 ff78 	bl	8001a64 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8000b74:	2302      	movs	r3, #2
 8000b76:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000b78:	f107 020c 	add.w	r2, r7, #12
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f8d0 	bl	8001d28 <HAL_FLASHEx_Erase>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8000b8e:	f000 ff8b 	bl	8001aa8 <HAL_FLASH_Lock>

		return status;
 8000b92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b96:	e000      	b.n	8000b9a <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 8000b98:	2304      	movs	r3, #4
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2230      	movs	r2, #48	; 0x30
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f007 fbe8 	bl	8008388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a27      	ldr	r2, [pc, #156]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c00:	2301      	movs	r3, #1
 8000c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c22:	2307      	movs	r3, #7
 8000c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f003 fd62 	bl	80046f4 <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c36:	f000 fa21 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2105      	movs	r1, #5
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 ffc3 	bl	8004be4 <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c64:	f000 fa0a 	bl	800107c <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3750      	adds	r7, #80	; 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_CRC_Init+0x20>)
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <MX_CRC_Init+0x24>)
 8000c80:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_CRC_Init+0x20>)
 8000c84:	f000 fe53 	bl	800192e <HAL_CRC_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c8e:	f000 f9f5 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000124 	.word	0x20000124
 8000c9c:	40023000 	.word	0x40023000

08000ca0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000ca6:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <MX_I2C1_Init+0x54>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MX_I2C1_Init+0x58>)
 8000cae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cde:	f002 ff25 	bl	8003b2c <HAL_I2C_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce8:	f000 f9c8 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000012c 	.word	0x2000012c
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	000186a0 	.word	0x000186a0

08000cfc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <MX_I2S3_Init+0x58>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d20:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <MX_I2S3_Init+0x5c>)
 8000d26:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_I2S3_Init+0x54>)
 8000d3c:	f003 f83a 	bl	8003db4 <HAL_I2S_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d46:	f000 f999 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000180 	.word	0x20000180
 8000d54:	40003c00 	.word	0x40003c00
 8000d58:	00017700 	.word	0x00017700

08000d5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <MX_SPI1_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000da8:	220a      	movs	r2, #10
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000dae:	f004 fa79 	bl	80052a4 <HAL_SPI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db8:	f000 f960 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200001c8 	.word	0x200001c8
 8000dc4:	40013000 	.word	0x40013000

08000dc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <MX_USART2_UART_Init+0x50>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART2_UART_Init+0x4c>)
 8000e00:	f004 fad9 	bl	80053b6 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e0a:	f000 f937 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000220 	.word	0x20000220
 8000e18:	40004400 	.word	0x40004400

08000e1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_USART3_UART_Init+0x4c>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_USART3_UART_Init+0x50>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_USART3_UART_Init+0x4c>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_USART3_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_USART3_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_USART3_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_USART3_UART_Init+0x4c>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_USART3_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_USART3_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_USART3_UART_Init+0x4c>)
 8000e54:	f004 faaf 	bl	80053b6 <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e5e:	f000 f90d 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000264 	.word	0x20000264
 8000e6c:	40004800 	.word	0x40004800

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	4b76      	ldr	r3, [pc, #472]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a75      	ldr	r2, [pc, #468]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b73      	ldr	r3, [pc, #460]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	4b6f      	ldr	r3, [pc, #444]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a6e      	ldr	r2, [pc, #440]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b6c      	ldr	r3, [pc, #432]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b68      	ldr	r3, [pc, #416]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a67      	ldr	r2, [pc, #412]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b65      	ldr	r3, [pc, #404]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b61      	ldr	r3, [pc, #388]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a60      	ldr	r2, [pc, #384]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b5e      	ldr	r3, [pc, #376]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a59      	ldr	r2, [pc, #356]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b57      	ldr	r3, [pc, #348]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b53      	ldr	r3, [pc, #332]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a52      	ldr	r2, [pc, #328]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b50      	ldr	r3, [pc, #320]	; (8001064 <MX_GPIO_Init+0x1f4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2108      	movs	r1, #8
 8000f32:	484d      	ldr	r0, [pc, #308]	; (8001068 <MX_GPIO_Init+0x1f8>)
 8000f34:	f001 f9ce 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	484b      	ldr	r0, [pc, #300]	; (800106c <MX_GPIO_Init+0x1fc>)
 8000f3e:	f001 f9c9 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f42:	2200      	movs	r2, #0
 8000f44:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f48:	4849      	ldr	r0, [pc, #292]	; (8001070 <MX_GPIO_Init+0x200>)
 8000f4a:	f001 f9c3 	bl	80022d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4840      	ldr	r0, [pc, #256]	; (8001068 <MX_GPIO_Init+0x1f8>)
 8000f66:	f001 f801 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	483a      	ldr	r0, [pc, #232]	; (800106c <MX_GPIO_Init+0x1fc>)
 8000f82:	f000 fff3 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f86:	2308      	movs	r3, #8
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f96:	2305      	movs	r3, #5
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4832      	ldr	r0, [pc, #200]	; (800106c <MX_GPIO_Init+0x1fc>)
 8000fa2:	f000 ffe3 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000faa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	482e      	ldr	r0, [pc, #184]	; (8001074 <MX_GPIO_Init+0x204>)
 8000fbc:	f000 ffd6 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4829      	ldr	r0, [pc, #164]	; (8001078 <MX_GPIO_Init+0x208>)
 8000fd4:	f000 ffca 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fea:	2305      	movs	r3, #5
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4820      	ldr	r0, [pc, #128]	; (8001078 <MX_GPIO_Init+0x208>)
 8000ff6:	f000 ffb9 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ffa:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ffe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4817      	ldr	r0, [pc, #92]	; (8001070 <MX_GPIO_Init+0x200>)
 8001014:	f000 ffaa 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001018:	2320      	movs	r3, #32
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4811      	ldr	r0, [pc, #68]	; (8001070 <MX_GPIO_Init+0x200>)
 800102c:	f000 ff9e 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001030:	2302      	movs	r3, #2
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001034:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	4808      	ldr	r0, [pc, #32]	; (8001068 <MX_GPIO_Init+0x1f8>)
 8001046:	f000 ff91 	bl	8001f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2006      	movs	r0, #6
 8001050:	f000 fc37 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001054:	2006      	movs	r0, #6
 8001056:	f000 fc50 	bl	80018fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105a:	bf00      	nop
 800105c:	3730      	adds	r7, #48	; 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40021000 	.word	0x40021000
 800106c:	40020800 	.word	0x40020800
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_MspInit+0x4c>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010c6:	2007      	movs	r0, #7
 80010c8:	f000 fbf0 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_CRC_MspInit+0x3c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10d      	bne.n	8001106 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_CRC_MspInit+0x40>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_CRC_MspInit+0x40>)
 80010f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <HAL_CRC_MspInit+0x40>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023000 	.word	0x40023000
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_I2C_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12c      	bne.n	8001198 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800115a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116c:	2304      	movs	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <HAL_I2C_MspInit+0x8c>)
 8001178:	f000 fef8 	bl	8001f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_I2C_MspInit+0x88>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a31      	ldr	r2, [pc, #196]	; (800129c <HAL_I2S_MspInit+0xf0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d15a      	bne.n	8001292 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80011e0:	23c0      	movs	r3, #192	; 0xc0
 80011e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 ff19 	bl	8005024 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80011f8:	f7ff ff40 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <HAL_I2S_MspInit+0xf4>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_I2S_MspInit+0xf4>)
 8001206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_I2S_MspInit+0xf4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_I2S_MspInit+0xf4>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <HAL_I2S_MspInit+0xf4>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_I2S_MspInit+0xf4>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_I2S_MspInit+0xf4>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <HAL_I2S_MspInit+0xf4>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6313      	str	r3, [r2, #48]	; 0x30
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_I2S_MspInit+0xf4>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001250:	2310      	movs	r3, #16
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001260:	2306      	movs	r3, #6
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <HAL_I2S_MspInit+0xf8>)
 800126c:	f000 fe7e 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001270:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001282:	2306      	movs	r3, #6
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <HAL_I2S_MspInit+0xfc>)
 800128e:	f000 fe6d 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3738      	adds	r7, #56	; 0x38
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40003c00 	.word	0x40003c00
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020800 	.word	0x40020800

080012ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_SPI_MspInit+0x84>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12b      	bne.n	8001326 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001306:	23e0      	movs	r3, #224	; 0xe0
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001316:	2305      	movs	r3, #5
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 8001322:	f000 fe23 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40013000 	.word	0x40013000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a42      	ldr	r2, [pc, #264]	; (8001464 <HAL_UART_MspInit+0x128>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12c      	bne.n	80013b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_UART_MspInit+0x12c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a40      	ldr	r2, [pc, #256]	; (8001468 <HAL_UART_MspInit+0x12c>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <HAL_UART_MspInit+0x12c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <HAL_UART_MspInit+0x12c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a39      	ldr	r2, [pc, #228]	; (8001468 <HAL_UART_MspInit+0x12c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b37      	ldr	r3, [pc, #220]	; (8001468 <HAL_UART_MspInit+0x12c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001396:	230c      	movs	r3, #12
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a6:	2307      	movs	r3, #7
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	482e      	ldr	r0, [pc, #184]	; (800146c <HAL_UART_MspInit+0x130>)
 80013b2:	f000 fddb 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013b6:	e050      	b.n	800145a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2c      	ldr	r2, [pc, #176]	; (8001470 <HAL_UART_MspInit+0x134>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d14b      	bne.n	800145a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_UART_MspInit+0x12c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <HAL_UART_MspInit+0x12c>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b25      	ldr	r3, [pc, #148]	; (8001468 <HAL_UART_MspInit+0x12c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_UART_MspInit+0x12c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a20      	ldr	r2, [pc, #128]	; (8001468 <HAL_UART_MspInit+0x12c>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_UART_MspInit+0x12c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_UART_MspInit+0x12c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a19      	ldr	r2, [pc, #100]	; (8001468 <HAL_UART_MspInit+0x12c>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_UART_MspInit+0x12c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001416:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001428:	2307      	movs	r3, #7
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4810      	ldr	r0, [pc, #64]	; (8001474 <HAL_UART_MspInit+0x138>)
 8001434:	f000 fd9a 	bl	8001f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800144a:	2307      	movs	r3, #7
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4808      	ldr	r0, [pc, #32]	; (8001478 <HAL_UART_MspInit+0x13c>)
 8001456:	f000 fd89 	bl	8001f6c <HAL_GPIO_Init>
}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	; 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40004400 	.word	0x40004400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000
 8001470:	40004800 	.word	0x40004800
 8001474:	40020400 	.word	0x40020400
 8001478:	40020c00 	.word	0x40020c00

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler+0x4>

08001482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>

0800148e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler+0x4>

0800149a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f000 f8dc 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <EXTI0_IRQHandler>:
/**
  * @brief This function handles EXTI line0 interrupt.
  */
uint8_t flag=0;
void EXTI0_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
/*;
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, !flag);
flag =!flag;*/

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f000 ff17 	bl	8002308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <OTG_FS_IRQHandler+0x10>)
 80014e6:	f001 f99d 	bl	8002824 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000774 	.word	0x20000774

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f006 ff48 	bl	80083b8 <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20020000 	.word	0x20020000
 8001554:	00000400 	.word	0x00000400
 8001558:	20000370 	.word	0x20000370
 800155c:	20000bc0 	.word	0x20000bc0

08001560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <SystemInit+0x28>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <SystemInit+0x28>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SystemInit+0x28>)
 8001576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800157a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001592:	490e      	ldr	r1, [pc, #56]	; (80015cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a8:	4c0b      	ldr	r4, [pc, #44]	; (80015d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015b6:	f7ff ffd3 	bl	8001560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ba:	f006 ff03 	bl	80083c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015be:	f7fe ff81 	bl	80004c4 <main>
  bx  lr    
 80015c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80015d0:	08008504 	.word	0x08008504
  ldr r2, =_sbss
 80015d4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80015d8:	20000bc0 	.word	0x20000bc0

080015dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <HAL_Init+0x40>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_Init+0x40>)
 80015f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x40>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f94f 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	2000      	movs	r0, #0
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fd38 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023c00 	.word	0x40023c00

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f967 	bl	8001916 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f92f 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000008c 	.word	0x2000008c
 800167c:	20000094 	.word	0x20000094
 8001680:	20000090 	.word	0x20000090

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000094 	.word	0x20000094
 80016a8:	20000374 	.word	0x20000374

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000374 	.word	0x20000374

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000094 	.word	0x20000094

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	; (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff29 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff3e 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff31 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e00e      	b.n	800195e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	795b      	ldrb	r3, [r3, #5]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fbc1 	bl	80010d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001966:	b480      	push	{r7}
 8001968:	b087      	sub	sp, #28
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2202      	movs	r2, #2
 800197a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e00a      	b.n	8001998 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	441a      	add	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d3f0      	bcc.n	8001982 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80019ae:	693b      	ldr	r3, [r7, #16]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_FLASH_Program+0xa0>)
 80019d0:	7e1b      	ldrb	r3, [r3, #24]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_FLASH_Program+0x1e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e03b      	b.n	8001a52 <HAL_FLASH_Program+0x96>
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_FLASH_Program+0xa0>)
 80019dc:	2201      	movs	r2, #1
 80019de:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019e4:	f000 f870 	bl	8001ac8 <FLASH_WaitForLastOperation>
 80019e8:	4603      	mov	r3, r0
 80019ea:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d12b      	bne.n	8001a4a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80019f8:	783b      	ldrb	r3, [r7, #0]
 80019fa:	4619      	mov	r1, r3
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	f000 f91b 	bl	8001c38 <FLASH_Program_Byte>
 8001a02:	e016      	b.n	8001a32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a0a:	883b      	ldrh	r3, [r7, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	68b8      	ldr	r0, [r7, #8]
 8001a10:	f000 f8ee 	bl	8001bf0 <FLASH_Program_HalfWord>
 8001a14:	e00d      	b.n	8001a32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d105      	bne.n	8001a28 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f000 f8c3 	bl	8001bac <FLASH_Program_Word>
 8001a26:	e004      	b.n	8001a32 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	f000 f88b 	bl	8001b48 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a36:	f000 f847 	bl	8001ac8 <FLASH_WaitForLastOperation>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_FLASH_Program+0xa4>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_FLASH_Program+0xa4>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <HAL_FLASH_Program+0xa0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000378 	.word	0x20000378
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_FLASH_Unlock+0x38>)
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da0b      	bge.n	8001a8e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_FLASH_Unlock+0x38>)
 8001a78:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_FLASH_Unlock+0x3c>)
 8001a7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_FLASH_Unlock+0x38>)
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <HAL_FLASH_Unlock+0x40>)
 8001a80:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_FLASH_Unlock+0x38>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da01      	bge.n	8001a8e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40023c00 	.word	0x40023c00
 8001aa0:	45670123 	.word	0x45670123
 8001aa4:	cdef89ab 	.word	0xcdef89ab

08001aa8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_FLASH_Lock+0x1c>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_FLASH_Lock+0x1c>)
 8001ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ab6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <FLASH_WaitForLastOperation+0x78>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ada:	f7ff fde7 	bl	80016ac <HAL_GetTick>
 8001ade:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ae0:	e010      	b.n	8001b04 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d00c      	beq.n	8001b04 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <FLASH_WaitForLastOperation+0x38>
 8001af0:	f7ff fddc 	bl	80016ac <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d201      	bcs.n	8001b04 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e019      	b.n	8001b38 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <FLASH_WaitForLastOperation+0x7c>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e8      	bne.n	8001ae2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <FLASH_WaitForLastOperation+0x7c>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <FLASH_WaitForLastOperation+0x7c>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <FLASH_WaitForLastOperation+0x7c>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b2e:	f000 f8a5 	bl	8001c7c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
  
}  
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000378 	.word	0x20000378
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <FLASH_Program_DoubleWord+0x60>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <FLASH_Program_DoubleWord+0x60>)
 8001b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <FLASH_Program_DoubleWord+0x60>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <FLASH_Program_DoubleWord+0x60>)
 8001b66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <FLASH_Program_DoubleWord+0x60>)
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <FLASH_Program_DoubleWord+0x60>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001b7e:	f3bf 8f6f 	isb	sy
}
 8001b82:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	000a      	movs	r2, r1
 8001b92:	2300      	movs	r3, #0
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	3104      	adds	r1, #4
 8001b98:	4613      	mov	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <FLASH_Program_Word+0x40>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <FLASH_Program_Word+0x40>)
 8001bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <FLASH_Program_Word+0x40>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <FLASH_Program_Word+0x40>)
 8001bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bcc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <FLASH_Program_Word+0x40>)
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	4a06      	ldr	r2, [pc, #24]	; (8001bec <FLASH_Program_Word+0x40>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <FLASH_Program_HalfWord+0x44>)
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <FLASH_Program_HalfWord+0x44>)
 8001c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <FLASH_Program_HalfWord+0x44>)
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <FLASH_Program_HalfWord+0x44>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <FLASH_Program_HalfWord+0x44>)
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <FLASH_Program_HalfWord+0x44>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	801a      	strh	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <FLASH_Program_Byte+0x40>)
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <FLASH_Program_Byte+0x40>)
 8001c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <FLASH_Program_Byte+0x40>)
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <FLASH_Program_Byte+0x40>)
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <FLASH_Program_Byte+0x40>)
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <FLASH_Program_Byte+0x40>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	78fa      	ldrb	r2, [r7, #3]
 8001c68:	701a      	strb	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001c96:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f043 0308 	orr.w	r3, r3, #8
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001cb4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001cb8:	2220      	movs	r2, #32
 8001cba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001cd2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001cd6:	2240      	movs	r2, #64	; 0x40
 8001cd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001cf0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f043 0320 	orr.w	r3, r3, #32
 8001d0c:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <FLASH_SetErrorCode+0xa8>)
 8001d0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <FLASH_SetErrorCode+0xa4>)
 8001d12:	2202      	movs	r2, #2
 8001d14:	60da      	str	r2, [r3, #12]
  }
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40023c00 	.word	0x40023c00
 8001d24:	20000378 	.word	0x20000378

08001d28 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <HAL_FLASHEx_Erase+0xd8>)
 8001d3c:	7e1b      	ldrb	r3, [r3, #24]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_FLASHEx_Erase+0x1e>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e058      	b.n	8001df8 <HAL_FLASHEx_Erase+0xd0>
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HAL_FLASHEx_Erase+0xd8>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d50:	f7ff feba 	bl	8001ac8 <FLASH_WaitForLastOperation>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d148      	bne.n	8001df0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d115      	bne.n	8001d9a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 f844 	bl	8001e08 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff fea0 	bl	8001ac8 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_FLASHEx_Erase+0xdc>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_FLASHEx_Erase+0xdc>)
 8001d92:	f023 0304 	bic.w	r3, r3, #4
 8001d96:	6113      	str	r3, [r2, #16]
 8001d98:	e028      	b.n	8001dec <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	e01c      	b.n	8001ddc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4619      	mov	r1, r3
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	f000 f850 	bl	8001e50 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db4:	f7ff fe88 	bl	8001ac8 <FLASH_WaitForLastOperation>
 8001db8:	4603      	mov	r3, r0
 8001dba:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_FLASHEx_Erase+0xdc>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dc6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	601a      	str	r2, [r3, #0]
          break;
 8001dd4:	e00a      	b.n	8001dec <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4413      	add	r3, r2
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d3da      	bcc.n	8001da2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001dec:	f000 f878 	bl	8001ee0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_FLASHEx_Erase+0xd8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	761a      	strb	r2, [r3, #24]

  return status;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000378 	.word	0x20000378
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <FLASH_MassErase+0x44>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <FLASH_MassErase+0x44>)
 8001e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <FLASH_MassErase+0x44>)
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <FLASH_MassErase+0x44>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <FLASH_MassErase+0x44>)
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	4313      	orrs	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <FLASH_MassErase+0x44>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6113      	str	r3, [r2, #16]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e010      	b.n	8001e8e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d103      	bne.n	8001e7a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	e009      	b.n	8001e8e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d103      	bne.n	8001e88 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	e002      	b.n	8001e8e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	490f      	ldr	r1, [pc, #60]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001eac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001eb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <FLASH_Erase_Sector+0x8c>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	6113      	str	r3, [r2, #16]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d017      	beq.n	8001f20 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001ef6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001efa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f12:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d017      	beq.n	8001f5c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f4e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <FLASH_FlushCaches+0x88>)
 8001f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f5a:	6013      	str	r3, [r2, #0]
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023c00 	.word	0x40023c00

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e16b      	b.n	8002260 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 815a 	bne.w	800225a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d005      	beq.n	8001fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d130      	bne.n	8002020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d017      	beq.n	800205c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d123      	bne.n	80020b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80b4 	beq.w	800225a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b60      	ldr	r3, [pc, #384]	; (8002278 <HAL_GPIO_Init+0x30c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a5f      	ldr	r2, [pc, #380]	; (8002278 <HAL_GPIO_Init+0x30c>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <HAL_GPIO_Init+0x30c>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210e:	4a5b      	ldr	r2, [pc, #364]	; (800227c <HAL_GPIO_Init+0x310>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_GPIO_Init+0x314>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d02b      	beq.n	8002192 <HAL_GPIO_Init+0x226>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a51      	ldr	r2, [pc, #324]	; (8002284 <HAL_GPIO_Init+0x318>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d025      	beq.n	800218e <HAL_GPIO_Init+0x222>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a50      	ldr	r2, [pc, #320]	; (8002288 <HAL_GPIO_Init+0x31c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01f      	beq.n	800218a <HAL_GPIO_Init+0x21e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4f      	ldr	r2, [pc, #316]	; (800228c <HAL_GPIO_Init+0x320>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d019      	beq.n	8002186 <HAL_GPIO_Init+0x21a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4e      	ldr	r2, [pc, #312]	; (8002290 <HAL_GPIO_Init+0x324>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0x216>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4d      	ldr	r2, [pc, #308]	; (8002294 <HAL_GPIO_Init+0x328>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00d      	beq.n	800217e <HAL_GPIO_Init+0x212>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <HAL_GPIO_Init+0x32c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <HAL_GPIO_Init+0x20e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4b      	ldr	r2, [pc, #300]	; (800229c <HAL_GPIO_Init+0x330>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_GPIO_Init+0x20a>
 8002172:	2307      	movs	r3, #7
 8002174:	e00e      	b.n	8002194 <HAL_GPIO_Init+0x228>
 8002176:	2308      	movs	r3, #8
 8002178:	e00c      	b.n	8002194 <HAL_GPIO_Init+0x228>
 800217a:	2306      	movs	r3, #6
 800217c:	e00a      	b.n	8002194 <HAL_GPIO_Init+0x228>
 800217e:	2305      	movs	r3, #5
 8002180:	e008      	b.n	8002194 <HAL_GPIO_Init+0x228>
 8002182:	2304      	movs	r3, #4
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x228>
 8002186:	2303      	movs	r3, #3
 8002188:	e004      	b.n	8002194 <HAL_GPIO_Init+0x228>
 800218a:	2302      	movs	r3, #2
 800218c:	e002      	b.n	8002194 <HAL_GPIO_Init+0x228>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_GPIO_Init+0x228>
 8002192:	2300      	movs	r3, #0
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	f002 0203 	and.w	r2, r2, #3
 800219a:	0092      	lsls	r2, r2, #2
 800219c:	4093      	lsls	r3, r2
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a4:	4935      	ldr	r1, [pc, #212]	; (800227c <HAL_GPIO_Init+0x310>)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_GPIO_Init+0x334>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d6:	4a32      	ldr	r2, [pc, #200]	; (80022a0 <HAL_GPIO_Init+0x334>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021dc:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_GPIO_Init+0x334>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002200:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <HAL_GPIO_Init+0x334>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_GPIO_Init+0x334>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800222a:	4a1d      	ldr	r2, [pc, #116]	; (80022a0 <HAL_GPIO_Init+0x334>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_GPIO_Init+0x334>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002254:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <HAL_GPIO_Init+0x334>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b0f      	cmp	r3, #15
 8002264:	f67f ae90 	bls.w	8001f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40013800 	.word	0x40013800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020400 	.word	0x40020400
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	40021000 	.word	0x40021000
 8002294:	40021400 	.word	0x40021400
 8002298:	40021800 	.word	0x40021800
 800229c:	40021c00 	.word	0x40021c00
 80022a0:	40013c00 	.word	0x40013c00

080022a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e001      	b.n	80022c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f806 	bl	8002338 <HAL_GPIO_EXTI_Callback>
  }
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40013c00 	.word	0x40013c00

08002338 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800234e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002350:	b08f      	sub	sp, #60	; 0x3c
 8002352:	af0a      	add	r7, sp, #40	; 0x28
 8002354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e054      	b.n	800240a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f005 fcec 	bl	8007d58 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2203      	movs	r2, #3
 8002384:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fcde 	bl	8005d60 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	687e      	ldr	r6, [r7, #4]
 80023ac:	466d      	mov	r5, sp
 80023ae:	f106 0410 	add.w	r4, r6, #16
 80023b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023be:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c2:	1d33      	adds	r3, r6, #4
 80023c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f003 fc58 	bl	8005c7c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fcd5 	bl	8005d82 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	687e      	ldr	r6, [r7, #4]
 80023e0:	466d      	mov	r5, sp
 80023e2:	f106 0410 	add.w	r4, r6, #16
 80023e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f6:	1d33      	adds	r3, r6, #4
 80023f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fa:	6838      	ldr	r0, [r7, #0]
 80023fc:	f003 fe5e 	bl	80060bc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002412 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002412:	b590      	push	{r4, r7, lr}
 8002414:	b089      	sub	sp, #36	; 0x24
 8002416:	af04      	add	r7, sp, #16
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	4608      	mov	r0, r1
 800241c:	4611      	mov	r1, r2
 800241e:	461a      	mov	r2, r3
 8002420:	4603      	mov	r3, r0
 8002422:	70fb      	strb	r3, [r7, #3]
 8002424:	460b      	mov	r3, r1
 8002426:	70bb      	strb	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_HCD_HC_Init+0x28>
 8002436:	2302      	movs	r3, #2
 8002438:	e076      	b.n	8002528 <HAL_HCD_HC_Init+0x116>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	333d      	adds	r3, #61	; 0x3d
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3338      	adds	r3, #56	; 0x38
 8002462:	787a      	ldrb	r2, [r7, #1]
 8002464:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3340      	adds	r3, #64	; 0x40
 8002474:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002476:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3339      	adds	r3, #57	; 0x39
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	333f      	adds	r3, #63	; 0x3f
 8002498:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800249c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	78ba      	ldrb	r2, [r7, #2]
 80024a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024a6:	b2d0      	uxtb	r0, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	333a      	adds	r3, #58	; 0x3a
 80024b4:	4602      	mov	r2, r0
 80024b6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80024b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da09      	bge.n	80024d4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	333b      	adds	r3, #59	; 0x3b
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e008      	b.n	80024e6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	333b      	adds	r3, #59	; 0x3b
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	333c      	adds	r3, #60	; 0x3c
 80024f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024f8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	787c      	ldrb	r4, [r7, #1]
 8002500:	78ba      	ldrb	r2, [r7, #2]
 8002502:	78f9      	ldrb	r1, [r7, #3]
 8002504:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4623      	mov	r3, r4
 8002516:	f003 ff2d 	bl	8006374 <USB_HC_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bd90      	pop	{r4, r7, pc}

08002530 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_HCD_HC_Halt+0x1e>
 800254a:	2302      	movs	r3, #2
 800254c:	e00f      	b.n	800256e <HAL_HCD_HC_Halt+0x3e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f004 f97d 	bl	800685e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	4603      	mov	r3, r0
 8002588:	70fb      	strb	r3, [r7, #3]
 800258a:	460b      	mov	r3, r1
 800258c:	70bb      	strb	r3, [r7, #2]
 800258e:	4613      	mov	r3, r2
 8002590:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	333b      	adds	r3, #59	; 0x3b
 80025a0:	78ba      	ldrb	r2, [r7, #2]
 80025a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	333f      	adds	r3, #63	; 0x3f
 80025b2:	787a      	ldrb	r2, [r7, #1]
 80025b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80025b6:	7c3b      	ldrb	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d112      	bne.n	80025e2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3342      	adds	r3, #66	; 0x42
 80025ca:	2203      	movs	r2, #3
 80025cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	333d      	adds	r3, #61	; 0x3d
 80025dc:	7f3a      	ldrb	r2, [r7, #28]
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e008      	b.n	80025f4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3342      	adds	r3, #66	; 0x42
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	f200 80c6 	bhi.w	8002788 <HAL_HCD_HC_SubmitRequest+0x210>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	08002615 	.word	0x08002615
 8002608:	08002775 	.word	0x08002775
 800260c:	08002679 	.word	0x08002679
 8002610:	080026f7 	.word	0x080026f7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002614:	7c3b      	ldrb	r3, [r7, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	f040 80b8 	bne.w	800278c <HAL_HCD_HC_SubmitRequest+0x214>
 800261c:	78bb      	ldrb	r3, [r7, #2]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 80b4 	bne.w	800278c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002624:	8b3b      	ldrh	r3, [r7, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d108      	bne.n	800263c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3355      	adds	r3, #85	; 0x55
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3355      	adds	r3, #85	; 0x55
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3342      	adds	r3, #66	; 0x42
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002662:	e093      	b.n	800278c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3342      	adds	r3, #66	; 0x42
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
      break;
 8002676:	e089      	b.n	800278c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002678:	78bb      	ldrb	r3, [r7, #2]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11d      	bne.n	80026ba <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3355      	adds	r3, #85	; 0x55
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3342      	adds	r3, #66	; 0x42
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80026a4:	e073      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3342      	adds	r3, #66	; 0x42
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
      break;
 80026b8:	e069      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3354      	adds	r3, #84	; 0x54
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	3342      	adds	r3, #66	; 0x42
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
      break;
 80026e0:	e055      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3342      	adds	r3, #66	; 0x42
 80026f0:	2202      	movs	r2, #2
 80026f2:	701a      	strb	r2, [r3, #0]
      break;
 80026f4:	e04b      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026f6:	78bb      	ldrb	r3, [r7, #2]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d11d      	bne.n	8002738 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3355      	adds	r3, #85	; 0x55
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3342      	adds	r3, #66	; 0x42
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002722:	e034      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3342      	adds	r3, #66	; 0x42
 8002732:	2202      	movs	r2, #2
 8002734:	701a      	strb	r2, [r3, #0]
      break;
 8002736:	e02a      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3354      	adds	r3, #84	; 0x54
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3342      	adds	r3, #66	; 0x42
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
      break;
 800275e:	e016      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	3342      	adds	r3, #66	; 0x42
 800276e:	2202      	movs	r2, #2
 8002770:	701a      	strb	r2, [r3, #0]
      break;
 8002772:	e00c      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3342      	adds	r3, #66	; 0x42
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
      break;
 8002786:	e002      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002788:	bf00      	nop
 800278a:	e000      	b.n	800278e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800278c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3344      	adds	r3, #68	; 0x44
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	8b3a      	ldrh	r2, [r7, #24]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	202c      	movs	r0, #44	; 0x2c
 80027a8:	fb00 f303 	mul.w	r3, r0, r3
 80027ac:	440b      	add	r3, r1
 80027ae:	334c      	adds	r3, #76	; 0x4c
 80027b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3360      	adds	r3, #96	; 0x60
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3350      	adds	r3, #80	; 0x50
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3339      	adds	r3, #57	; 0x39
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3361      	adds	r3, #97	; 0x61
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	222c      	movs	r2, #44	; 0x2c
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	3338      	adds	r3, #56	; 0x38
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	18d1      	adds	r1, r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	f003 fed0 	bl	80065b8 <USB_HC_StartXfer>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop

08002824 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fbfb 	bl	8006036 <USB_GetMode>
 8002840:	4603      	mov	r3, r0
 8002842:	2b01      	cmp	r3, #1
 8002844:	f040 80f6 	bne.w	8002a34 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 fbdf 	bl	8006010 <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80ec 	beq.w	8002a32 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fbd6 	bl	8006010 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800286e:	d104      	bne.n	800287a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002878:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fbc6 	bl	8006010 <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800288e:	d104      	bne.n	800289a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002898:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fbb6 	bl	8006010 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ae:	d104      	bne.n	80028ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fba6 	bl	8006010 <USB_ReadInterrupts>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d103      	bne.n	80028d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2202      	movs	r2, #2
 80028d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 fb98 	bl	8006010 <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ea:	d11c      	bne.n	8002926 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002906:	2110      	movs	r1, #16
 8002908:	6938      	ldr	r0, [r7, #16]
 800290a:	f003 fa87 	bl	8005e1c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800290e:	6938      	ldr	r0, [r7, #16]
 8002910:	f003 fab8 	bl	8005e84 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fc8e 	bl	800623c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f005 fa97 	bl	8007e54 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f003 fb70 	bl	8006010 <USB_ReadInterrupts>
 8002930:	4603      	mov	r3, r0
 8002932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800293a:	d102      	bne.n	8002942 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f001 f882 	bl	8003a46 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f003 fb62 	bl	8006010 <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b08      	cmp	r3, #8
 8002954:	d106      	bne.n	8002964 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f005 fa60 	bl	8007e1c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2208      	movs	r2, #8
 8002962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f003 fb51 	bl	8006010 <USB_ReadInterrupts>
 800296e:	4603      	mov	r3, r0
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b10      	cmp	r3, #16
 8002976:	d101      	bne.n	800297c <HAL_HCD_IRQHandler+0x158>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_HCD_IRQHandler+0x15a>
 800297c:	2300      	movs	r3, #0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d012      	beq.n	80029a8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0210 	bic.w	r2, r2, #16
 8002990:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 ff85 	bl	80038a2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0210 	orr.w	r2, r2, #16
 80029a6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fb2f 	bl	8006010 <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029bc:	d13a      	bne.n	8002a34 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 ff3a 	bl	800683c <USB_HC_ReadInterrupt>
 80029c8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e025      	b.n	8002a1c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d018      	beq.n	8002a16 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029fa:	d106      	bne.n	8002a0a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f88f 	bl	8002b26 <HCD_HC_IN_IRQHandler>
 8002a08:	e005      	b.n	8002a16 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fbdd 	bl	80031d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3d4      	bcc.n	80029d0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2e:	615a      	str	r2, [r3, #20]
 8002a30:	e000      	b.n	8002a34 <HAL_HCD_IRQHandler+0x210>
      return;
 8002a32:	bf00      	nop
    }
  }
}
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_HCD_Start+0x16>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e013      	b.n	8002a78 <HAL_HCD_Start+0x3e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 fc26 	bl	80062b0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 f968 	bl	8005d3e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_HCD_Stop+0x16>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e00d      	b.n	8002ab2 <HAL_HCD_Stop+0x32>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 f814 	bl	8006ad0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3360      	adds	r3, #96	; 0x60
 8002ad4:	781b      	ldrb	r3, [r3, #0]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3350      	adds	r3, #80	; 0x50
 8002afc:	681b      	ldr	r3, [r3, #0]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 fc1a 	bl	8006350 <USB_GetCurrentFrame>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d11a      	bne.n	8002b8c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	2304      	movs	r3, #4
 8002b66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3361      	adds	r3, #97	; 0x61
 8002b76:	2206      	movs	r2, #6
 8002b78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fe6a 	bl	800685e <USB_HC_Halt>
 8002b8a:	e0af      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba2:	d11b      	bne.n	8002bdc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3361      	adds	r3, #97	; 0x61
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fe42 	bl	800685e <USB_HC_Halt>
 8002bda:	e087      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d109      	bne.n	8002c06 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2320      	movs	r3, #32
 8002c02:	6093      	str	r3, [r2, #8]
 8002c04:	e072      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d11a      	bne.n	8002c52 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3361      	adds	r3, #97	; 0x61
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fe07 	bl	800685e <USB_HC_Halt>
 8002c50:	e04c      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d11b      	bne.n	8002ca2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c76:	461a      	mov	r2, r3
 8002c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3361      	adds	r3, #97	; 0x61
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fddf 	bl	800685e <USB_HC_Halt>
 8002ca0:	e024      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb4:	2b80      	cmp	r3, #128	; 0x80
 8002cb6:	d119      	bne.n	8002cec <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3361      	adds	r3, #97	; 0x61
 8002cd8:	2206      	movs	r2, #6
 8002cda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 fdb9 	bl	800685e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d02:	d112      	bne.n	8002d2a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 fda5 	bl	800685e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	461a      	mov	r2, r3
 8002d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d26:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002d28:	e24e      	b.n	80031c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	f040 80df 	bne.w	8002f00 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d019      	beq.n	8002d7e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3348      	adds	r3, #72	; 0x48
 8002d58:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	0159      	lsls	r1, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d6c:	1ad2      	subs	r2, r2, r3
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	202c      	movs	r0, #44	; 0x2c
 8002d74:	fb00 f303 	mul.w	r3, r0, r3
 8002d78:	440b      	add	r3, r1
 8002d7a:	3350      	adds	r3, #80	; 0x50
 8002d7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3361      	adds	r3, #97	; 0x61
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	335c      	adds	r3, #92	; 0x5c
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	461a      	mov	r2, r3
 8002db0:	2301      	movs	r3, #1
 8002db2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	333f      	adds	r3, #63	; 0x3f
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	333f      	adds	r3, #63	; 0x3f
 8002dd6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d111      	bne.n	8002e00 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 fd39 	bl	800685e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2310      	movs	r3, #16
 8002dfc:	6093      	str	r3, [r2, #8]
 8002dfe:	e03a      	b.n	8002e76 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	333f      	adds	r3, #63	; 0x3f
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d009      	beq.n	8002e28 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	333f      	adds	r3, #63	; 0x3f
 8002e22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d126      	bne.n	8002e76 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	0151      	lsls	r1, r2, #5
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	440a      	add	r2, r1
 8002e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e46:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3360      	adds	r3, #96	; 0x60
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	b2d9      	uxtb	r1, r3
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	202c      	movs	r0, #44	; 0x2c
 8002e64:	fb00 f303 	mul.w	r3, r0, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	3360      	adds	r3, #96	; 0x60
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f004 fffd 	bl	8007e70 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d12b      	bne.n	8002ed6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3348      	adds	r3, #72	; 0x48
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	202c      	movs	r0, #44	; 0x2c
 8002e94:	fb00 f202 	mul.w	r2, r0, r2
 8002e98:	440a      	add	r2, r1
 8002e9a:	3240      	adds	r2, #64	; 0x40
 8002e9c:	8812      	ldrh	r2, [r2, #0]
 8002e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 818e 	beq.w	80031c8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3354      	adds	r3, #84	; 0x54
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2d8      	uxtb	r0, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3354      	adds	r3, #84	; 0x54
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	701a      	strb	r2, [r3, #0]
}
 8002ed4:	e178      	b.n	80031c8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3354      	adds	r3, #84	; 0x54
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f083 0301 	eor.w	r3, r3, #1
 8002eea:	b2d8      	uxtb	r0, r3
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3354      	adds	r3, #84	; 0x54
 8002efa:	4602      	mov	r2, r0
 8002efc:	701a      	strb	r2, [r3, #0]
}
 8002efe:	e163      	b.n	80031c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	f040 80f6 	bne.w	8003104 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3361      	adds	r3, #97	; 0x61
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d109      	bne.n	8002f40 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3360      	adds	r3, #96	; 0x60
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e0c9      	b.n	80030d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3361      	adds	r3, #97	; 0x61
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d109      	bne.n	8002f68 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3360      	adds	r3, #96	; 0x60
 8002f62:	2205      	movs	r2, #5
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	e0b5      	b.n	80030d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	3361      	adds	r3, #97	; 0x61
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d009      	beq.n	8002f90 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3361      	adds	r3, #97	; 0x61
 8002f8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d150      	bne.n	8003032 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	335c      	adds	r3, #92	; 0x5c
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	202c      	movs	r0, #44	; 0x2c
 8002fa8:	fb00 f303 	mul.w	r3, r0, r3
 8002fac:	440b      	add	r3, r1
 8002fae:	335c      	adds	r3, #92	; 0x5c
 8002fb0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	335c      	adds	r3, #92	; 0x5c
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d912      	bls.n	8002fec <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	335c      	adds	r3, #92	; 0x5c
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3360      	adds	r3, #96	; 0x60
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fea:	e073      	b.n	80030d4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3360      	adds	r3, #96	; 0x60
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003014:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800301c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	461a      	mov	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003030:	e050      	b.n	80030d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3361      	adds	r3, #97	; 0x61
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d122      	bne.n	800308c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	3360      	adds	r3, #96	; 0x60
 8003054:	2202      	movs	r2, #2
 8003056:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800306e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003076:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e023      	b.n	80030d4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3361      	adds	r3, #97	; 0x61
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b07      	cmp	r3, #7
 800309e:	d119      	bne.n	80030d4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	335c      	adds	r3, #92	; 0x5c
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	202c      	movs	r0, #44	; 0x2c
 80030b8:	fb00 f303 	mul.w	r3, r0, r3
 80030bc:	440b      	add	r3, r1
 80030be:	335c      	adds	r3, #92	; 0x5c
 80030c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3360      	adds	r3, #96	; 0x60
 80030d0:	2204      	movs	r2, #4
 80030d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	2302      	movs	r3, #2
 80030e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	b2d9      	uxtb	r1, r3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	202c      	movs	r0, #44	; 0x2c
 80030f0:	fb00 f303 	mul.w	r3, r0, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	3360      	adds	r3, #96	; 0x60
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f004 feb7 	bl	8007e70 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003102:	e061      	b.n	80031c8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d156      	bne.n	80031c8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	333f      	adds	r3, #63	; 0x3f
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d111      	bne.n	8003152 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	335c      	adds	r3, #92	; 0x5c
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fb87 	bl	800685e <USB_HC_Halt>
 8003150:	e031      	b.n	80031b6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	333f      	adds	r3, #63	; 0x3f
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	333f      	adds	r3, #63	; 0x3f
 8003174:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003176:	2b02      	cmp	r3, #2
 8003178:	d11d      	bne.n	80031b6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	335c      	adds	r3, #92	; 0x5c
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d110      	bne.n	80031b6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3361      	adds	r3, #97	; 0x61
 80031a2:	2203      	movs	r2, #3
 80031a4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fb54 	bl	800685e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	461a      	mov	r2, r3
 80031c4:	2310      	movs	r3, #16
 80031c6:	6093      	str	r3, [r2, #8]
}
 80031c8:	bf00      	nop
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d11a      	bne.n	8003236 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	461a      	mov	r2, r3
 800320e:	2304      	movs	r3, #4
 8003210:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	3361      	adds	r3, #97	; 0x61
 8003220:	2206      	movs	r2, #6
 8003222:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f003 fb15 	bl	800685e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003234:	e331      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b20      	cmp	r3, #32
 800324a:	d12e      	bne.n	80032aa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003258:	461a      	mov	r2, r3
 800325a:	2320      	movs	r3, #32
 800325c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	333d      	adds	r3, #61	; 0x3d
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	f040 8313 	bne.w	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	333d      	adds	r3, #61	; 0x3d
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3360      	adds	r3, #96	; 0x60
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f003 fadb 	bl	800685e <USB_HC_Halt>
}
 80032a8:	e2f7      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c0:	d112      	bne.n	80032e8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ce:	461a      	mov	r2, r3
 80032d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 fabc 	bl	800685e <USB_HC_Halt>
}
 80032e6:	e2d8      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d140      	bne.n	8003380 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	335c      	adds	r3, #92	; 0x5c
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d111      	bne.n	800334a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	333d      	adds	r3, #61	; 0x3d
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003344:	461a      	mov	r2, r3
 8003346:	2340      	movs	r3, #64	; 0x40
 8003348:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	2301      	movs	r3, #1
 800335a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3361      	adds	r3, #97	; 0x61
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fa70 	bl	800685e <USB_HC_Halt>
}
 800337e:	e28c      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d12c      	bne.n	80033f0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	3361      	adds	r3, #97	; 0x61
 80033a4:	2204      	movs	r2, #4
 80033a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	333d      	adds	r3, #61	; 0x3d
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	335c      	adds	r3, #92	; 0x5c
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 fa41 	bl	800685e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e8:	461a      	mov	r2, r3
 80033ea:	2340      	movs	r3, #64	; 0x40
 80033ec:	6093      	str	r3, [r2, #8]
}
 80033ee:	e254      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d11a      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4413      	add	r3, r2
 800340e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003412:	461a      	mov	r2, r3
 8003414:	2308      	movs	r3, #8
 8003416:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3361      	adds	r3, #97	; 0x61
 8003426:	2205      	movs	r2, #5
 8003428:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f003 fa12 	bl	800685e <USB_HC_Halt>
}
 800343a:	e22e      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b10      	cmp	r3, #16
 8003450:	d140      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	335c      	adds	r3, #92	; 0x5c
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	2203      	movs	r2, #3
 8003474:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	333d      	adds	r3, #61	; 0x3d
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d112      	bne.n	80034b0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	333c      	adds	r3, #60	; 0x3c
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d108      	bne.n	80034b0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	333d      	adds	r3, #61	; 0x3d
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 f9cf 	bl	800685e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	461a      	mov	r2, r3
 80034ce:	2310      	movs	r3, #16
 80034d0:	6093      	str	r3, [r2, #8]
}
 80034d2:	e1e2      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b80      	cmp	r3, #128	; 0x80
 80034e8:	d164      	bne.n	80035b4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d111      	bne.n	8003516 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3361      	adds	r3, #97	; 0x61
 8003500:	2206      	movs	r2, #6
 8003502:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f003 f9a5 	bl	800685e <USB_HC_Halt>
 8003514:	e044      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	335c      	adds	r3, #92	; 0x5c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	202c      	movs	r0, #44	; 0x2c
 800352e:	fb00 f303 	mul.w	r3, r0, r3
 8003532:	440b      	add	r3, r1
 8003534:	335c      	adds	r3, #92	; 0x5c
 8003536:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	335c      	adds	r3, #92	; 0x5c
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d920      	bls.n	800358e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	212c      	movs	r1, #44	; 0x2c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	335c      	adds	r3, #92	; 0x5c
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	212c      	movs	r1, #44	; 0x2c
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	4413      	add	r3, r2
 800356a:	3360      	adds	r3, #96	; 0x60
 800356c:	2204      	movs	r2, #4
 800356e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	b2d9      	uxtb	r1, r3
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	202c      	movs	r0, #44	; 0x2c
 800357a:	fb00 f303 	mul.w	r3, r0, r3
 800357e:	4413      	add	r3, r2
 8003580:	3360      	adds	r3, #96	; 0x60
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f004 fc72 	bl	8007e70 <HAL_HCD_HC_NotifyURBChange_Callback>
 800358c:	e008      	b.n	80035a0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	3360      	adds	r3, #96	; 0x60
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	461a      	mov	r2, r3
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	6093      	str	r3, [r2, #8]
}
 80035b2:	e172      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ca:	d11b      	bne.n	8003604 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	3361      	adds	r3, #97	; 0x61
 80035da:	2208      	movs	r2, #8
 80035dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 f938 	bl	800685e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fa:	461a      	mov	r2, r3
 80035fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003600:	6093      	str	r3, [r2, #8]
}
 8003602:	e14a      	b.n	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	f040 813f 	bne.w	800389a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	3361      	adds	r3, #97	; 0x61
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d17d      	bne.n	800372c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	333f      	adds	r3, #63	; 0x3f
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d00a      	beq.n	800366c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	333f      	adds	r3, #63	; 0x3f
 8003664:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003666:	2b03      	cmp	r3, #3
 8003668:	f040 8100 	bne.w	800386c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d113      	bne.n	800369c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3355      	adds	r3, #85	; 0x55
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	f083 0301 	eor.w	r3, r3, #1
 8003688:	b2d8      	uxtb	r0, r3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	3355      	adds	r3, #85	; 0x55
 8003698:	4602      	mov	r2, r0
 800369a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	f040 80e3 	bne.w	800386c <HCD_HC_OUT_IRQHandler+0x69c>
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	334c      	adds	r3, #76	; 0x4c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80d8 	beq.w	800386c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	334c      	adds	r3, #76	; 0x4c
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	202c      	movs	r0, #44	; 0x2c
 80036d2:	fb00 f202 	mul.w	r2, r0, r2
 80036d6:	440a      	add	r2, r1
 80036d8:	3240      	adds	r2, #64	; 0x40
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	3b01      	subs	r3, #1
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	202c      	movs	r0, #44	; 0x2c
 80036e6:	fb00 f202 	mul.w	r2, r0, r2
 80036ea:	440a      	add	r2, r1
 80036ec:	3240      	adds	r2, #64	; 0x40
 80036ee:	8812      	ldrh	r2, [r2, #0]
 80036f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80b5 	beq.w	800386c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	212c      	movs	r1, #44	; 0x2c
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	4413      	add	r3, r2
 800370e:	3355      	adds	r3, #85	; 0x55
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	f083 0301 	eor.w	r3, r3, #1
 8003716:	b2d8      	uxtb	r0, r3
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3355      	adds	r3, #85	; 0x55
 8003726:	4602      	mov	r2, r0
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e09f      	b.n	800386c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	3361      	adds	r3, #97	; 0x61
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d109      	bne.n	8003754 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3360      	adds	r3, #96	; 0x60
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e08b      	b.n	800386c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3361      	adds	r3, #97	; 0x61
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d109      	bne.n	800377c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3360      	adds	r3, #96	; 0x60
 8003776:	2202      	movs	r2, #2
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e077      	b.n	800386c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3361      	adds	r3, #97	; 0x61
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b05      	cmp	r3, #5
 800378e:	d109      	bne.n	80037a4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3360      	adds	r3, #96	; 0x60
 800379e:	2205      	movs	r2, #5
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e063      	b.n	800386c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	212c      	movs	r1, #44	; 0x2c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	3361      	adds	r3, #97	; 0x61
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	d009      	beq.n	80037cc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3361      	adds	r3, #97	; 0x61
 80037c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d14f      	bne.n	800386c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	335c      	adds	r3, #92	; 0x5c
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	202c      	movs	r0, #44	; 0x2c
 80037e4:	fb00 f303 	mul.w	r3, r0, r3
 80037e8:	440b      	add	r3, r1
 80037ea:	335c      	adds	r3, #92	; 0x5c
 80037ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	335c      	adds	r3, #92	; 0x5c
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d912      	bls.n	8003828 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	335c      	adds	r3, #92	; 0x5c
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3360      	adds	r3, #96	; 0x60
 8003822:	2204      	movs	r2, #4
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	e021      	b.n	800386c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	4413      	add	r3, r2
 8003834:	3360      	adds	r3, #96	; 0x60
 8003836:	2202      	movs	r2, #2
 8003838:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003850:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003858:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003866:	461a      	mov	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	461a      	mov	r2, r3
 800387a:	2302      	movs	r3, #2
 800387c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	b2d9      	uxtb	r1, r3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	202c      	movs	r0, #44	; 0x2c
 8003888:	fb00 f303 	mul.w	r3, r0, r3
 800388c:	4413      	add	r3, r2
 800388e:	3360      	adds	r3, #96	; 0x60
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f004 faeb 	bl	8007e70 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800389a:	bf00      	nop
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b08a      	sub	sp, #40	; 0x28
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	0c5b      	lsrs	r3, r3, #17
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d004      	beq.n	80038e8 <HCD_RXQLVL_IRQHandler+0x46>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	f000 80a9 	beq.w	8003a38 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038e6:	e0aa      	b.n	8003a3e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80a6 	beq.w	8003a3c <HCD_RXQLVL_IRQHandler+0x19a>
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3344      	adds	r3, #68	; 0x44
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 809b 	beq.w	8003a3c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	3350      	adds	r3, #80	; 0x50
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	441a      	add	r2, r3
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	202c      	movs	r0, #44	; 0x2c
 8003920:	fb00 f303 	mul.w	r3, r0, r3
 8003924:	440b      	add	r3, r1
 8003926:	334c      	adds	r3, #76	; 0x4c
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d87a      	bhi.n	8003a24 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3344      	adds	r3, #68	; 0x44
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	b292      	uxth	r2, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f002 fb0a 	bl	8005f60 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3344      	adds	r3, #68	; 0x44
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	441a      	add	r2, r3
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	202c      	movs	r0, #44	; 0x2c
 8003966:	fb00 f303 	mul.w	r3, r0, r3
 800396a:	440b      	add	r3, r1
 800396c:	3344      	adds	r3, #68	; 0x44
 800396e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3350      	adds	r3, #80	; 0x50
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	441a      	add	r2, r3
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	202c      	movs	r0, #44	; 0x2c
 800398a:	fb00 f303 	mul.w	r3, r0, r3
 800398e:	440b      	add	r3, r1
 8003990:	3350      	adds	r3, #80	; 0x50
 8003992:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	0cdb      	lsrs	r3, r3, #19
 80039a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	3340      	adds	r3, #64	; 0x40
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4293      	cmp	r3, r2
 80039c0:	d13c      	bne.n	8003a3c <HCD_RXQLVL_IRQHandler+0x19a>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d039      	beq.n	8003a3c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039de:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039e6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f4:	461a      	mov	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	3354      	adds	r3, #84	; 0x54
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f083 0301 	eor.w	r3, r3, #1
 8003a0e:	b2d8      	uxtb	r0, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3354      	adds	r3, #84	; 0x54
 8003a1e:	4602      	mov	r2, r0
 8003a20:	701a      	strb	r2, [r3, #0]
      break;
 8003a22:	e00b      	b.n	8003a3c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	3360      	adds	r3, #96	; 0x60
 8003a32:	2204      	movs	r2, #4
 8003a34:	701a      	strb	r2, [r3, #0]
      break;
 8003a36:	e001      	b.n	8003a3c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a3c:	bf00      	nop
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3728      	adds	r7, #40	; 0x28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a72:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d10b      	bne.n	8003a96 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d102      	bne.n	8003a8e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f004 f9d5 	bl	8007e38 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d132      	bne.n	8003b06 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f043 0308 	orr.w	r3, r3, #8
 8003aa6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d126      	bne.n	8003b00 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d113      	bne.n	8003ae2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ac0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ac4:	d106      	bne.n	8003ad4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f002 fbb5 	bl	800623c <USB_InitFSLSPClkSel>
 8003ad2:	e011      	b.n	8003af8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f002 fbae 	bl	800623c <USB_InitFSLSPClkSel>
 8003ae0:	e00a      	b.n	8003af8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d106      	bne.n	8003af8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003af0:	461a      	mov	r2, r3
 8003af2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003af6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f004 f9c7 	bl	8007e8c <HAL_HCD_PortEnabled_Callback>
 8003afe:	e002      	b.n	8003b06 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f004 f9d1 	bl	8007ea8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d103      	bne.n	8003b18 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f043 0320 	orr.w	r3, r3, #32
 8003b16:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e12b      	b.n	8003d96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fae2 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2224      	movs	r2, #36	; 0x24
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b90:	f001 fa20 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8003b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4a81      	ldr	r2, [pc, #516]	; (8003da0 <HAL_I2C_Init+0x274>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d807      	bhi.n	8003bb0 <HAL_I2C_Init+0x84>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a80      	ldr	r2, [pc, #512]	; (8003da4 <HAL_I2C_Init+0x278>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf94      	ite	ls
 8003ba8:	2301      	movls	r3, #1
 8003baa:	2300      	movhi	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e006      	b.n	8003bbe <HAL_I2C_Init+0x92>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a7d      	ldr	r2, [pc, #500]	; (8003da8 <HAL_I2C_Init+0x27c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bf94      	ite	ls
 8003bb8:	2301      	movls	r3, #1
 8003bba:	2300      	movhi	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0e7      	b.n	8003d96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a78      	ldr	r2, [pc, #480]	; (8003dac <HAL_I2C_Init+0x280>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0c9b      	lsrs	r3, r3, #18
 8003bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a6a      	ldr	r2, [pc, #424]	; (8003da0 <HAL_I2C_Init+0x274>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d802      	bhi.n	8003c00 <HAL_I2C_Init+0xd4>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	e009      	b.n	8003c14 <HAL_I2C_Init+0xe8>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	4a69      	ldr	r2, [pc, #420]	; (8003db0 <HAL_I2C_Init+0x284>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	3301      	adds	r3, #1
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	495c      	ldr	r1, [pc, #368]	; (8003da0 <HAL_I2C_Init+0x274>)
 8003c30:	428b      	cmp	r3, r1
 8003c32:	d819      	bhi.n	8003c68 <HAL_I2C_Init+0x13c>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1e59      	subs	r1, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c48:	400b      	ands	r3, r1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_I2C_Init+0x138>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1e59      	subs	r1, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c62:	e051      	b.n	8003d08 <HAL_I2C_Init+0x1dc>
 8003c64:	2304      	movs	r3, #4
 8003c66:	e04f      	b.n	8003d08 <HAL_I2C_Init+0x1dc>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d111      	bne.n	8003c94 <HAL_I2C_Init+0x168>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1e58      	subs	r0, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	440b      	add	r3, r1
 8003c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e012      	b.n	8003cba <HAL_I2C_Init+0x18e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	0099      	lsls	r1, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Init+0x196>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e022      	b.n	8003d08 <HAL_I2C_Init+0x1dc>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_I2C_Init+0x1bc>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1e58      	subs	r0, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6859      	ldr	r1, [r3, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	440b      	add	r3, r1
 8003cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cdc:	3301      	adds	r3, #1
 8003cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce6:	e00f      	b.n	8003d08 <HAL_I2C_Init+0x1dc>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e58      	subs	r0, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	0099      	lsls	r1, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	6809      	ldr	r1, [r1, #0]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6911      	ldr	r1, [r2, #16]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	000186a0 	.word	0x000186a0
 8003da4:	001e847f 	.word	0x001e847f
 8003da8:	003d08ff 	.word	0x003d08ff
 8003dac:	431bde83 	.word	0x431bde83
 8003db0:	10624dd3 	.word	0x10624dd3

08003db4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e128      	b.n	8004018 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a90      	ldr	r2, [pc, #576]	; (8004020 <HAL_I2S_Init+0x26c>)
 8003dde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fd f9e3 	bl	80011ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003dfc:	f023 030f 	bic.w	r3, r3, #15
 8003e00:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2202      	movs	r2, #2
 8003e08:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d060      	beq.n	8003ed4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e1a:	2310      	movs	r3, #16
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e001      	b.n	8003e24 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e20:	2320      	movs	r3, #32
 8003e22:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d802      	bhi.n	8003e32 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f001 f9d8 	bl	80051e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e38:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e42:	d125      	bne.n	8003e90 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	461a      	mov	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	3305      	adds	r3, #5
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	e01f      	b.n	8003eae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	461a      	mov	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	3305      	adds	r3, #5
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e00e      	b.n	8003eae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	3305      	adds	r3, #5
 8003eac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4a5c      	ldr	r2, [pc, #368]	; (8004024 <HAL_I2S_Init+0x270>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	08db      	lsrs	r3, r3, #3
 8003eb8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e003      	b.n	8003edc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d902      	bls.n	8003ee8 <HAL_I2S_Init+0x134>
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	2bff      	cmp	r3, #255	; 0xff
 8003ee6:	d907      	bls.n	8003ef8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f043 0210 	orr.w	r2, r3, #16
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e08f      	b.n	8004018 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	ea42 0103 	orr.w	r1, r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f16:	f023 030f 	bic.w	r3, r3, #15
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6851      	ldr	r1, [r2, #4]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6892      	ldr	r2, [r2, #8]
 8003f22:	4311      	orrs	r1, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	68d2      	ldr	r2, [r2, #12]
 8003f28:	4311      	orrs	r1, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6992      	ldr	r2, [r2, #24]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d161      	bne.n	8004008 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a38      	ldr	r2, [pc, #224]	; (8004028 <HAL_I2S_Init+0x274>)
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a37      	ldr	r2, [pc, #220]	; (800402c <HAL_I2S_Init+0x278>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <HAL_I2S_Init+0x1a4>
 8003f54:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_I2S_Init+0x27c>)
 8003f56:	e001      	b.n	8003f5c <HAL_I2S_Init+0x1a8>
 8003f58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	4932      	ldr	r1, [pc, #200]	; (800402c <HAL_I2S_Init+0x278>)
 8003f64:	428a      	cmp	r2, r1
 8003f66:	d101      	bne.n	8003f6c <HAL_I2S_Init+0x1b8>
 8003f68:	4a31      	ldr	r2, [pc, #196]	; (8004030 <HAL_I2S_Init+0x27c>)
 8003f6a:	e001      	b.n	8003f70 <HAL_I2S_Init+0x1bc>
 8003f6c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f70:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f74:	f023 030f 	bic.w	r3, r3, #15
 8003f78:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2b      	ldr	r2, [pc, #172]	; (800402c <HAL_I2S_Init+0x278>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d101      	bne.n	8003f88 <HAL_I2S_Init+0x1d4>
 8003f84:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <HAL_I2S_Init+0x27c>)
 8003f86:	e001      	b.n	8003f8c <HAL_I2S_Init+0x1d8>
 8003f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a25      	ldr	r2, [pc, #148]	; (800402c <HAL_I2S_Init+0x278>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_I2S_Init+0x1ea>
 8003f9a:	4b25      	ldr	r3, [pc, #148]	; (8004030 <HAL_I2S_Init+0x27c>)
 8003f9c:	e001      	b.n	8003fa2 <HAL_I2S_Init+0x1ee>
 8003f9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fae:	d003      	beq.n	8003fb8 <HAL_I2S_Init+0x204>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	e001      	b.n	8003fc4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ff0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a0d      	ldr	r2, [pc, #52]	; (800402c <HAL_I2S_Init+0x278>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <HAL_I2S_Init+0x24c>
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <HAL_I2S_Init+0x27c>)
 8003ffe:	e001      	b.n	8004004 <HAL_I2S_Init+0x250>
 8004000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004004:	897a      	ldrh	r2, [r7, #10]
 8004006:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	0800412b 	.word	0x0800412b
 8004024:	cccccccd 	.word	0xcccccccd
 8004028:	08004241 	.word	0x08004241
 800402c:	40003800 	.word	0x40003800
 8004030:	40003400 	.word	0x40003400

08004034 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	881a      	ldrh	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10e      	bne.n	80040c4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ffb8 	bl	8004034 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	b292      	uxth	r2, r2
 80040e0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10e      	bne.n	8004122 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004112:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ff93 	bl	8004048 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b086      	sub	sp, #24
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b04      	cmp	r3, #4
 8004144:	d13a      	bne.n	80041bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d109      	bne.n	8004164 <I2S_IRQHandler+0x3a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d102      	bne.n	8004164 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ffb4 	bl	80040cc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d126      	bne.n	80041bc <I2S_IRQHandler+0x92>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b20      	cmp	r3, #32
 800417a:	d11f      	bne.n	80041bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800418a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f043 0202 	orr.w	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff ff50 	bl	800405c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d136      	bne.n	8004236 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d109      	bne.n	80041e6 <I2S_IRQHandler+0xbc>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d102      	bne.n	80041e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff45 	bl	8004070 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d122      	bne.n	8004236 <I2S_IRQHandler+0x10c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d11b      	bne.n	8004236 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800420c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	f043 0204 	orr.w	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff13 	bl	800405c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a92      	ldr	r2, [pc, #584]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800425a:	4b92      	ldr	r3, [pc, #584]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800425c:	e001      	b.n	8004262 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800425e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a8b      	ldr	r2, [pc, #556]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d101      	bne.n	800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004278:	4b8a      	ldr	r3, [pc, #552]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800427a:	e001      	b.n	8004280 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800427c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428c:	d004      	beq.n	8004298 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 8099 	bne.w	80043ca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d107      	bne.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f925 	bl	80044fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9c8 	bl	800465c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d13a      	bne.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d035      	beq.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6e      	ldr	r2, [pc, #440]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042ea:	4b6e      	ldr	r3, [pc, #440]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ec:	e001      	b.n	80042f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4969      	ldr	r1, [pc, #420]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042fa:	428b      	cmp	r3, r1
 80042fc:	d101      	bne.n	8004302 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042fe:	4b69      	ldr	r3, [pc, #420]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004300:	e001      	b.n	8004306 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004306:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800430a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800431a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f043 0202 	orr.w	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fe88 	bl	800405c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	f040 80c3 	bne.w	80044de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80bd 	beq.w	80044de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004372:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a49      	ldr	r2, [pc, #292]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004380:	e001      	b.n	8004386 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4944      	ldr	r1, [pc, #272]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800438e:	428b      	cmp	r3, r1
 8004390:	d101      	bne.n	8004396 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004392:	4b44      	ldr	r3, [pc, #272]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004394:	e001      	b.n	800439a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004396:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800439a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800439e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043a0:	2300      	movs	r3, #0
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f043 0204 	orr.w	r2, r3, #4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fe4a 	bl	800405c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043c8:	e089      	b.n	80044de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d107      	bne.n	80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f8be 	bl	8004560 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d107      	bne.n	80043fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8fd 	bl	80045f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d12f      	bne.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02a      	beq.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004420:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d101      	bne.n	8004430 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800442e:	e001      	b.n	8004434 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004430:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4919      	ldr	r1, [pc, #100]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800443c:	428b      	cmp	r3, r1
 800443e:	d101      	bne.n	8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004440:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004442:	e001      	b.n	8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004444:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004448:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800444c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f043 0202 	orr.w	r2, r3, #2
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fdfa 	bl	800405c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b08      	cmp	r3, #8
 8004470:	d136      	bne.n	80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d031      	beq.n	80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004488:	e001      	b.n	800448e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800448a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4902      	ldr	r1, [pc, #8]	; (80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004496:	428b      	cmp	r3, r1
 8004498:	d106      	bne.n	80044a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800449a:	4b02      	ldr	r3, [pc, #8]	; (80044a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800449c:	e006      	b.n	80044ac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800449e:	bf00      	nop
 80044a0:	40003800 	.word	0x40003800
 80044a4:	40003400 	.word	0x40003400
 80044a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044b0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f043 0204 	orr.w	r2, r3, #4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fdc0 	bl	800405c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044dc:	e000      	b.n	80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044de:	bf00      	nop
}
 80044e0:	bf00      	nop
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c99      	adds	r1, r3, #2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6251      	str	r1, [r2, #36]	; 0x24
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d113      	bne.n	8004556 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800453c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ffc9 	bl	80044e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c99      	adds	r1, r3, #2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6251      	str	r1, [r2, #36]	; 0x24
 8004572:	8819      	ldrh	r1, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <I2SEx_TxISR_I2SExt+0x90>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <I2SEx_TxISR_I2SExt+0x22>
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <I2SEx_TxISR_I2SExt+0x94>)
 8004580:	e001      	b.n	8004586 <I2SEx_TxISR_I2SExt+0x26>
 8004582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004586:	460a      	mov	r2, r1
 8004588:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d121      	bne.n	80045e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <I2SEx_TxISR_I2SExt+0x90>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d101      	bne.n	80045b0 <I2SEx_TxISR_I2SExt+0x50>
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <I2SEx_TxISR_I2SExt+0x94>)
 80045ae:	e001      	b.n	80045b4 <I2SEx_TxISR_I2SExt+0x54>
 80045b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	490d      	ldr	r1, [pc, #52]	; (80045f0 <I2SEx_TxISR_I2SExt+0x90>)
 80045bc:	428b      	cmp	r3, r1
 80045be:	d101      	bne.n	80045c4 <I2SEx_TxISR_I2SExt+0x64>
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <I2SEx_TxISR_I2SExt+0x94>)
 80045c2:	e001      	b.n	80045c8 <I2SEx_TxISR_I2SExt+0x68>
 80045c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ff81 	bl	80044e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40003800 	.word	0x40003800
 80045f4:	40003400 	.word	0x40003400

080045f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68d8      	ldr	r0, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	1c99      	adds	r1, r3, #2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004610:	b282      	uxth	r2, r0
 8004612:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d113      	bne.n	8004654 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800463a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ff4a 	bl	80044e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a20      	ldr	r2, [pc, #128]	; (80046ec <I2SEx_RxISR_I2SExt+0x90>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <I2SEx_RxISR_I2SExt+0x16>
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <I2SEx_RxISR_I2SExt+0x94>)
 8004670:	e001      	b.n	8004676 <I2SEx_RxISR_I2SExt+0x1a>
 8004672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004676:	68d8      	ldr	r0, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	1c99      	adds	r1, r3, #2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004682:	b282      	uxth	r2, r0
 8004684:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d121      	bne.n	80046e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <I2SEx_RxISR_I2SExt+0x90>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <I2SEx_RxISR_I2SExt+0x50>
 80046a8:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <I2SEx_RxISR_I2SExt+0x94>)
 80046aa:	e001      	b.n	80046b0 <I2SEx_RxISR_I2SExt+0x54>
 80046ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	490d      	ldr	r1, [pc, #52]	; (80046ec <I2SEx_RxISR_I2SExt+0x90>)
 80046b8:	428b      	cmp	r3, r1
 80046ba:	d101      	bne.n	80046c0 <I2SEx_RxISR_I2SExt+0x64>
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <I2SEx_RxISR_I2SExt+0x94>)
 80046be:	e001      	b.n	80046c4 <I2SEx_RxISR_I2SExt+0x68>
 80046c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff03 	bl	80044e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40003800 	.word	0x40003800
 80046f0:	40003400 	.word	0x40003400

080046f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e267      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d075      	beq.n	80047fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004712:	4b88      	ldr	r3, [pc, #544]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b04      	cmp	r3, #4
 800471c:	d00c      	beq.n	8004738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471e:	4b85      	ldr	r3, [pc, #532]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004726:	2b08      	cmp	r3, #8
 8004728:	d112      	bne.n	8004750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472a:	4b82      	ldr	r3, [pc, #520]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004736:	d10b      	bne.n	8004750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	4b7e      	ldr	r3, [pc, #504]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05b      	beq.n	80047fc <HAL_RCC_OscConfig+0x108>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d157      	bne.n	80047fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e242      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004758:	d106      	bne.n	8004768 <HAL_RCC_OscConfig+0x74>
 800475a:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a75      	ldr	r2, [pc, #468]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e01d      	b.n	80047a4 <HAL_RCC_OscConfig+0xb0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x98>
 8004772:	4b70      	ldr	r3, [pc, #448]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a6f      	ldr	r2, [pc, #444]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b6d      	ldr	r3, [pc, #436]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6c      	ldr	r2, [pc, #432]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0xb0>
 800478c:	4b69      	ldr	r3, [pc, #420]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a68      	ldr	r2, [pc, #416]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b66      	ldr	r3, [pc, #408]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a65      	ldr	r2, [pc, #404]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fc ff7e 	bl	80016ac <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fc ff7a 	bl	80016ac <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e207      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b5b      	ldr	r3, [pc, #364]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0xc0>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fc ff6a 	bl	80016ac <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fc ff66 	bl	80016ac <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1f3      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	4b51      	ldr	r3, [pc, #324]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0xe8>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d063      	beq.n	80048d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800480a:	4b4a      	ldr	r3, [pc, #296]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004816:	4b47      	ldr	r3, [pc, #284]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800481e:	2b08      	cmp	r3, #8
 8004820:	d11c      	bne.n	800485c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b44      	ldr	r3, [pc, #272]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	4b41      	ldr	r3, [pc, #260]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_OscConfig+0x152>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1c7      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4937      	ldr	r1, [pc, #220]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	e03a      	b.n	80048d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004864:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_OscConfig+0x244>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fc ff1f 	bl	80016ac <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004872:	f7fc ff1b 	bl	80016ac <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e1a8      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b28      	ldr	r3, [pc, #160]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4925      	ldr	r1, [pc, #148]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
 80048a4:	e015      	b.n	80048d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b24      	ldr	r3, [pc, #144]	; (8004938 <HAL_RCC_OscConfig+0x244>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fc fefe 	bl	80016ac <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fc fefa 	bl	80016ac <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e187      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d036      	beq.n	800494c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <HAL_RCC_OscConfig+0x248>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ec:	f7fc fede 	bl	80016ac <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f4:	f7fc feda 	bl	80016ac <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e167      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCC_OscConfig+0x240>)
 8004908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x200>
 8004912:	e01b      	b.n	800494c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_OscConfig+0x248>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491a:	f7fc fec7 	bl	80016ac <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004920:	e00e      	b.n	8004940 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004922:	f7fc fec3 	bl	80016ac <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d907      	bls.n	8004940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e150      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
 8004934:	40023800 	.word	0x40023800
 8004938:	42470000 	.word	0x42470000
 800493c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	4b88      	ldr	r3, [pc, #544]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ea      	bne.n	8004922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8097 	beq.w	8004a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495e:	4b81      	ldr	r3, [pc, #516]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b7d      	ldr	r3, [pc, #500]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a7c      	ldr	r2, [pc, #496]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b7a      	ldr	r3, [pc, #488]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	4b77      	ldr	r3, [pc, #476]	; (8004b68 <HAL_RCC_OscConfig+0x474>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d118      	bne.n	80049c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004996:	4b74      	ldr	r3, [pc, #464]	; (8004b68 <HAL_RCC_OscConfig+0x474>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a73      	ldr	r2, [pc, #460]	; (8004b68 <HAL_RCC_OscConfig+0x474>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fc fe83 	bl	80016ac <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049aa:	f7fc fe7f 	bl	80016ac <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e10c      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	4b6a      	ldr	r3, [pc, #424]	; (8004b68 <HAL_RCC_OscConfig+0x474>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <HAL_RCC_OscConfig+0x2ea>
 80049d0:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a63      	ldr	r2, [pc, #396]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
 80049dc:	e01c      	b.n	8004a18 <HAL_RCC_OscConfig+0x324>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x30c>
 80049e6:	4b5f      	ldr	r3, [pc, #380]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a5e      	ldr	r2, [pc, #376]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
 80049f2:	4b5c      	ldr	r3, [pc, #368]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a5b      	ldr	r2, [pc, #364]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	e00b      	b.n	8004a18 <HAL_RCC_OscConfig+0x324>
 8004a00:	4b58      	ldr	r3, [pc, #352]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	4a57      	ldr	r2, [pc, #348]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0c:	4b55      	ldr	r3, [pc, #340]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a54      	ldr	r2, [pc, #336]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a12:	f023 0304 	bic.w	r3, r3, #4
 8004a16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a20:	f7fc fe44 	bl	80016ac <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a28:	f7fc fe40 	bl	80016ac <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e0cb      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3e:	4b49      	ldr	r3, [pc, #292]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ee      	beq.n	8004a28 <HAL_RCC_OscConfig+0x334>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4c:	f7fc fe2e 	bl	80016ac <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a54:	f7fc fe2a 	bl	80016ac <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0b5      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6a:	4b3e      	ldr	r3, [pc, #248]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ee      	bne.n	8004a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7c:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	4a38      	ldr	r2, [pc, #224]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80a1 	beq.w	8004bd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a92:	4b34      	ldr	r3, [pc, #208]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d05c      	beq.n	8004b58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d141      	bne.n	8004b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b31      	ldr	r3, [pc, #196]	; (8004b6c <HAL_RCC_OscConfig+0x478>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fc fdfe 	bl	80016ac <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fc fdfa 	bl	80016ac <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e087      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	3b01      	subs	r3, #1
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	491b      	ldr	r1, [pc, #108]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x478>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b02:	f7fc fdd3 	bl	80016ac <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7fc fdcf 	bl	80016ac <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e05c      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x416>
 8004b28:	e054      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <HAL_RCC_OscConfig+0x478>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fc fdbc 	bl	80016ac <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fc fdb8 	bl	80016ac <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e045      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x444>
 8004b56:	e03d      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e038      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b70:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <HAL_RCC_OscConfig+0x4ec>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d028      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d121      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d11a      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d111      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800

08004be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0cc      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b68      	ldr	r3, [pc, #416]	; (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d90c      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b65      	ldr	r3, [pc, #404]	; (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0e:	4b63      	ldr	r3, [pc, #396]	; (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0b8      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c38:	4b59      	ldr	r3, [pc, #356]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4a58      	ldr	r2, [pc, #352]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c50:	4b53      	ldr	r3, [pc, #332]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4a52      	ldr	r2, [pc, #328]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c5c:	4b50      	ldr	r3, [pc, #320]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	494d      	ldr	r1, [pc, #308]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d044      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d107      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c82:	4b47      	ldr	r3, [pc, #284]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d119      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e07f      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e06f      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e067      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cc2:	4b37      	ldr	r3, [pc, #220]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 0203 	bic.w	r2, r3, #3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4934      	ldr	r1, [pc, #208]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cd4:	f7fc fcea 	bl	80016ac <HAL_GetTick>
 8004cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cdc:	f7fc fce6 	bl	80016ac <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e04f      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf2:	4b2b      	ldr	r3, [pc, #172]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 020c 	and.w	r2, r3, #12
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d1eb      	bne.n	8004cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d04:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d20c      	bcs.n	8004d2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d12:	4b22      	ldr	r3, [pc, #136]	; (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1a:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e032      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d38:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4916      	ldr	r1, [pc, #88]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	490e      	ldr	r1, [pc, #56]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d6a:	f000 f821 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	490a      	ldr	r1, [pc, #40]	; (8004da4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7c:	5ccb      	ldrb	r3, [r1, r3]
 8004d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <HAL_RCC_ClockConfig+0x1c8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fc fc4a 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023c00 	.word	0x40023c00
 8004da0:	40023800 	.word	0x40023800
 8004da4:	080084dc 	.word	0x080084dc
 8004da8:	2000008c 	.word	0x2000008c
 8004dac:	20000090 	.word	0x20000090

08004db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db4:	b094      	sub	sp, #80	; 0x50
 8004db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	647b      	str	r3, [r7, #68]	; 0x44
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dc8:	4b79      	ldr	r3, [pc, #484]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 030c 	and.w	r3, r3, #12
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d00d      	beq.n	8004df0 <HAL_RCC_GetSysClockFreq+0x40>
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	f200 80e1 	bhi.w	8004f9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_GetSysClockFreq+0x3a>
 8004de2:	e0db      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004de4:	4b73      	ldr	r3, [pc, #460]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004de6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004de8:	e0db      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dea:	4b73      	ldr	r3, [pc, #460]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dee:	e0d8      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004df0:	4b6f      	ldr	r3, [pc, #444]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dfa:	4b6d      	ldr	r3, [pc, #436]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d063      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e06:	4b6a      	ldr	r3, [pc, #424]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e18:	633b      	str	r3, [r7, #48]	; 0x30
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e22:	4622      	mov	r2, r4
 8004e24:	462b      	mov	r3, r5
 8004e26:	f04f 0000 	mov.w	r0, #0
 8004e2a:	f04f 0100 	mov.w	r1, #0
 8004e2e:	0159      	lsls	r1, r3, #5
 8004e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e34:	0150      	lsls	r0, r2, #5
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	1a51      	subs	r1, r2, r1
 8004e3e:	6139      	str	r1, [r7, #16]
 8004e40:	4629      	mov	r1, r5
 8004e42:	eb63 0301 	sbc.w	r3, r3, r1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e54:	4659      	mov	r1, fp
 8004e56:	018b      	lsls	r3, r1, #6
 8004e58:	4651      	mov	r1, sl
 8004e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e5e:	4651      	mov	r1, sl
 8004e60:	018a      	lsls	r2, r1, #6
 8004e62:	4651      	mov	r1, sl
 8004e64:	ebb2 0801 	subs.w	r8, r2, r1
 8004e68:	4659      	mov	r1, fp
 8004e6a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e82:	4690      	mov	r8, r2
 8004e84:	4699      	mov	r9, r3
 8004e86:	4623      	mov	r3, r4
 8004e88:	eb18 0303 	adds.w	r3, r8, r3
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	462b      	mov	r3, r5
 8004e90:	eb49 0303 	adc.w	r3, r9, r3
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	024b      	lsls	r3, r1, #9
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eac:	4621      	mov	r1, r4
 8004eae:	024a      	lsls	r2, r1, #9
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ebc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ec0:	f7fb f982 	bl	80001c8 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ecc:	e058      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ece:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	4611      	mov	r1, r2
 8004eda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	f04f 0000 	mov.w	r0, #0
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	0159      	lsls	r1, r3, #5
 8004ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004efa:	0150      	lsls	r0, r2, #5
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4641      	mov	r1, r8
 8004f02:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f06:	4649      	mov	r1, r9
 8004f08:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f20:	ebb2 040a 	subs.w	r4, r2, sl
 8004f24:	eb63 050b 	sbc.w	r5, r3, fp
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	00eb      	lsls	r3, r5, #3
 8004f32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f36:	00e2      	lsls	r2, r4, #3
 8004f38:	4614      	mov	r4, r2
 8004f3a:	461d      	mov	r5, r3
 8004f3c:	4643      	mov	r3, r8
 8004f3e:	18e3      	adds	r3, r4, r3
 8004f40:	603b      	str	r3, [r7, #0]
 8004f42:	464b      	mov	r3, r9
 8004f44:	eb45 0303 	adc.w	r3, r5, r3
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f56:	4629      	mov	r1, r5
 8004f58:	028b      	lsls	r3, r1, #10
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f60:	4621      	mov	r1, r4
 8004f62:	028a      	lsls	r2, r1, #10
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	61fa      	str	r2, [r7, #28]
 8004f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f74:	f7fb f928 	bl	80001c8 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f80:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3750      	adds	r7, #80	; 0x50
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fae:	bf00      	nop
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	00f42400 	.word	0x00f42400
 8004fb8:	007a1200 	.word	0x007a1200

08004fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc0:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	2000008c 	.word	0x2000008c

08004fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fd8:	f7ff fff0 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	0a9b      	lsrs	r3, r3, #10
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	4903      	ldr	r1, [pc, #12]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fea:	5ccb      	ldrb	r3, [r1, r3]
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	080084ec 	.word	0x080084ec

08004ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005000:	f7ff ffdc 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0b5b      	lsrs	r3, r3, #13
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	; (8005020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	080084ec 	.word	0x080084ec

08005024 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d105      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005048:	2b00      	cmp	r3, #0
 800504a:	d035      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800504c:	4b62      	ldr	r3, [pc, #392]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005052:	f7fc fb2b 	bl	80016ac <HAL_GetTick>
 8005056:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005058:	e008      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800505a:	f7fc fb27 	bl	80016ac <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e0b0      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800506c:	4b5b      	ldr	r3, [pc, #364]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f0      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	019a      	lsls	r2, r3, #6
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	071b      	lsls	r3, r3, #28
 8005084:	4955      	ldr	r1, [pc, #340]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800508c:	4b52      	ldr	r3, [pc, #328]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005092:	f7fc fb0b 	bl	80016ac <HAL_GetTick>
 8005096:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800509a:	f7fc fb07 	bl	80016ac <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e090      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ac:	4b4b      	ldr	r3, [pc, #300]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8083 	beq.w	80051cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	4b44      	ldr	r3, [pc, #272]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	4a43      	ldr	r2, [pc, #268]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d4:	6413      	str	r3, [r2, #64]	; 0x40
 80050d6:	4b41      	ldr	r3, [pc, #260]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050e2:	4b3f      	ldr	r3, [pc, #252]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a3e      	ldr	r2, [pc, #248]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050ee:	f7fc fadd 	bl	80016ac <HAL_GetTick>
 80050f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fc fad9 	bl	80016ac <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e062      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005108:	4b35      	ldr	r3, [pc, #212]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005114:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d02f      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	429a      	cmp	r2, r3
 8005130:	d028      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800513c:	4b29      	ldr	r3, [pc, #164]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005142:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005148:	4a24      	ldr	r2, [pc, #144]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800514e:	4b23      	ldr	r3, [pc, #140]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d114      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800515a:	f7fc faa7 	bl	80016ac <HAL_GetTick>
 800515e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005160:	e00a      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005162:	f7fc faa3 	bl	80016ac <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005170:	4293      	cmp	r3, r2
 8005172:	d901      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e02a      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005178:	4b18      	ldr	r3, [pc, #96]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ee      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005190:	d10d      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a6:	490d      	ldr	r1, [pc, #52]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	608b      	str	r3, [r1, #8]
 80051ac:	e005      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80051ae:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051b8:	6093      	str	r3, [r2, #8]
 80051ba:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c6:	4905      	ldr	r1, [pc, #20]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	42470068 	.word	0x42470068
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40007000 	.word	0x40007000
 80051e4:	42470e40 	.word	0x42470e40

080051e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d13e      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005206:	4b23      	ldr	r3, [pc, #140]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d12f      	bne.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800521c:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800521e:	617b      	str	r3, [r7, #20]
          break;
 8005220:	e02f      	b.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800522e:	d108      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005230:	4b18      	ldr	r3, [pc, #96]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005238:	4a18      	ldr	r2, [pc, #96]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	e007      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005242:	4b14      	ldr	r3, [pc, #80]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800524a:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005252:	4b10      	ldr	r3, [pc, #64]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005258:	099b      	lsrs	r3, r3, #6
 800525a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	fb02 f303 	mul.w	r3, r2, r3
 8005264:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526c:	0f1b      	lsrs	r3, r3, #28
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]
          break;
 800527a:	e002      	b.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
          break;
 8005280:	bf00      	nop
        }
      }
      break;
 8005282:	bf00      	nop
    }
  }
  return frequency;
 8005284:	697b      	ldr	r3, [r7, #20]
}
 8005286:	4618      	mov	r0, r3
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800
 8005298:	00bb8000 	.word	0x00bb8000
 800529c:	007a1200 	.word	0x007a1200
 80052a0:	00f42400 	.word	0x00f42400

080052a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e07b      	b.n	80053ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c6:	d009      	beq.n	80052dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	61da      	str	r2, [r3, #28]
 80052ce:	e005      	b.n	80052dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fb ffd8 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005312:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	ea42 0103 	orr.w	r1, r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	f003 0104 	and.w	r1, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	f003 0210 	and.w	r2, r3, #16
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800539c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e03f      	b.n	8005448 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fb ffad 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2224      	movs	r2, #36	; 0x24
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f9ca 	bl	8005794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800540e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800541e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800542e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	; 0x28
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b20      	cmp	r3, #32
 800546e:	d17c      	bne.n	800556a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_UART_Transmit+0x2c>
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e075      	b.n	800556c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_UART_Transmit+0x3e>
 800548a:	2302      	movs	r3, #2
 800548c:	e06e      	b.n	800556c <HAL_UART_Transmit+0x11c>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2221      	movs	r2, #33	; 0x21
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054a4:	f7fc f902 	bl	80016ac <HAL_GetTick>
 80054a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054be:	d108      	bne.n	80054d2 <HAL_UART_Transmit+0x82>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	e003      	b.n	80054da <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054e2:	e02a      	b.n	800553a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2200      	movs	r2, #0
 80054ec:	2180      	movs	r1, #128	; 0x80
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f8e2 	bl	80056b8 <UART_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e036      	b.n	800556c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005512:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	3302      	adds	r3, #2
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	e007      	b.n	800552c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	781a      	ldrb	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	3301      	adds	r3, #1
 800552a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1cf      	bne.n	80054e4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2200      	movs	r2, #0
 800554c:	2140      	movs	r1, #64	; 0x40
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f8b2 	bl	80056b8 <UART_WaitOnFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e006      	b.n	800556c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e000      	b.n	800556c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800556a:	2302      	movs	r3, #2
  }
}
 800556c:	4618      	mov	r0, r3
 800556e:	3720      	adds	r7, #32
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08a      	sub	sp, #40	; 0x28
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b20      	cmp	r3, #32
 8005592:	f040 808c 	bne.w	80056ae <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_UART_Receive+0x2e>
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e084      	b.n	80056b0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_UART_Receive+0x40>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e07d      	b.n	80056b0 <HAL_UART_Receive+0x13c>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2222      	movs	r2, #34	; 0x22
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055d0:	f7fc f86c 	bl	80016ac <HAL_GetTick>
 80055d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	88fa      	ldrh	r2, [r7, #6]
 80055da:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	88fa      	ldrh	r2, [r7, #6]
 80055e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	d108      	bne.n	80055fe <HAL_UART_Receive+0x8a>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e003      	b.n	8005606 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800560e:	e043      	b.n	8005698 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2200      	movs	r2, #0
 8005618:	2120      	movs	r1, #32
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f84c 	bl	80056b8 <UART_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e042      	b.n	80056b0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10c      	bne.n	800564a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563c:	b29a      	uxth	r2, r3
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	3302      	adds	r3, #2
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	e01f      	b.n	800568a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005652:	d007      	beq.n	8005664 <HAL_UART_Receive+0xf0>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <HAL_UART_Receive+0xfe>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	e008      	b.n	8005684 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567e:	b2da      	uxtb	r2, r3
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	3301      	adds	r3, #1
 8005688:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1b6      	bne.n	8005610 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e000      	b.n	80056b0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b090      	sub	sp, #64	; 0x40
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c8:	e050      	b.n	800576c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d04c      	beq.n	800576c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056d8:	f7fb ffe8 	bl	80016ac <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d241      	bcs.n	800576c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	330c      	adds	r3, #12
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005708:	637a      	str	r2, [r7, #52]	; 0x34
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800570e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e5      	bne.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3314      	adds	r3, #20
 8005722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	613b      	str	r3, [r7, #16]
   return(result);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	63bb      	str	r3, [r7, #56]	; 0x38
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3314      	adds	r3, #20
 800573a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800573c:	623a      	str	r2, [r7, #32]
 800573e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	69f9      	ldr	r1, [r7, #28]
 8005742:	6a3a      	ldr	r2, [r7, #32]
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	61bb      	str	r3, [r7, #24]
   return(result);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e00f      	b.n	800578c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4013      	ands	r3, r2
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	429a      	cmp	r2, r3
 8005788:	d09f      	beq.n	80056ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3740      	adds	r7, #64	; 0x40
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005798:	b0c0      	sub	sp, #256	; 0x100
 800579a:	af00      	add	r7, sp, #0
 800579c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b0:	68d9      	ldr	r1, [r3, #12]
 80057b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	ea40 0301 	orr.w	r3, r0, r1
 80057bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057ec:	f021 010c 	bic.w	r1, r1, #12
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057fa:	430b      	orrs	r3, r1
 80057fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800580a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580e:	6999      	ldr	r1, [r3, #24]
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	ea40 0301 	orr.w	r3, r0, r1
 800581a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b8f      	ldr	r3, [pc, #572]	; (8005a60 <UART_SetConfig+0x2cc>)
 8005824:	429a      	cmp	r2, r3
 8005826:	d005      	beq.n	8005834 <UART_SetConfig+0xa0>
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b8d      	ldr	r3, [pc, #564]	; (8005a64 <UART_SetConfig+0x2d0>)
 8005830:	429a      	cmp	r2, r3
 8005832:	d104      	bne.n	800583e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005834:	f7ff fbe2 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 8005838:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800583c:	e003      	b.n	8005846 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800583e:	f7ff fbc9 	bl	8004fd4 <HAL_RCC_GetPCLK1Freq>
 8005842:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005850:	f040 810c 	bne.w	8005a6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005858:	2200      	movs	r2, #0
 800585a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800585e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005862:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005866:	4622      	mov	r2, r4
 8005868:	462b      	mov	r3, r5
 800586a:	1891      	adds	r1, r2, r2
 800586c:	65b9      	str	r1, [r7, #88]	; 0x58
 800586e:	415b      	adcs	r3, r3
 8005870:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005872:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005876:	4621      	mov	r1, r4
 8005878:	eb12 0801 	adds.w	r8, r2, r1
 800587c:	4629      	mov	r1, r5
 800587e:	eb43 0901 	adc.w	r9, r3, r1
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800588e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005896:	4690      	mov	r8, r2
 8005898:	4699      	mov	r9, r3
 800589a:	4623      	mov	r3, r4
 800589c:	eb18 0303 	adds.w	r3, r8, r3
 80058a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058a4:	462b      	mov	r3, r5
 80058a6:	eb49 0303 	adc.w	r3, r9, r3
 80058aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058c2:	460b      	mov	r3, r1
 80058c4:	18db      	adds	r3, r3, r3
 80058c6:	653b      	str	r3, [r7, #80]	; 0x50
 80058c8:	4613      	mov	r3, r2
 80058ca:	eb42 0303 	adc.w	r3, r2, r3
 80058ce:	657b      	str	r3, [r7, #84]	; 0x54
 80058d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058d8:	f7fa fc76 	bl	80001c8 <__aeabi_uldivmod>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4b61      	ldr	r3, [pc, #388]	; (8005a68 <UART_SetConfig+0x2d4>)
 80058e2:	fba3 2302 	umull	r2, r3, r3, r2
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	011c      	lsls	r4, r3, #4
 80058ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	1891      	adds	r1, r2, r2
 8005902:	64b9      	str	r1, [r7, #72]	; 0x48
 8005904:	415b      	adcs	r3, r3
 8005906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005908:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800590c:	4641      	mov	r1, r8
 800590e:	eb12 0a01 	adds.w	sl, r2, r1
 8005912:	4649      	mov	r1, r9
 8005914:	eb43 0b01 	adc.w	fp, r3, r1
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005924:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800592c:	4692      	mov	sl, r2
 800592e:	469b      	mov	fp, r3
 8005930:	4643      	mov	r3, r8
 8005932:	eb1a 0303 	adds.w	r3, sl, r3
 8005936:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800593a:	464b      	mov	r3, r9
 800593c:	eb4b 0303 	adc.w	r3, fp, r3
 8005940:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005950:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005954:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005958:	460b      	mov	r3, r1
 800595a:	18db      	adds	r3, r3, r3
 800595c:	643b      	str	r3, [r7, #64]	; 0x40
 800595e:	4613      	mov	r3, r2
 8005960:	eb42 0303 	adc.w	r3, r2, r3
 8005964:	647b      	str	r3, [r7, #68]	; 0x44
 8005966:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800596a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800596e:	f7fa fc2b 	bl	80001c8 <__aeabi_uldivmod>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4611      	mov	r1, r2
 8005978:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <UART_SetConfig+0x2d4>)
 800597a:	fba3 2301 	umull	r2, r3, r3, r1
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	2264      	movs	r2, #100	; 0x64
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	1acb      	subs	r3, r1, r3
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800598e:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <UART_SetConfig+0x2d4>)
 8005990:	fba3 2302 	umull	r2, r3, r3, r2
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800599c:	441c      	add	r4, r3
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	1891      	adds	r1, r2, r2
 80059b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80059b8:	415b      	adcs	r3, r3
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059c0:	4641      	mov	r1, r8
 80059c2:	1851      	adds	r1, r2, r1
 80059c4:	6339      	str	r1, [r7, #48]	; 0x30
 80059c6:	4649      	mov	r1, r9
 80059c8:	414b      	adcs	r3, r1
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059d8:	4659      	mov	r1, fp
 80059da:	00cb      	lsls	r3, r1, #3
 80059dc:	4651      	mov	r1, sl
 80059de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e2:	4651      	mov	r1, sl
 80059e4:	00ca      	lsls	r2, r1, #3
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	4642      	mov	r2, r8
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f4:	464b      	mov	r3, r9
 80059f6:	460a      	mov	r2, r1
 80059f8:	eb42 0303 	adc.w	r3, r2, r3
 80059fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a14:	460b      	mov	r3, r1
 8005a16:	18db      	adds	r3, r3, r3
 8005a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	eb42 0303 	adc.w	r3, r2, r3
 8005a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a2a:	f7fa fbcd 	bl	80001c8 <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <UART_SetConfig+0x2d4>)
 8005a34:	fba3 1302 	umull	r1, r3, r3, r2
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	2164      	movs	r1, #100	; 0x64
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	3332      	adds	r3, #50	; 0x32
 8005a46:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <UART_SetConfig+0x2d4>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	f003 0207 	and.w	r2, r3, #7
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4422      	add	r2, r4
 8005a5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a5c:	e106      	b.n	8005c6c <UART_SetConfig+0x4d8>
 8005a5e:	bf00      	nop
 8005a60:	40011000 	.word	0x40011000
 8005a64:	40011400 	.word	0x40011400
 8005a68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a7e:	4642      	mov	r2, r8
 8005a80:	464b      	mov	r3, r9
 8005a82:	1891      	adds	r1, r2, r2
 8005a84:	6239      	str	r1, [r7, #32]
 8005a86:	415b      	adcs	r3, r3
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a8e:	4641      	mov	r1, r8
 8005a90:	1854      	adds	r4, r2, r1
 8005a92:	4649      	mov	r1, r9
 8005a94:	eb43 0501 	adc.w	r5, r3, r1
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	f04f 0300 	mov.w	r3, #0
 8005aa0:	00eb      	lsls	r3, r5, #3
 8005aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aa6:	00e2      	lsls	r2, r4, #3
 8005aa8:	4614      	mov	r4, r2
 8005aaa:	461d      	mov	r5, r3
 8005aac:	4643      	mov	r3, r8
 8005aae:	18e3      	adds	r3, r4, r3
 8005ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	eb45 0303 	adc.w	r3, r5, r3
 8005aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005aca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ada:	4629      	mov	r1, r5
 8005adc:	008b      	lsls	r3, r1, #2
 8005ade:	4621      	mov	r1, r4
 8005ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	008a      	lsls	r2, r1, #2
 8005ae8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005aec:	f7fa fb6c 	bl	80001c8 <__aeabi_uldivmod>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4b60      	ldr	r3, [pc, #384]	; (8005c78 <UART_SetConfig+0x4e4>)
 8005af6:	fba3 2302 	umull	r2, r3, r3, r2
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	011c      	lsls	r4, r3, #4
 8005afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b10:	4642      	mov	r2, r8
 8005b12:	464b      	mov	r3, r9
 8005b14:	1891      	adds	r1, r2, r2
 8005b16:	61b9      	str	r1, [r7, #24]
 8005b18:	415b      	adcs	r3, r3
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b20:	4641      	mov	r1, r8
 8005b22:	1851      	adds	r1, r2, r1
 8005b24:	6139      	str	r1, [r7, #16]
 8005b26:	4649      	mov	r1, r9
 8005b28:	414b      	adcs	r3, r1
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b38:	4659      	mov	r1, fp
 8005b3a:	00cb      	lsls	r3, r1, #3
 8005b3c:	4651      	mov	r1, sl
 8005b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b42:	4651      	mov	r1, sl
 8005b44:	00ca      	lsls	r2, r1, #3
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	189b      	adds	r3, r3, r2
 8005b50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b54:	464b      	mov	r3, r9
 8005b56:	460a      	mov	r2, r1
 8005b58:	eb42 0303 	adc.w	r3, r2, r3
 8005b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b78:	4649      	mov	r1, r9
 8005b7a:	008b      	lsls	r3, r1, #2
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b82:	4641      	mov	r1, r8
 8005b84:	008a      	lsls	r2, r1, #2
 8005b86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b8a:	f7fa fb1d 	bl	80001c8 <__aeabi_uldivmod>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	4b38      	ldr	r3, [pc, #224]	; (8005c78 <UART_SetConfig+0x4e4>)
 8005b96:	fba3 2301 	umull	r2, r3, r3, r1
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2264      	movs	r2, #100	; 0x64
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	1acb      	subs	r3, r1, r3
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	3332      	adds	r3, #50	; 0x32
 8005ba8:	4a33      	ldr	r2, [pc, #204]	; (8005c78 <UART_SetConfig+0x4e4>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb4:	441c      	add	r4, r3
 8005bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bba:	2200      	movs	r2, #0
 8005bbc:	673b      	str	r3, [r7, #112]	; 0x70
 8005bbe:	677a      	str	r2, [r7, #116]	; 0x74
 8005bc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	1891      	adds	r1, r2, r2
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	415b      	adcs	r3, r3
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd4:	4641      	mov	r1, r8
 8005bd6:	1851      	adds	r1, r2, r1
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	4649      	mov	r1, r9
 8005bdc:	414b      	adcs	r3, r1
 8005bde:	607b      	str	r3, [r7, #4]
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bec:	4659      	mov	r1, fp
 8005bee:	00cb      	lsls	r3, r1, #3
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf6:	4651      	mov	r1, sl
 8005bf8:	00ca      	lsls	r2, r1, #3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4642      	mov	r2, r8
 8005c02:	189b      	adds	r3, r3, r2
 8005c04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c06:	464b      	mov	r3, r9
 8005c08:	460a      	mov	r2, r1
 8005c0a:	eb42 0303 	adc.w	r3, r2, r3
 8005c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1a:	667a      	str	r2, [r7, #100]	; 0x64
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c28:	4649      	mov	r1, r9
 8005c2a:	008b      	lsls	r3, r1, #2
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c32:	4641      	mov	r1, r8
 8005c34:	008a      	lsls	r2, r1, #2
 8005c36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c3a:	f7fa fac5 	bl	80001c8 <__aeabi_uldivmod>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <UART_SetConfig+0x4e4>)
 8005c44:	fba3 1302 	umull	r1, r3, r3, r2
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	2164      	movs	r1, #100	; 0x64
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	3332      	adds	r3, #50	; 0x32
 8005c56:	4a08      	ldr	r2, [pc, #32]	; (8005c78 <UART_SetConfig+0x4e4>)
 8005c58:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	f003 020f 	and.w	r2, r3, #15
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4422      	add	r2, r4
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c72:	46bd      	mov	sp, r7
 8005c74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c78:	51eb851f 	.word	0x51eb851f

08005c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	f107 001c 	add.w	r0, r7, #28
 8005c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d122      	bne.n	8005cda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d105      	bne.n	8005cce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f9c0 	bl	8006054 <USB_CoreReset>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]
 8005cd8:	e01a      	b.n	8005d10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9b4 	bl	8006054 <USB_CoreReset>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38
 8005d02:	e005      	b.n	8005d10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d10b      	bne.n	8005d2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f043 0206 	orr.w	r2, r3, #6
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f043 0220 	orr.w	r2, r3, #32
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d3a:	b004      	add	sp, #16
 8005d3c:	4770      	bx	lr

08005d3e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f043 0201 	orr.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 0201 	bic.w	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d115      	bne.n	8005dd0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005db0:	2001      	movs	r0, #1
 8005db2:	f7fb fc87 	bl	80016c4 <HAL_Delay>
      ms++;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3301      	adds	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f93a 	bl	8006036 <USB_GetMode>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d01e      	beq.n	8005e06 <USB_SetCurrentMode+0x84>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b31      	cmp	r3, #49	; 0x31
 8005dcc:	d9f0      	bls.n	8005db0 <USB_SetCurrentMode+0x2e>
 8005dce:	e01a      	b.n	8005e06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d115      	bne.n	8005e02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005de2:	2001      	movs	r0, #1
 8005de4:	f7fb fc6e 	bl	80016c4 <HAL_Delay>
      ms++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f921 	bl	8006036 <USB_GetMode>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <USB_SetCurrentMode+0x84>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b31      	cmp	r3, #49	; 0x31
 8005dfe:	d9f0      	bls.n	8005de2 <USB_SetCurrentMode+0x60>
 8005e00:	e001      	b.n	8005e06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e005      	b.n	8005e12 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b32      	cmp	r3, #50	; 0x32
 8005e0a:	d101      	bne.n	8005e10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <USB_FlushTxFifo+0x64>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e01b      	b.n	8005e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	daf2      	bge.n	8005e2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	019b      	lsls	r3, r3, #6
 8005e4c:	f043 0220 	orr.w	r2, r3, #32
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <USB_FlushTxFifo+0x64>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e006      	b.n	8005e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d0f0      	beq.n	8005e54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	00030d40 	.word	0x00030d40

08005e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a11      	ldr	r2, [pc, #68]	; (8005ee0 <USB_FlushRxFifo+0x5c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e018      	b.n	8005ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	daf2      	bge.n	8005e90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2210      	movs	r2, #16
 8005eb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <USB_FlushRxFifo+0x5c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e006      	b.n	8005ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0310 	and.w	r3, r3, #16
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d0f0      	beq.n	8005eb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	00030d40 	.word	0x00030d40

08005ee4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b089      	sub	sp, #36	; 0x24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	4611      	mov	r1, r2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	71fb      	strb	r3, [r7, #7]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d123      	bne.n	8005f52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f0a:	88bb      	ldrh	r3, [r7, #4]
 8005f0c:	3303      	adds	r3, #3
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e018      	b.n	8005f4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	031a      	lsls	r2, r3, #12
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f24:	461a      	mov	r2, r3
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	3301      	adds	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3301      	adds	r3, #1
 8005f42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	3301      	adds	r3, #1
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d3e2      	bcc.n	8005f18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3724      	adds	r7, #36	; 0x24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b08b      	sub	sp, #44	; 0x2c
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	089b      	lsrs	r3, r3, #2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f86:	2300      	movs	r3, #0
 8005f88:	623b      	str	r3, [r7, #32]
 8005f8a:	e014      	b.n	8005fb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	3301      	adds	r3, #1
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	623b      	str	r3, [r7, #32]
 8005fb6:	6a3a      	ldr	r2, [r7, #32]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d3e6      	bcc.n	8005f8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fbe:	8bfb      	ldrh	r3, [r7, #30]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01e      	beq.n	8006002 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f107 0310 	add.w	r3, r7, #16
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	701a      	strb	r2, [r3, #0]
      i++;
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	3301      	adds	r3, #1
 8005fee:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ff6:	8bfb      	ldrh	r3, [r7, #30]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ffc:	8bfb      	ldrh	r3, [r7, #30]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1ea      	bne.n	8005fd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006004:	4618      	mov	r0, r3
 8006006:	372c      	adds	r7, #44	; 0x2c
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4013      	ands	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006028:	68fb      	ldr	r3, [r7, #12]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0301 	and.w	r3, r3, #1
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
	...

08006054 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3301      	adds	r3, #1
 8006064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4a13      	ldr	r2, [pc, #76]	; (80060b8 <USB_CoreReset+0x64>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e01b      	b.n	80060aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	daf2      	bge.n	8006060 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f043 0201 	orr.w	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3301      	adds	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <USB_CoreReset+0x64>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d901      	bls.n	800609c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e006      	b.n	80060aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d0f0      	beq.n	800608a <USB_CoreReset+0x36>

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	00030d40 	.word	0x00030d40

080060bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060bc:	b084      	sub	sp, #16
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060dc:	461a      	mov	r2, r3
 80060de:	2300      	movs	r3, #0
 80060e0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610e:	2b00      	cmp	r3, #0
 8006110:	d018      	beq.n	8006144 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d10a      	bne.n	800612e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006126:	f043 0304 	orr.w	r3, r3, #4
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	e014      	b.n	8006158 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800613c:	f023 0304 	bic.w	r3, r3, #4
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e009      	b.n	8006158 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006152:	f023 0304 	bic.w	r3, r3, #4
 8006156:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006158:	2110      	movs	r1, #16
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fe5e 	bl	8005e1c <USB_FlushTxFifo>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fe8a 	bl	8005e84 <USB_FlushRxFifo>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800617a:	2300      	movs	r3, #0
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	e015      	b.n	80061ac <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618c:	461a      	mov	r2, r3
 800618e:	f04f 33ff 	mov.w	r3, #4294967295
 8006192:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	461a      	mov	r2, r3
 80061a2:	2300      	movs	r3, #0
 80061a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3301      	adds	r3, #1
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d3e5      	bcc.n	8006180 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f04f 32ff 	mov.w	r2, #4294967295
 80061c0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a13      	ldr	r2, [pc, #76]	; (8006228 <USB_HostInit+0x16c>)
 80061da:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a13      	ldr	r2, [pc, #76]	; (800622c <USB_HostInit+0x170>)
 80061e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80061e4:	e009      	b.n	80061fa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2280      	movs	r2, #128	; 0x80
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a10      	ldr	r2, [pc, #64]	; (8006230 <USB_HostInit+0x174>)
 80061f0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a0f      	ldr	r2, [pc, #60]	; (8006234 <USB_HostInit+0x178>)
 80061f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	f043 0210 	orr.w	r2, r3, #16
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	4b09      	ldr	r3, [pc, #36]	; (8006238 <USB_HostInit+0x17c>)
 8006212:	4313      	orrs	r3, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006224:	b004      	add	sp, #16
 8006226:	4770      	bx	lr
 8006228:	01000200 	.word	0x01000200
 800622c:	00e00300 	.word	0x00e00300
 8006230:	00600080 	.word	0x00600080
 8006234:	004000e0 	.word	0x004000e0
 8006238:	a3200008 	.word	0xa3200008

0800623c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006274:	4313      	orrs	r3, r2
 8006276:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d107      	bne.n	800628e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006284:	461a      	mov	r2, r3
 8006286:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800628a:	6053      	str	r3, [r2, #4]
 800628c:	e009      	b.n	80062a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800628e:	78fb      	ldrb	r3, [r7, #3]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d106      	bne.n	80062a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629a:	461a      	mov	r2, r3
 800629c:	f241 7370 	movw	r3, #6000	; 0x1770
 80062a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <USB_DriveVbus+0x44>
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d106      	bne.n	80062f4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80062ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062f2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fe:	d109      	bne.n	8006314 <USB_DriveVbus+0x64>
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800630e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006312:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	0c5b      	lsrs	r3, r3, #17
 8006340:	f003 0303 	and.w	r3, r3, #3
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	b29b      	uxth	r3, r3
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
	...

08006374 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	461a      	mov	r2, r3
 8006382:	4603      	mov	r3, r0
 8006384:	70fb      	strb	r3, [r7, #3]
 8006386:	460b      	mov	r3, r1
 8006388:	70bb      	strb	r3, [r7, #2]
 800638a:	4613      	mov	r3, r2
 800638c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4413      	add	r3, r2
 800639e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a2:	461a      	mov	r2, r3
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295
 80063a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80063aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d87e      	bhi.n	80064b0 <USB_HC_Init+0x13c>
 80063b2:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <USB_HC_Init+0x44>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063c9 	.word	0x080063c9
 80063bc:	08006473 	.word	0x08006473
 80063c0:	080063c9 	.word	0x080063c9
 80063c4:	08006435 	.word	0x08006435
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d4:	461a      	mov	r2, r3
 80063d6:	f240 439d 	movw	r3, #1181	; 0x49d
 80063da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80063dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	da10      	bge.n	8006406 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	78fa      	ldrb	r2, [r7, #3]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006402:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006404:	e057      	b.n	80064b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640e:	2b00      	cmp	r3, #0
 8006410:	d051      	beq.n	80064b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	78fa      	ldrb	r2, [r7, #3]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	440a      	add	r2, r1
 8006428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006430:	60d3      	str	r3, [r2, #12]
      break;
 8006432:	e040      	b.n	80064b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006440:	461a      	mov	r2, r3
 8006442:	f240 639d 	movw	r3, #1693	; 0x69d
 8006446:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006448:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800644c:	2b00      	cmp	r3, #0
 800644e:	da34      	bge.n	80064ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	4413      	add	r3, r2
 8006458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	78fa      	ldrb	r2, [r7, #3]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	440a      	add	r2, r1
 8006466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800646e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006470:	e023      	b.n	80064ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647e:	461a      	mov	r2, r3
 8006480:	f240 2325 	movw	r3, #549	; 0x225
 8006484:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006486:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da17      	bge.n	80064be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	78fa      	ldrb	r2, [r7, #3]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80064ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80064ae:	e006      	b.n	80064be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	77fb      	strb	r3, [r7, #31]
      break;
 80064b4:	e004      	b.n	80064c0 <USB_HC_Init+0x14c>
      break;
 80064b6:	bf00      	nop
 80064b8:	e002      	b.n	80064c0 <USB_HC_Init+0x14c>
      break;
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <USB_HC_Init+0x14c>
      break;
 80064be:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064da:	f043 0302 	orr.w	r3, r3, #2
 80064de:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	2101      	movs	r1, #1
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	6939      	ldr	r1, [r7, #16]
 80064f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064fa:	4313      	orrs	r3, r2
 80064fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800650a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800650e:	2b00      	cmp	r3, #0
 8006510:	da03      	bge.n	800651a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	e001      	b.n	800651e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff feff 	bl	8006322 <USB_GetHostSpeed>
 8006524:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800652a:	2b02      	cmp	r3, #2
 800652c:	d106      	bne.n	800653c <USB_HC_Init+0x1c8>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d003      	beq.n	800653c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	e001      	b.n	8006540 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006540:	787b      	ldrb	r3, [r7, #1]
 8006542:	059b      	lsls	r3, r3, #22
 8006544:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006548:	78bb      	ldrb	r3, [r7, #2]
 800654a:	02db      	lsls	r3, r3, #11
 800654c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006550:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006552:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006556:	049b      	lsls	r3, r3, #18
 8006558:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800655c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800655e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006560:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006564:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	0159      	lsls	r1, r3, #5
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	440b      	add	r3, r1
 8006572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006576:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800657c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800657e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006582:	2b03      	cmp	r3, #3
 8006584:	d003      	beq.n	800658e <USB_HC_Init+0x21a>
 8006586:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d10f      	bne.n	80065ae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	78fa      	ldrb	r2, [r7, #3]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80065ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3720      	adds	r7, #32
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08c      	sub	sp, #48	; 0x30
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80065d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065d4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d02d      	beq.n	800663e <USB_HC_StartXfer+0x86>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	791b      	ldrb	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d129      	bne.n	800663e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d117      	bne.n	8006620 <USB_HC_StartXfer+0x68>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	79db      	ldrb	r3, [r3, #7]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <USB_HC_StartXfer+0x48>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	79db      	ldrb	r3, [r3, #7]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d10f      	bne.n	8006620 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	6a3a      	ldr	r2, [r7, #32]
 8006614:	440a      	add	r2, r1
 8006616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <USB_HC_StartXfer+0x86>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	795b      	ldrb	r3, [r3, #5]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d107      	bne.n	800663e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	4619      	mov	r1, r3
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 fa0f 	bl	8006a58 <USB_DoPing>
      return HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	e0f8      	b.n	8006830 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d018      	beq.n	8006678 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	8912      	ldrh	r2, [r2, #8]
 800664e:	4413      	add	r3, r2
 8006650:	3b01      	subs	r3, #1
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	8912      	ldrh	r2, [r2, #8]
 8006656:	fbb3 f3f2 	udiv	r3, r3, r2
 800665a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800665c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800665e:	8b7b      	ldrh	r3, [r7, #26]
 8006660:	429a      	cmp	r2, r3
 8006662:	d90b      	bls.n	800667c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006664:	8b7b      	ldrh	r3, [r7, #26]
 8006666:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	8912      	ldrh	r2, [r2, #8]
 800666e:	fb03 f202 	mul.w	r2, r3, r2
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	611a      	str	r2, [r3, #16]
 8006676:	e001      	b.n	800667c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006678:	2301      	movs	r3, #1
 800667a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	78db      	ldrb	r3, [r3, #3]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	8912      	ldrh	r2, [r2, #8]
 800668a:	fb03 f202 	mul.w	r2, r3, r2
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	611a      	str	r2, [r3, #16]
 8006692:	e003      	b.n	800669c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	695a      	ldr	r2, [r3, #20]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066a6:	04d9      	lsls	r1, r3, #19
 80066a8:	4b63      	ldr	r3, [pc, #396]	; (8006838 <USB_HC_StartXfer+0x280>)
 80066aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	7a9b      	ldrb	r3, [r3, #10]
 80066b2:	075b      	lsls	r3, r3, #29
 80066b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066b8:	69f9      	ldr	r1, [r7, #28]
 80066ba:	0148      	lsls	r0, r1, #5
 80066bc:	6a39      	ldr	r1, [r7, #32]
 80066be:	4401      	add	r1, r0
 80066c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80066c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	68d9      	ldr	r1, [r3, #12]
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066de:	460a      	mov	r2, r1
 80066e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bf0c      	ite	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	2300      	movne	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	6a3a      	ldr	r2, [r7, #32]
 800670e:	440a      	add	r2, r1
 8006710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006714:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006718:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	7e7b      	ldrb	r3, [r7, #25]
 800672a:	075b      	lsls	r3, r3, #29
 800672c:	69f9      	ldr	r1, [r7, #28]
 800672e:	0148      	lsls	r0, r1, #5
 8006730:	6a39      	ldr	r1, [r7, #32]
 8006732:	4401      	add	r1, r0
 8006734:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	4413      	add	r3, r2
 8006744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006752:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	78db      	ldrb	r3, [r3, #3]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	e003      	b.n	800676e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800676c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006774:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006782:	461a      	mov	r2, r3
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e04e      	b.n	8006830 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	78db      	ldrb	r3, [r3, #3]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d149      	bne.n	800682e <USB_HC_StartXfer+0x276>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d045      	beq.n	800682e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	79db      	ldrb	r3, [r3, #7]
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d830      	bhi.n	800680c <USB_HC_StartXfer+0x254>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <USB_HC_StartXfer+0x1f8>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	080067c1 	.word	0x080067c1
 80067bc:	080067e5 	.word	0x080067e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	3303      	adds	r3, #3
 80067c6:	089b      	lsrs	r3, r3, #2
 80067c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80067ca:	8afa      	ldrh	r2, [r7, #22]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d91c      	bls.n	8006810 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f043 0220 	orr.w	r2, r3, #32
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80067e2:	e015      	b.n	8006810 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	3303      	adds	r3, #3
 80067ea:	089b      	lsrs	r3, r3, #2
 80067ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80067ee:	8afa      	ldrh	r2, [r7, #22]
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d90a      	bls.n	8006814 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	619a      	str	r2, [r3, #24]
        }
        break;
 800680a:	e003      	b.n	8006814 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800680c:	bf00      	nop
 800680e:	e002      	b.n	8006816 <USB_HC_StartXfer+0x25e>
        break;
 8006810:	bf00      	nop
 8006812:	e000      	b.n	8006816 <USB_HC_StartXfer+0x25e>
        break;
 8006814:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	68d9      	ldr	r1, [r3, #12]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	785a      	ldrb	r2, [r3, #1]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	b29b      	uxth	r3, r3
 8006824:	2000      	movs	r0, #0
 8006826:	9000      	str	r0, [sp, #0]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff fb5b 	bl	8005ee4 <USB_WritePacket>
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3728      	adds	r7, #40	; 0x28
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	1ff80000 	.word	0x1ff80000

0800683c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	b29b      	uxth	r3, r3
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800685e:	b480      	push	{r7}
 8006860:	b089      	sub	sp, #36	; 0x24
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	0c9b      	lsrs	r3, r3, #18
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	0fdb      	lsrs	r3, r3, #31
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d104      	bne.n	80068b8 <USB_HC_Halt+0x5a>
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e0c8      	b.n	8006a4a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <USB_HC_Halt+0x66>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d163      	bne.n	800698c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 80ab 	bne.w	8006a48 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d133      	bne.n	8006966 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	0151      	lsls	r1, r2, #5
 8006910:	69fa      	ldr	r2, [r7, #28]
 8006912:	440a      	add	r2, r1
 8006914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800691c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	440a      	add	r2, r1
 8006934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800693c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3301      	adds	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800694a:	d81d      	bhi.n	8006988 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	4413      	add	r3, r2
 8006954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800695e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006962:	d0ec      	beq.n	800693e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006964:	e070      	b.n	8006a48 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	69fa      	ldr	r2, [r7, #28]
 800697a:	440a      	add	r2, r1
 800697c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006984:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006986:	e05f      	b.n	8006a48 <USB_HC_Halt+0x1ea>
            break;
 8006988:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800698a:	e05d      	b.n	8006a48 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d133      	bne.n	8006a24 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069fa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a08:	d81d      	bhi.n	8006a46 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a20:	d0ec      	beq.n	80069fc <USB_HC_Halt+0x19e>
 8006a22:	e011      	b.n	8006a48 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	e000      	b.n	8006a48 <USB_HC_Halt+0x1ea>
          break;
 8006a46:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3724      	adds	r7, #36	; 0x24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
	...

08006a58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	04da      	lsls	r2, r3, #19
 8006a74:	4b15      	ldr	r3, [pc, #84]	; (8006acc <USB_DoPing+0x74>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	0151      	lsls	r1, r2, #5
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	440a      	add	r2, r1
 8006a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aa0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aa8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	1ff80000 	.word	0x1ff80000

08006ad0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff f93b 	bl	8005d60 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006aea:	2110      	movs	r1, #16
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff f995 	bl	8005e1c <USB_FlushTxFifo>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff f9c1 	bl	8005e84 <USB_FlushRxFifo>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	e01f      	b.n	8006b52 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b46:	461a      	mov	r2, r3
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b0f      	cmp	r3, #15
 8006b56:	d9dc      	bls.n	8006b12 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	e034      	b.n	8006bc8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b92:	461a      	mov	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ba4:	d80c      	bhi.n	8006bc0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bbc:	d0ec      	beq.n	8006b98 <USB_StopHost+0xc8>
 8006bbe:	e000      	b.n	8006bc2 <USB_StopHost+0xf2>
        break;
 8006bc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b0f      	cmp	r3, #15
 8006bcc:	d9c7      	bls.n	8006b5e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295
 8006be2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff f8aa 	bl	8005d3e <USB_EnableGlobalInt>

  return ret;
 8006bea:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3720      	adds	r7, #32
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006bf4:	b590      	push	{r4, r7, lr}
 8006bf6:	b089      	sub	sp, #36	; 0x24
 8006bf8:	af04      	add	r7, sp, #16
 8006bfa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	2202      	movs	r2, #2
 8006c00:	2102      	movs	r1, #2
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fc66 	bl	80074d4 <USBH_FindInterface>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2bff      	cmp	r3, #255	; 0xff
 8006c10:	d002      	beq.n	8006c18 <USBH_CDC_InterfaceInit+0x24>
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d901      	bls.n	8006c1c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e13d      	b.n	8006e98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fc3b 	bl	800749c <USBH_SelectInterface>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c30:	2302      	movs	r3, #2
 8006c32:	e131      	b.n	8006e98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006c3a:	2050      	movs	r0, #80	; 0x50
 8006c3c:	f001 fae8 	bl	8008210 <malloc>
 8006c40:	4603      	mov	r3, r0
 8006c42:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006c54:	2302      	movs	r3, #2
 8006c56:	e11f      	b.n	8006e98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006c58:	2250      	movs	r2, #80	; 0x50
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	68b8      	ldr	r0, [r7, #8]
 8006c5e:	f001 fb93 	bl	8008388 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	211a      	movs	r1, #26
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	da15      	bge.n	8006ca6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	211a      	movs	r1, #26
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	4413      	add	r3, r2
 8006c86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	211a      	movs	r1, #26
 8006c96:	fb01 f303 	mul.w	r3, r1, r3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ca0:	881a      	ldrh	r2, [r3, #0]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	785b      	ldrb	r3, [r3, #1]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 ff9c 	bl	8007bea <USBH_AllocPipe>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	7819      	ldrb	r1, [r3, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	7858      	ldrb	r0, [r3, #1]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	8952      	ldrh	r2, [r2, #10]
 8006cd2:	9202      	str	r2, [sp, #8]
 8006cd4:	2203      	movs	r2, #3
 8006cd6:	9201      	str	r2, [sp, #4]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	4623      	mov	r3, r4
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 ff54 	bl	8007b8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fa17 	bl	8008120 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	210a      	movs	r1, #10
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fbeb 	bl	80074d4 <USBH_FindInterface>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2bff      	cmp	r3, #255	; 0xff
 8006d06:	d002      	beq.n	8006d0e <USBH_CDC_InterfaceInit+0x11a>
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d901      	bls.n	8006d12 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e0c2      	b.n	8006e98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	211a      	movs	r1, #26
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	b25b      	sxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da16      	bge.n	8006d58 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	211a      	movs	r1, #26
 8006d30:	fb01 f303 	mul.w	r3, r1, r3
 8006d34:	4413      	add	r3, r2
 8006d36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d3a:	781a      	ldrb	r2, [r3, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	211a      	movs	r1, #26
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d50:	881a      	ldrh	r2, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	835a      	strh	r2, [r3, #26]
 8006d56:	e015      	b.n	8006d84 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	211a      	movs	r1, #26
 8006d5e:	fb01 f303 	mul.w	r3, r1, r3
 8006d62:	4413      	add	r3, r2
 8006d64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d68:	781a      	ldrb	r2, [r3, #0]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	211a      	movs	r1, #26
 8006d74:	fb01 f303 	mul.w	r3, r1, r3
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d7e:	881a      	ldrh	r2, [r3, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	211a      	movs	r1, #26
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	4413      	add	r3, r2
 8006d90:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	b25b      	sxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	da16      	bge.n	8006dca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	211a      	movs	r1, #26
 8006da2:	fb01 f303 	mul.w	r3, r1, r3
 8006da6:	4413      	add	r3, r2
 8006da8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006dac:	781a      	ldrb	r2, [r3, #0]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	211a      	movs	r1, #26
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006dc2:	881a      	ldrh	r2, [r3, #0]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	835a      	strh	r2, [r3, #26]
 8006dc8:	e015      	b.n	8006df6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	211a      	movs	r1, #26
 8006dd0:	fb01 f303 	mul.w	r3, r1, r3
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	211a      	movs	r1, #26
 8006de6:	fb01 f303 	mul.w	r3, r1, r3
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006df0:	881a      	ldrh	r2, [r3, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	7b9b      	ldrb	r3, [r3, #14]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fef4 	bl	8007bea <USBH_AllocPipe>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	7bdb      	ldrb	r3, [r3, #15]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 feea 	bl	8007bea <USBH_AllocPipe>
 8006e16:	4603      	mov	r3, r0
 8006e18:	461a      	mov	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	7b59      	ldrb	r1, [r3, #13]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	7b98      	ldrb	r0, [r3, #14]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	8b12      	ldrh	r2, [r2, #24]
 8006e36:	9202      	str	r2, [sp, #8]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	9201      	str	r2, [sp, #4]
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4623      	mov	r3, r4
 8006e40:	4602      	mov	r2, r0
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fea2 	bl	8007b8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	7b19      	ldrb	r1, [r3, #12]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	7bd8      	ldrb	r0, [r3, #15]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	8b52      	ldrh	r2, [r2, #26]
 8006e60:	9202      	str	r2, [sp, #8]
 8006e62:	2202      	movs	r2, #2
 8006e64:	9201      	str	r2, [sp, #4]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4623      	mov	r3, r4
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fe8d 	bl	8007b8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	7b5b      	ldrb	r3, [r3, #13]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 f94c 	bl	8008120 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	7b1b      	ldrb	r3, [r3, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f945 	bl	8008120 <USBH_LL_SetToggle>

  return USBH_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd90      	pop	{r4, r7, pc}

08006ea0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00e      	beq.n	8006ed8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fe82 	bl	8007bca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fead 	bl	8007c2c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	7b1b      	ldrb	r3, [r3, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00e      	beq.n	8006efe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	7b1b      	ldrb	r3, [r3, #12]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fe6f 	bl	8007bca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	7b1b      	ldrb	r3, [r3, #12]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fe9a 	bl	8007c2c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	7b5b      	ldrb	r3, [r3, #13]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00e      	beq.n	8006f24 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	7b5b      	ldrb	r3, [r3, #13]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fe5c 	bl	8007bca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	7b5b      	ldrb	r3, [r3, #13]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fe87 	bl	8007c2c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 f971 	bl	8008220 <free>
    phost->pActiveClass->pData = 0U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f44:	2200      	movs	r2, #0
 8006f46:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3340      	adds	r3, #64	; 0x40
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f8b1 	bl	80070d2 <GetLineCoding>
 8006f70:	4603      	mov	r3, r0
 8006f72:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d105      	bne.n	8006f86 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f80:	2102      	movs	r1, #2
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f86:	7afb      	ldrb	r3, [r7, #11]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d877      	bhi.n	80070a4 <USBH_CDC_Process+0x114>
 8006fb4:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <USBH_CDC_Process+0x2c>)
 8006fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fba:	bf00      	nop
 8006fbc:	08006fd1 	.word	0x08006fd1
 8006fc0:	08006fd7 	.word	0x08006fd7
 8006fc4:	08007007 	.word	0x08007007
 8006fc8:	0800707b 	.word	0x0800707b
 8006fcc:	08007089 	.word	0x08007089
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd4:	e06d      	b.n	80070b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f897 	bl	8007110 <SetLineCoding>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ff4:	e058      	b.n	80070a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d055      	beq.n	80070a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2204      	movs	r2, #4
 8007000:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007004:	e050      	b.n	80070a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	3340      	adds	r3, #64	; 0x40
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f860 	bl	80070d2 <GetLineCoding>
 8007012:	4603      	mov	r3, r0
 8007014:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d126      	bne.n	800706a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800702e:	791b      	ldrb	r3, [r3, #4]
 8007030:	429a      	cmp	r2, r3
 8007032:	d13b      	bne.n	80070ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007040:	429a      	cmp	r2, r3
 8007042:	d133      	bne.n	80070ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800704e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007050:	429a      	cmp	r2, r3
 8007052:	d12b      	bne.n	80070ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800705e:	429a      	cmp	r2, r3
 8007060:	d124      	bne.n	80070ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f958 	bl	8007318 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007068:	e020      	b.n	80070ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d01d      	beq.n	80070ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2204      	movs	r2, #4
 8007074:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007078:	e018      	b.n	80070ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f867 	bl	800714e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f8da 	bl	800723a <CDC_ProcessReception>
      break;
 8007086:	e014      	b.n	80070b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fb08 	bl	80076a0 <USBH_ClrFeature>
 8007090:	4603      	mov	r3, r0
 8007092:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007094:	7bbb      	ldrb	r3, [r7, #14]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80070a2:	e005      	b.n	80070b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80070a4:	bf00      	nop
 80070a6:	e004      	b.n	80070b2 <USBH_CDC_Process+0x122>
      break;
 80070a8:	bf00      	nop
 80070aa:	e002      	b.n	80070b2 <USBH_CDC_Process+0x122>
      break;
 80070ac:	bf00      	nop
 80070ae:	e000      	b.n	80070b2 <USBH_CDC_Process+0x122>
      break;
 80070b0:	bf00      	nop

  }

  return status;
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	22a1      	movs	r2, #161	; 0xa1
 80070e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2221      	movs	r2, #33	; 0x21
 80070e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2207      	movs	r2, #7
 80070f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2207      	movs	r2, #7
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 faf1 	bl	80076e8 <USBH_CtlReq>
 8007106:	4603      	mov	r3, r0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2221      	movs	r2, #33	; 0x21
 800711e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2207      	movs	r2, #7
 8007136:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2207      	movs	r2, #7
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fad2 	bl	80076e8 <USBH_CtlReq>
 8007144:	4603      	mov	r3, r0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af02      	add	r7, sp, #8
 8007154:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007160:	2300      	movs	r3, #0
 8007162:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800716a:	2b01      	cmp	r3, #1
 800716c:	d002      	beq.n	8007174 <CDC_ProcessTransmission+0x26>
 800716e:	2b02      	cmp	r3, #2
 8007170:	d023      	beq.n	80071ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007172:	e05e      	b.n	8007232 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	8b12      	ldrh	r2, [r2, #24]
 800717c:	4293      	cmp	r3, r2
 800717e:	d90b      	bls.n	8007198 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	69d9      	ldr	r1, [r3, #28]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8b1a      	ldrh	r2, [r3, #24]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	7b5b      	ldrb	r3, [r3, #13]
 800718c:	2001      	movs	r0, #1
 800718e:	9000      	str	r0, [sp, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fcb8 	bl	8007b06 <USBH_BulkSendData>
 8007196:	e00b      	b.n	80071b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	7b5b      	ldrb	r3, [r3, #13]
 80071a6:	2001      	movs	r0, #1
 80071a8:	9000      	str	r0, [sp, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fcab 	bl	8007b06 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80071b8:	e03b      	b.n	8007232 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	7b5b      	ldrb	r3, [r3, #13]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 ff83 	bl	80080cc <USBH_LL_GetURBState>
 80071c6:	4603      	mov	r3, r0
 80071c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d128      	bne.n	8007222 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	8b12      	ldrh	r2, [r2, #24]
 80071d8:	4293      	cmp	r3, r2
 80071da:	d90e      	bls.n	80071fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	8b12      	ldrh	r2, [r2, #24]
 80071e4:	1a9a      	subs	r2, r3, r2
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	8b12      	ldrh	r2, [r2, #24]
 80071f2:	441a      	add	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	61da      	str	r2, [r3, #28]
 80071f8:	e002      	b.n	8007200 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	2b00      	cmp	r3, #0
 8007206:	d004      	beq.n	8007212 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007210:	e00e      	b.n	8007230 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f868 	bl	80072f0 <USBH_CDC_TransmitCallback>
      break;
 8007220:	e006      	b.n	8007230 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d103      	bne.n	8007230 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007230:	bf00      	nop
  }
}
 8007232:	bf00      	nop
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800724c:	2300      	movs	r3, #0
 800724e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007256:	2b03      	cmp	r3, #3
 8007258:	d002      	beq.n	8007260 <CDC_ProcessReception+0x26>
 800725a:	2b04      	cmp	r3, #4
 800725c:	d00e      	beq.n	800727c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800725e:	e043      	b.n	80072e8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	6a19      	ldr	r1, [r3, #32]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	8b5a      	ldrh	r2, [r3, #26]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	7b1b      	ldrb	r3, [r3, #12]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fc6f 	bl	8007b50 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2204      	movs	r2, #4
 8007276:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800727a:	e035      	b.n	80072e8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	7b1b      	ldrb	r3, [r3, #12]
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 ff22 	bl	80080cc <USBH_LL_GetURBState>
 8007288:	4603      	mov	r3, r0
 800728a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800728c:	7cfb      	ldrb	r3, [r7, #19]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d129      	bne.n	80072e6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	7b1b      	ldrb	r3, [r3, #12]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fe85 	bl	8007fa8 <USBH_LL_GetLastXferSize>
 800729e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d016      	beq.n	80072d8 <CDC_ProcessReception+0x9e>
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	8b5b      	ldrh	r3, [r3, #26]
 80072ae:	461a      	mov	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d910      	bls.n	80072d8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1ad2      	subs	r2, r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6a1a      	ldr	r2, [r3, #32]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	441a      	add	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2203      	movs	r2, #3
 80072d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80072d6:	e006      	b.n	80072e6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f80f 	bl	8007304 <USBH_CDC_ReceiveCallback>
      break;
 80072e6:	bf00      	nop
  }
}
 80072e8:	bf00      	nop
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	4613      	mov	r3, r2
 8007338:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007340:	2302      	movs	r3, #2
 8007342:	e029      	b.n	8007398 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	79fa      	ldrb	r2, [r7, #7]
 8007348:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f81f 	bl	80073a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fd97 	bl	8007ec4 <USBH_LL_Init>

  return USBH_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e009      	b.n	80073c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	33e0      	adds	r3, #224	; 0xe0
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	2200      	movs	r2, #0
 80073be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b0f      	cmp	r3, #15
 80073ca:	d9f2      	bls.n	80073b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	e009      	b.n	80073e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ec:	d3f1      	bcc.n	80073d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2240      	movs	r2, #64	; 0x40
 8007412:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d016      	beq.n	800748a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10e      	bne.n	8007484 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800746c:	1c59      	adds	r1, r3, #1
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	33de      	adds	r3, #222	; 0xde
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
 8007482:	e004      	b.n	800748e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007484:	2302      	movs	r3, #2
 8007486:	73fb      	strb	r3, [r7, #15]
 8007488:	e001      	b.n	800748e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800748a:	2302      	movs	r3, #2
 800748c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80074b2:	78fa      	ldrb	r2, [r7, #3]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d204      	bcs.n	80074c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80074c0:	e001      	b.n	80074c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80074c2:	2302      	movs	r3, #2
 80074c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	4608      	mov	r0, r1
 80074de:	4611      	mov	r1, r2
 80074e0:	461a      	mov	r2, r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	70fb      	strb	r3, [r7, #3]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70bb      	strb	r3, [r7, #2]
 80074ea:	4613      	mov	r3, r2
 80074ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80074fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074fe:	e025      	b.n	800754c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007500:	7dfb      	ldrb	r3, [r7, #23]
 8007502:	221a      	movs	r2, #26
 8007504:	fb02 f303 	mul.w	r3, r2, r3
 8007508:	3308      	adds	r3, #8
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	3302      	adds	r3, #2
 8007510:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	795b      	ldrb	r3, [r3, #5]
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	429a      	cmp	r2, r3
 800751a:	d002      	beq.n	8007522 <USBH_FindInterface+0x4e>
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	2bff      	cmp	r3, #255	; 0xff
 8007520:	d111      	bne.n	8007546 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007526:	78ba      	ldrb	r2, [r7, #2]
 8007528:	429a      	cmp	r2, r3
 800752a:	d002      	beq.n	8007532 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800752c:	78bb      	ldrb	r3, [r7, #2]
 800752e:	2bff      	cmp	r3, #255	; 0xff
 8007530:	d109      	bne.n	8007546 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007536:	787a      	ldrb	r2, [r7, #1]
 8007538:	429a      	cmp	r2, r3
 800753a:	d002      	beq.n	8007542 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800753c:	787b      	ldrb	r3, [r7, #1]
 800753e:	2bff      	cmp	r3, #255	; 0xff
 8007540:	d101      	bne.n	8007546 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	e006      	b.n	8007554 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	3301      	adds	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d9d6      	bls.n	8007500 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007552:	23ff      	movs	r3, #255	; 0xff
}
 8007554:	4618      	mov	r0, r3
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fce7 	bl	8007f3c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800756e:	2101      	movs	r1, #1
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fdbe 	bl	80080f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f804 	bl	80075c2 <USBH_HandleSof>
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b0b      	cmp	r3, #11
 80075d2:	d10a      	bne.n	80075ea <USBH_HandleSof+0x28>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
  }
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007602:	bf00      	nop
}
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800761e:	bf00      	nop
}
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc7a 	bl	8007f72 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	791b      	ldrb	r3, [r3, #4]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fad1 	bl	8007c2c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	795b      	ldrb	r3, [r3, #5]
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 facb 	bl	8007c2c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	789b      	ldrb	r3, [r3, #2]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d10f      	bne.n	80076d4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80076d4:	2200      	movs	r2, #0
 80076d6:	2100      	movs	r1, #0
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f805 	bl	80076e8 <USBH_CtlReq>
 80076de:	4603      	mov	r3, r0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80076f6:	2301      	movs	r3, #1
 80076f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	789b      	ldrb	r3, [r3, #2]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d002      	beq.n	8007708 <USBH_CtlReq+0x20>
 8007702:	2b02      	cmp	r3, #2
 8007704:	d00f      	beq.n	8007726 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007706:	e027      	b.n	8007758 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	88fa      	ldrh	r2, [r7, #6]
 8007712:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2202      	movs	r2, #2
 800771e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007720:	2301      	movs	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
      break;
 8007724:	e018      	b.n	8007758 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f81c 	bl	8007764 <USBH_HandleControl>
 800772c:	4603      	mov	r3, r0
 800772e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <USBH_CtlReq+0x54>
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	2b03      	cmp	r3, #3
 800773a:	d106      	bne.n	800774a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2201      	movs	r2, #1
 8007740:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	761a      	strb	r2, [r3, #24]
      break;
 8007748:	e005      	b.n	8007756 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d102      	bne.n	8007756 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	709a      	strb	r2, [r3, #2]
      break;
 8007756:	bf00      	nop
  }
  return status;
 8007758:	7dfb      	ldrb	r3, [r7, #23]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af02      	add	r7, sp, #8
 800776a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007770:	2300      	movs	r3, #0
 8007772:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7e1b      	ldrb	r3, [r3, #24]
 8007778:	3b01      	subs	r3, #1
 800777a:	2b0a      	cmp	r3, #10
 800777c:	f200 8156 	bhi.w	8007a2c <USBH_HandleControl+0x2c8>
 8007780:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <USBH_HandleControl+0x24>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	080077b5 	.word	0x080077b5
 800778c:	080077cf 	.word	0x080077cf
 8007790:	08007839 	.word	0x08007839
 8007794:	0800785f 	.word	0x0800785f
 8007798:	08007897 	.word	0x08007897
 800779c:	080078c1 	.word	0x080078c1
 80077a0:	08007913 	.word	0x08007913
 80077a4:	08007935 	.word	0x08007935
 80077a8:	08007971 	.word	0x08007971
 80077ac:	08007997 	.word	0x08007997
 80077b0:	080079d5 	.word	0x080079d5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f103 0110 	add.w	r1, r3, #16
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	795b      	ldrb	r3, [r3, #5]
 80077be:	461a      	mov	r2, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f943 	bl	8007a4c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	761a      	strb	r2, [r3, #24]
      break;
 80077cc:	e139      	b.n	8007a42 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	795b      	ldrb	r3, [r3, #5]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fc79 	bl	80080cc <USBH_LL_GetURBState>
 80077da:	4603      	mov	r3, r0
 80077dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d11e      	bne.n	8007822 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7c1b      	ldrb	r3, [r3, #16]
 80077e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8adb      	ldrh	r3, [r3, #22]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80077f6:	7b7b      	ldrb	r3, [r7, #13]
 80077f8:	2b80      	cmp	r3, #128	; 0x80
 80077fa:	d103      	bne.n	8007804 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2203      	movs	r2, #3
 8007800:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007802:	e115      	b.n	8007a30 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2205      	movs	r2, #5
 8007808:	761a      	strb	r2, [r3, #24]
      break;
 800780a:	e111      	b.n	8007a30 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800780c:	7b7b      	ldrb	r3, [r7, #13]
 800780e:	2b80      	cmp	r3, #128	; 0x80
 8007810:	d103      	bne.n	800781a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2209      	movs	r2, #9
 8007816:	761a      	strb	r2, [r3, #24]
      break;
 8007818:	e10a      	b.n	8007a30 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2207      	movs	r2, #7
 800781e:	761a      	strb	r2, [r3, #24]
      break;
 8007820:	e106      	b.n	8007a30 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	2b04      	cmp	r3, #4
 8007826:	d003      	beq.n	8007830 <USBH_HandleControl+0xcc>
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	2b02      	cmp	r3, #2
 800782c:	f040 8100 	bne.w	8007a30 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	220b      	movs	r2, #11
 8007834:	761a      	strb	r2, [r3, #24]
      break;
 8007836:	e0fb      	b.n	8007a30 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800783e:	b29a      	uxth	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6899      	ldr	r1, [r3, #8]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	899a      	ldrh	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	791b      	ldrb	r3, [r3, #4]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f93a 	bl	8007aca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2204      	movs	r2, #4
 800785a:	761a      	strb	r2, [r3, #24]
      break;
 800785c:	e0f1      	b.n	8007a42 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	791b      	ldrb	r3, [r3, #4]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc31 	bl	80080cc <USBH_LL_GetURBState>
 800786a:	4603      	mov	r3, r0
 800786c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d102      	bne.n	800787a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2209      	movs	r2, #9
 8007878:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b05      	cmp	r3, #5
 800787e:	d102      	bne.n	8007886 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007880:	2303      	movs	r3, #3
 8007882:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007884:	e0d6      	b.n	8007a34 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b04      	cmp	r3, #4
 800788a:	f040 80d3 	bne.w	8007a34 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	220b      	movs	r2, #11
 8007892:	761a      	strb	r2, [r3, #24]
      break;
 8007894:	e0ce      	b.n	8007a34 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6899      	ldr	r1, [r3, #8]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	899a      	ldrh	r2, [r3, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	795b      	ldrb	r3, [r3, #5]
 80078a2:	2001      	movs	r0, #1
 80078a4:	9000      	str	r0, [sp, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f8ea 	bl	8007a80 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2206      	movs	r2, #6
 80078bc:	761a      	strb	r2, [r3, #24]
      break;
 80078be:	e0c0      	b.n	8007a42 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	795b      	ldrb	r3, [r3, #5]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc00 	bl	80080cc <USBH_LL_GetURBState>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d103      	bne.n	80078de <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2207      	movs	r2, #7
 80078da:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078dc:	e0ac      	b.n	8007a38 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b05      	cmp	r3, #5
 80078e2:	d105      	bne.n	80078f0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	220c      	movs	r2, #12
 80078e8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078ea:	2303      	movs	r3, #3
 80078ec:	73fb      	strb	r3, [r7, #15]
      break;
 80078ee:	e0a3      	b.n	8007a38 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d103      	bne.n	80078fe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2205      	movs	r2, #5
 80078fa:	761a      	strb	r2, [r3, #24]
      break;
 80078fc:	e09c      	b.n	8007a38 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b04      	cmp	r3, #4
 8007902:	f040 8099 	bne.w	8007a38 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	220b      	movs	r2, #11
 800790a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800790c:	2302      	movs	r3, #2
 800790e:	73fb      	strb	r3, [r7, #15]
      break;
 8007910:	e092      	b.n	8007a38 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	791b      	ldrb	r3, [r3, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	2100      	movs	r1, #0
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f8d5 	bl	8007aca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007926:	b29a      	uxth	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2208      	movs	r2, #8
 8007930:	761a      	strb	r2, [r3, #24]

      break;
 8007932:	e086      	b.n	8007a42 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	791b      	ldrb	r3, [r3, #4]
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fbc6 	bl	80080cc <USBH_LL_GetURBState>
 8007940:	4603      	mov	r3, r0
 8007942:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d105      	bne.n	8007956 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	220d      	movs	r2, #13
 800794e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007954:	e072      	b.n	8007a3c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b04      	cmp	r3, #4
 800795a:	d103      	bne.n	8007964 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	220b      	movs	r2, #11
 8007960:	761a      	strb	r2, [r3, #24]
      break;
 8007962:	e06b      	b.n	8007a3c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b05      	cmp	r3, #5
 8007968:	d168      	bne.n	8007a3c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800796a:	2303      	movs	r3, #3
 800796c:	73fb      	strb	r3, [r7, #15]
      break;
 800796e:	e065      	b.n	8007a3c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	795b      	ldrb	r3, [r3, #5]
 8007974:	2201      	movs	r2, #1
 8007976:	9200      	str	r2, [sp, #0]
 8007978:	2200      	movs	r2, #0
 800797a:	2100      	movs	r1, #0
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f87f 	bl	8007a80 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007988:	b29a      	uxth	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	220a      	movs	r2, #10
 8007992:	761a      	strb	r2, [r3, #24]
      break;
 8007994:	e055      	b.n	8007a42 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	795b      	ldrb	r3, [r3, #5]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb95 	bl	80080cc <USBH_LL_GetURBState>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d105      	bne.n	80079b8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	220d      	movs	r2, #13
 80079b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079b6:	e043      	b.n	8007a40 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d103      	bne.n	80079c6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2209      	movs	r2, #9
 80079c2:	761a      	strb	r2, [r3, #24]
      break;
 80079c4:	e03c      	b.n	8007a40 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d139      	bne.n	8007a40 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	220b      	movs	r2, #11
 80079d0:	761a      	strb	r2, [r3, #24]
      break;
 80079d2:	e035      	b.n	8007a40 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	7e5b      	ldrb	r3, [r3, #25]
 80079d8:	3301      	adds	r3, #1
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	765a      	strb	r2, [r3, #25]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7e5b      	ldrb	r3, [r3, #25]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d806      	bhi.n	80079f6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80079f4:	e025      	b.n	8007a42 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079fc:	2106      	movs	r1, #6
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	795b      	ldrb	r3, [r3, #5]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f90c 	bl	8007c2c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	791b      	ldrb	r3, [r3, #4]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f906 	bl	8007c2c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a26:	2302      	movs	r3, #2
 8007a28:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2a:	e00a      	b.n	8007a42 <USBH_HandleControl+0x2de>

    default:
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e008      	b.n	8007a42 <USBH_HandleControl+0x2de>
      break;
 8007a30:	bf00      	nop
 8007a32:	e006      	b.n	8007a42 <USBH_HandleControl+0x2de>
      break;
 8007a34:	bf00      	nop
 8007a36:	e004      	b.n	8007a42 <USBH_HandleControl+0x2de>
      break;
 8007a38:	bf00      	nop
 8007a3a:	e002      	b.n	8007a42 <USBH_HandleControl+0x2de>
      break;
 8007a3c:	bf00      	nop
 8007a3e:	e000      	b.n	8007a42 <USBH_HandleControl+0x2de>
      break;
 8007a40:	bf00      	nop
  }

  return status;
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b088      	sub	sp, #32
 8007a50:	af04      	add	r7, sp, #16
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a5a:	79f9      	ldrb	r1, [r7, #7]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	9303      	str	r3, [sp, #12]
 8007a60:	2308      	movs	r3, #8
 8007a62:	9302      	str	r3, [sp, #8]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	9301      	str	r3, [sp, #4]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2200      	movs	r2, #0
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fafa 	bl	800806a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af04      	add	r7, sp, #16
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	460b      	mov	r3, r1
 8007a90:	80fb      	strh	r3, [r7, #6]
 8007a92:	4613      	mov	r3, r2
 8007a94:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007aa4:	7979      	ldrb	r1, [r7, #5]
 8007aa6:	7e3b      	ldrb	r3, [r7, #24]
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	9302      	str	r3, [sp, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2200      	movs	r2, #0
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 fad5 	bl	800806a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b088      	sub	sp, #32
 8007ace:	af04      	add	r7, sp, #16
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	460b      	mov	r3, r1
 8007ada:	80fb      	strh	r3, [r7, #6]
 8007adc:	4613      	mov	r3, r2
 8007ade:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ae0:	7979      	ldrb	r1, [r7, #5]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9303      	str	r3, [sp, #12]
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	9302      	str	r3, [sp, #8]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	2301      	movs	r3, #1
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	2300      	movs	r3, #0
 8007af4:	2201      	movs	r2, #1
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 fab7 	bl	800806a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007afc:	2300      	movs	r3, #0

}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b088      	sub	sp, #32
 8007b0a:	af04      	add	r7, sp, #16
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	4611      	mov	r1, r2
 8007b12:	461a      	mov	r2, r3
 8007b14:	460b      	mov	r3, r1
 8007b16:	80fb      	strh	r3, [r7, #6]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b2a:	7979      	ldrb	r1, [r7, #5]
 8007b2c:	7e3b      	ldrb	r3, [r7, #24]
 8007b2e:	9303      	str	r3, [sp, #12]
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	9302      	str	r3, [sp, #8]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	2301      	movs	r3, #1
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fa92 	bl	800806a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af04      	add	r7, sp, #16
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	460b      	mov	r3, r1
 8007b60:	80fb      	strh	r3, [r7, #6]
 8007b62:	4613      	mov	r3, r2
 8007b64:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b66:	7979      	ldrb	r1, [r7, #5]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9303      	str	r3, [sp, #12]
 8007b6c:	88fb      	ldrh	r3, [r7, #6]
 8007b6e:	9302      	str	r3, [sp, #8]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	2301      	movs	r3, #1
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	2302      	movs	r3, #2
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 fa74 	bl	800806a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af04      	add	r7, sp, #16
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	4608      	mov	r0, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	70fb      	strb	r3, [r7, #3]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70bb      	strb	r3, [r7, #2]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007ba6:	7878      	ldrb	r0, [r7, #1]
 8007ba8:	78ba      	ldrb	r2, [r7, #2]
 8007baa:	78f9      	ldrb	r1, [r7, #3]
 8007bac:	8b3b      	ldrh	r3, [r7, #24]
 8007bae:	9302      	str	r3, [sp, #8]
 8007bb0:	7d3b      	ldrb	r3, [r7, #20]
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	7c3b      	ldrb	r3, [r7, #16]
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	4603      	mov	r3, r0
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa07 	bl	8007fce <USBH_LL_OpenPipe>

  return USBH_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa26 	bl	800802c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f836 	bl	8007c68 <USBH_GetFreePipe>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c00:	89fb      	ldrh	r3, [r7, #14]
 8007c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00a      	beq.n	8007c20 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	89fb      	ldrh	r3, [r7, #14]
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	33e0      	adds	r3, #224	; 0xe0
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c20:	89fb      	ldrh	r3, [r7, #14]
 8007c22:	b2db      	uxtb	r3, r3
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	2b0f      	cmp	r3, #15
 8007c3c:	d80d      	bhi.n	8007c5a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	33e0      	adds	r3, #224	; 0xe0
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	33e0      	adds	r3, #224	; 0xe0
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e00f      	b.n	8007c9a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	33e0      	adds	r3, #224	; 0xe0
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	e007      	b.n	8007ca4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	3301      	adds	r3, #1
 8007c98:	73fb      	strb	r3, [r7, #15]
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b0f      	cmp	r3, #15
 8007c9e:	d9ec      	bls.n	8007c7a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	490e      	ldr	r1, [pc, #56]	; (8007cf0 <MX_USB_HOST_Init+0x40>)
 8007cb8:	480e      	ldr	r0, [pc, #56]	; (8007cf4 <MX_USB_HOST_Init+0x44>)
 8007cba:	f7ff fb37 	bl	800732c <USBH_Init>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007cc4:	f7f9 f9da 	bl	800107c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007cc8:	490b      	ldr	r1, [pc, #44]	; (8007cf8 <MX_USB_HOST_Init+0x48>)
 8007cca:	480a      	ldr	r0, [pc, #40]	; (8007cf4 <MX_USB_HOST_Init+0x44>)
 8007ccc:	f7ff fbbc 	bl	8007448 <USBH_RegisterClass>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007cd6:	f7f9 f9d1 	bl	800107c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007cda:	4806      	ldr	r0, [pc, #24]	; (8007cf4 <MX_USB_HOST_Init+0x44>)
 8007cdc:	f7ff fc40 	bl	8007560 <USBH_Start>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007ce6:	f7f9 f9c9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007cea:	bf00      	nop
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	08007cfd 	.word	0x08007cfd
 8007cf4:	20000398 	.word	0x20000398
 8007cf8:	20000098 	.word	0x20000098

08007cfc <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d819      	bhi.n	8007d44 <USBH_UserProcess+0x48>
 8007d10:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <USBH_UserProcess+0x1c>)
 8007d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d16:	bf00      	nop
 8007d18:	08007d45 	.word	0x08007d45
 8007d1c:	08007d35 	.word	0x08007d35
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d3d 	.word	0x08007d3d
 8007d28:	08007d2d 	.word	0x08007d2d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <USBH_UserProcess+0x58>)
 8007d2e:	2203      	movs	r2, #3
 8007d30:	701a      	strb	r2, [r3, #0]
  break;
 8007d32:	e008      	b.n	8007d46 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007d34:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <USBH_UserProcess+0x58>)
 8007d36:	2202      	movs	r2, #2
 8007d38:	701a      	strb	r2, [r3, #0]
  break;
 8007d3a:	e004      	b.n	8007d46 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <USBH_UserProcess+0x58>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	701a      	strb	r2, [r3, #0]
  break;
 8007d42:	e000      	b.n	8007d46 <USBH_UserProcess+0x4a>

  default:
  break;
 8007d44:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000770 	.word	0x20000770

08007d58 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d60:	f107 0314 	add.w	r3, r7, #20
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	605a      	str	r2, [r3, #4]
 8007d6a:	609a      	str	r2, [r3, #8]
 8007d6c:	60da      	str	r2, [r3, #12]
 8007d6e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d78:	d147      	bne.n	8007e0a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	4b25      	ldr	r3, [pc, #148]	; (8007e14 <HAL_HCD_MspInit+0xbc>)
 8007d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d82:	4a24      	ldr	r2, [pc, #144]	; (8007e14 <HAL_HCD_MspInit+0xbc>)
 8007d84:	f043 0301 	orr.w	r3, r3, #1
 8007d88:	6313      	str	r3, [r2, #48]	; 0x30
 8007d8a:	4b22      	ldr	r3, [pc, #136]	; (8007e14 <HAL_HCD_MspInit+0xbc>)
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	613b      	str	r3, [r7, #16]
 8007d94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007da4:	f107 0314 	add.w	r3, r7, #20
 8007da8:	4619      	mov	r1, r3
 8007daa:	481b      	ldr	r0, [pc, #108]	; (8007e18 <HAL_HCD_MspInit+0xc0>)
 8007dac:	f7fa f8de 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007db0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007db6:	2302      	movs	r3, #2
 8007db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007dc2:	230a      	movs	r3, #10
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dc6:	f107 0314 	add.w	r3, r7, #20
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4812      	ldr	r0, [pc, #72]	; (8007e18 <HAL_HCD_MspInit+0xc0>)
 8007dce:	f7fa f8cd 	bl	8001f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <HAL_HCD_MspInit+0xbc>)
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd6:	4a0f      	ldr	r2, [pc, #60]	; (8007e14 <HAL_HCD_MspInit+0xbc>)
 8007dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ddc:	6353      	str	r3, [r2, #52]	; 0x34
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <HAL_HCD_MspInit+0xbc>)
 8007de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de6:	4a0b      	ldr	r2, [pc, #44]	; (8007e14 <HAL_HCD_MspInit+0xbc>)
 8007de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dec:	6453      	str	r3, [r2, #68]	; 0x44
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <HAL_HCD_MspInit+0xbc>)
 8007df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	2043      	movs	r0, #67	; 0x43
 8007e00:	f7f9 fd5f 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e04:	2043      	movs	r0, #67	; 0x43
 8007e06:	f7f9 fd78 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3728      	adds	r7, #40	; 0x28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40023800 	.word	0x40023800
 8007e18:	40020000 	.word	0x40020000

08007e1c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff fbb7 	bl	800759e <USBH_LL_IncTimer>
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fbef 	bl	800762a <USBH_LL_Connect>
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff fbf8 	bl	8007658 <USBH_LL_Disconnect>
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7ff fba9 	bl	80075f2 <USBH_LL_PortEnabled>
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fba9 	bl	800760e <USBH_LL_PortDisabled>
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d12a      	bne.n	8007f2c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ed6:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <USBH_LL_Init+0x74>)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <USBH_LL_Init+0x74>)
 8007ee2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <USBH_LL_Init+0x74>)
 8007ee8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007eec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007eee:	4b12      	ldr	r3, [pc, #72]	; (8007f38 <USBH_LL_Init+0x74>)
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ef4:	4b10      	ldr	r3, [pc, #64]	; (8007f38 <USBH_LL_Init+0x74>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007efa:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <USBH_LL_Init+0x74>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007f00:	4b0d      	ldr	r3, [pc, #52]	; (8007f38 <USBH_LL_Init+0x74>)
 8007f02:	2202      	movs	r2, #2
 8007f04:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f06:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <USBH_LL_Init+0x74>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007f0c:	480a      	ldr	r0, [pc, #40]	; (8007f38 <USBH_LL_Init+0x74>)
 8007f0e:	f7fa fa1e 	bl	800234e <HAL_HCD_Init>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f18:	f7f9 f8b0 	bl	800107c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f1c:	4806      	ldr	r0, [pc, #24]	; (8007f38 <USBH_LL_Init+0x74>)
 8007f1e:	f7fa fdf4 	bl	8002b0a <HAL_HCD_GetCurrentFrame>
 8007f22:	4603      	mov	r3, r0
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fb2a 	bl	8007580 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000774 	.word	0x20000774

08007f3c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fa fd71 	bl	8002a3a <HAL_HCD_Start>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f90e 	bl	8008180 <USBH_Get_USB_Status>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fa fd79 	bl	8002a80 <HAL_HCD_Stop>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 f8f3 	bl	8008180 <USBH_Get_USB_Status>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fa fd8f 	bl	8002ae2 <HAL_HCD_HC_GetXferCount>
 8007fc4:	4603      	mov	r3, r0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fce:	b590      	push	{r4, r7, lr}
 8007fd0:	b089      	sub	sp, #36	; 0x24
 8007fd2:	af04      	add	r7, sp, #16
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	4611      	mov	r1, r2
 8007fda:	461a      	mov	r2, r3
 8007fdc:	4603      	mov	r3, r0
 8007fde:	70fb      	strb	r3, [r7, #3]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70bb      	strb	r3, [r7, #2]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ff6:	787c      	ldrb	r4, [r7, #1]
 8007ff8:	78ba      	ldrb	r2, [r7, #2]
 8007ffa:	78f9      	ldrb	r1, [r7, #3]
 8007ffc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ffe:	9302      	str	r3, [sp, #8]
 8008000:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	f897 3020 	ldrb.w	r3, [r7, #32]
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	4623      	mov	r3, r4
 800800e:	f7fa fa00 	bl	8002412 <HAL_HCD_HC_Init>
 8008012:	4603      	mov	r3, r0
 8008014:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	4618      	mov	r0, r3
 800801a:	f000 f8b1 	bl	8008180 <USBH_Get_USB_Status>
 800801e:	4603      	mov	r3, r0
 8008020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008022:	7bbb      	ldrb	r3, [r7, #14]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	bd90      	pop	{r4, r7, pc}

0800802c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008046:	78fa      	ldrb	r2, [r7, #3]
 8008048:	4611      	mov	r1, r2
 800804a:	4618      	mov	r0, r3
 800804c:	f7fa fa70 	bl	8002530 <HAL_HCD_HC_Halt>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f892 	bl	8008180 <USBH_Get_USB_Status>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008060:	7bbb      	ldrb	r3, [r7, #14]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800806a:	b590      	push	{r4, r7, lr}
 800806c:	b089      	sub	sp, #36	; 0x24
 800806e:	af04      	add	r7, sp, #16
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	4608      	mov	r0, r1
 8008074:	4611      	mov	r1, r2
 8008076:	461a      	mov	r2, r3
 8008078:	4603      	mov	r3, r0
 800807a:	70fb      	strb	r3, [r7, #3]
 800807c:	460b      	mov	r3, r1
 800807e:	70bb      	strb	r3, [r7, #2]
 8008080:	4613      	mov	r3, r2
 8008082:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008092:	787c      	ldrb	r4, [r7, #1]
 8008094:	78ba      	ldrb	r2, [r7, #2]
 8008096:	78f9      	ldrb	r1, [r7, #3]
 8008098:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800809c:	9303      	str	r3, [sp, #12]
 800809e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080a0:	9302      	str	r3, [sp, #8]
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4623      	mov	r3, r4
 80080ae:	f7fa fa63 	bl	8002578 <HAL_HCD_HC_SubmitRequest>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f861 	bl	8008180 <USBH_Get_USB_Status>
 80080be:	4603      	mov	r3, r0
 80080c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd90      	pop	{r4, r7, pc}

080080cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fa fce9 	bl	8002aba <HAL_HCD_HC_GetURBState>
 80080e8:	4603      	mov	r3, r0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	460b      	mov	r3, r1
 80080fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008104:	2b01      	cmp	r3, #1
 8008106:	d103      	bne.n	8008110 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f864 	bl	80081d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008110:	20c8      	movs	r0, #200	; 0xc8
 8008112:	f7f9 fad7 	bl	80016c4 <HAL_Delay>
  return USBH_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
 800812c:	4613      	mov	r3, r2
 800812e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008136:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	212c      	movs	r1, #44	; 0x2c
 800813e:	fb01 f303 	mul.w	r3, r1, r3
 8008142:	4413      	add	r3, r2
 8008144:	333b      	adds	r3, #59	; 0x3b
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	212c      	movs	r1, #44	; 0x2c
 8008152:	fb01 f303 	mul.w	r3, r1, r3
 8008156:	4413      	add	r3, r2
 8008158:	3354      	adds	r3, #84	; 0x54
 800815a:	78ba      	ldrb	r2, [r7, #2]
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	e008      	b.n	8008172 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	212c      	movs	r1, #44	; 0x2c
 8008166:	fb01 f303 	mul.w	r3, r1, r3
 800816a:	4413      	add	r3, r2
 800816c:	3355      	adds	r3, #85	; 0x55
 800816e:	78ba      	ldrb	r2, [r7, #2]
 8008170:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	2b03      	cmp	r3, #3
 8008192:	d817      	bhi.n	80081c4 <USBH_Get_USB_Status+0x44>
 8008194:	a201      	add	r2, pc, #4	; (adr r2, 800819c <USBH_Get_USB_Status+0x1c>)
 8008196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819a:	bf00      	nop
 800819c:	080081ad 	.word	0x080081ad
 80081a0:	080081b3 	.word	0x080081b3
 80081a4:	080081b9 	.word	0x080081b9
 80081a8:	080081bf 	.word	0x080081bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]
    break;
 80081b0:	e00b      	b.n	80081ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80081b2:	2302      	movs	r3, #2
 80081b4:	73fb      	strb	r3, [r7, #15]
    break;
 80081b6:	e008      	b.n	80081ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80081b8:	2301      	movs	r3, #1
 80081ba:	73fb      	strb	r3, [r7, #15]
    break;
 80081bc:	e005      	b.n	80081ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80081be:	2302      	movs	r3, #2
 80081c0:	73fb      	strb	r3, [r7, #15]
    break;
 80081c2:	e002      	b.n	80081ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80081c4:	2302      	movs	r3, #2
 80081c6:	73fb      	strb	r3, [r7, #15]
    break;
 80081c8:	bf00      	nop
  }
  return usb_status;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]
 80081f0:	e001      	b.n	80081f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80081f2:	2301      	movs	r3, #1
 80081f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	461a      	mov	r2, r3
 80081fa:	2101      	movs	r1, #1
 80081fc:	4803      	ldr	r0, [pc, #12]	; (800820c <MX_DriverVbusFS+0x34>)
 80081fe:	f7fa f869 	bl	80022d4 <HAL_GPIO_WritePin>
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	40020800 	.word	0x40020800

08008210 <malloc>:
 8008210:	4b02      	ldr	r3, [pc, #8]	; (800821c <malloc+0xc>)
 8008212:	4601      	mov	r1, r0
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	f000 b82b 	b.w	8008270 <_malloc_r>
 800821a:	bf00      	nop
 800821c:	20000104 	.word	0x20000104

08008220 <free>:
 8008220:	4b02      	ldr	r3, [pc, #8]	; (800822c <free+0xc>)
 8008222:	4601      	mov	r1, r0
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	f000 b8f3 	b.w	8008410 <_free_r>
 800822a:	bf00      	nop
 800822c:	20000104 	.word	0x20000104

08008230 <sbrk_aligned>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	4e0e      	ldr	r6, [pc, #56]	; (800826c <sbrk_aligned+0x3c>)
 8008234:	460c      	mov	r4, r1
 8008236:	6831      	ldr	r1, [r6, #0]
 8008238:	4605      	mov	r5, r0
 800823a:	b911      	cbnz	r1, 8008242 <sbrk_aligned+0x12>
 800823c:	f000 f8ac 	bl	8008398 <_sbrk_r>
 8008240:	6030      	str	r0, [r6, #0]
 8008242:	4621      	mov	r1, r4
 8008244:	4628      	mov	r0, r5
 8008246:	f000 f8a7 	bl	8008398 <_sbrk_r>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	d00a      	beq.n	8008264 <sbrk_aligned+0x34>
 800824e:	1cc4      	adds	r4, r0, #3
 8008250:	f024 0403 	bic.w	r4, r4, #3
 8008254:	42a0      	cmp	r0, r4
 8008256:	d007      	beq.n	8008268 <sbrk_aligned+0x38>
 8008258:	1a21      	subs	r1, r4, r0
 800825a:	4628      	mov	r0, r5
 800825c:	f000 f89c 	bl	8008398 <_sbrk_r>
 8008260:	3001      	adds	r0, #1
 8008262:	d101      	bne.n	8008268 <sbrk_aligned+0x38>
 8008264:	f04f 34ff 	mov.w	r4, #4294967295
 8008268:	4620      	mov	r0, r4
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	20000a7c 	.word	0x20000a7c

08008270 <_malloc_r>:
 8008270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008274:	1ccd      	adds	r5, r1, #3
 8008276:	f025 0503 	bic.w	r5, r5, #3
 800827a:	3508      	adds	r5, #8
 800827c:	2d0c      	cmp	r5, #12
 800827e:	bf38      	it	cc
 8008280:	250c      	movcc	r5, #12
 8008282:	2d00      	cmp	r5, #0
 8008284:	4607      	mov	r7, r0
 8008286:	db01      	blt.n	800828c <_malloc_r+0x1c>
 8008288:	42a9      	cmp	r1, r5
 800828a:	d905      	bls.n	8008298 <_malloc_r+0x28>
 800828c:	230c      	movs	r3, #12
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	2600      	movs	r6, #0
 8008292:	4630      	mov	r0, r6
 8008294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008298:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800836c <_malloc_r+0xfc>
 800829c:	f000 f868 	bl	8008370 <__malloc_lock>
 80082a0:	f8d8 3000 	ldr.w	r3, [r8]
 80082a4:	461c      	mov	r4, r3
 80082a6:	bb5c      	cbnz	r4, 8008300 <_malloc_r+0x90>
 80082a8:	4629      	mov	r1, r5
 80082aa:	4638      	mov	r0, r7
 80082ac:	f7ff ffc0 	bl	8008230 <sbrk_aligned>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	4604      	mov	r4, r0
 80082b4:	d155      	bne.n	8008362 <_malloc_r+0xf2>
 80082b6:	f8d8 4000 	ldr.w	r4, [r8]
 80082ba:	4626      	mov	r6, r4
 80082bc:	2e00      	cmp	r6, #0
 80082be:	d145      	bne.n	800834c <_malloc_r+0xdc>
 80082c0:	2c00      	cmp	r4, #0
 80082c2:	d048      	beq.n	8008356 <_malloc_r+0xe6>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	4631      	mov	r1, r6
 80082c8:	4638      	mov	r0, r7
 80082ca:	eb04 0903 	add.w	r9, r4, r3
 80082ce:	f000 f863 	bl	8008398 <_sbrk_r>
 80082d2:	4581      	cmp	r9, r0
 80082d4:	d13f      	bne.n	8008356 <_malloc_r+0xe6>
 80082d6:	6821      	ldr	r1, [r4, #0]
 80082d8:	1a6d      	subs	r5, r5, r1
 80082da:	4629      	mov	r1, r5
 80082dc:	4638      	mov	r0, r7
 80082de:	f7ff ffa7 	bl	8008230 <sbrk_aligned>
 80082e2:	3001      	adds	r0, #1
 80082e4:	d037      	beq.n	8008356 <_malloc_r+0xe6>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	442b      	add	r3, r5
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	f8d8 3000 	ldr.w	r3, [r8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d038      	beq.n	8008366 <_malloc_r+0xf6>
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	42a2      	cmp	r2, r4
 80082f8:	d12b      	bne.n	8008352 <_malloc_r+0xe2>
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	e00f      	b.n	8008320 <_malloc_r+0xb0>
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	1b52      	subs	r2, r2, r5
 8008304:	d41f      	bmi.n	8008346 <_malloc_r+0xd6>
 8008306:	2a0b      	cmp	r2, #11
 8008308:	d917      	bls.n	800833a <_malloc_r+0xca>
 800830a:	1961      	adds	r1, r4, r5
 800830c:	42a3      	cmp	r3, r4
 800830e:	6025      	str	r5, [r4, #0]
 8008310:	bf18      	it	ne
 8008312:	6059      	strne	r1, [r3, #4]
 8008314:	6863      	ldr	r3, [r4, #4]
 8008316:	bf08      	it	eq
 8008318:	f8c8 1000 	streq.w	r1, [r8]
 800831c:	5162      	str	r2, [r4, r5]
 800831e:	604b      	str	r3, [r1, #4]
 8008320:	4638      	mov	r0, r7
 8008322:	f104 060b 	add.w	r6, r4, #11
 8008326:	f000 f829 	bl	800837c <__malloc_unlock>
 800832a:	f026 0607 	bic.w	r6, r6, #7
 800832e:	1d23      	adds	r3, r4, #4
 8008330:	1af2      	subs	r2, r6, r3
 8008332:	d0ae      	beq.n	8008292 <_malloc_r+0x22>
 8008334:	1b9b      	subs	r3, r3, r6
 8008336:	50a3      	str	r3, [r4, r2]
 8008338:	e7ab      	b.n	8008292 <_malloc_r+0x22>
 800833a:	42a3      	cmp	r3, r4
 800833c:	6862      	ldr	r2, [r4, #4]
 800833e:	d1dd      	bne.n	80082fc <_malloc_r+0x8c>
 8008340:	f8c8 2000 	str.w	r2, [r8]
 8008344:	e7ec      	b.n	8008320 <_malloc_r+0xb0>
 8008346:	4623      	mov	r3, r4
 8008348:	6864      	ldr	r4, [r4, #4]
 800834a:	e7ac      	b.n	80082a6 <_malloc_r+0x36>
 800834c:	4634      	mov	r4, r6
 800834e:	6876      	ldr	r6, [r6, #4]
 8008350:	e7b4      	b.n	80082bc <_malloc_r+0x4c>
 8008352:	4613      	mov	r3, r2
 8008354:	e7cc      	b.n	80082f0 <_malloc_r+0x80>
 8008356:	230c      	movs	r3, #12
 8008358:	603b      	str	r3, [r7, #0]
 800835a:	4638      	mov	r0, r7
 800835c:	f000 f80e 	bl	800837c <__malloc_unlock>
 8008360:	e797      	b.n	8008292 <_malloc_r+0x22>
 8008362:	6025      	str	r5, [r4, #0]
 8008364:	e7dc      	b.n	8008320 <_malloc_r+0xb0>
 8008366:	605b      	str	r3, [r3, #4]
 8008368:	deff      	udf	#255	; 0xff
 800836a:	bf00      	nop
 800836c:	20000a78 	.word	0x20000a78

08008370 <__malloc_lock>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__malloc_lock+0x8>)
 8008372:	f000 b84b 	b.w	800840c <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	20000bbc 	.word	0x20000bbc

0800837c <__malloc_unlock>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__malloc_unlock+0x8>)
 800837e:	f000 b846 	b.w	800840e <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	20000bbc 	.word	0x20000bbc

08008388 <memset>:
 8008388:	4402      	add	r2, r0
 800838a:	4603      	mov	r3, r0
 800838c:	4293      	cmp	r3, r2
 800838e:	d100      	bne.n	8008392 <memset+0xa>
 8008390:	4770      	bx	lr
 8008392:	f803 1b01 	strb.w	r1, [r3], #1
 8008396:	e7f9      	b.n	800838c <memset+0x4>

08008398 <_sbrk_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d06      	ldr	r5, [pc, #24]	; (80083b4 <_sbrk_r+0x1c>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f9 f8a6 	bl	80014f4 <_sbrk>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_sbrk_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_sbrk_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20000bb8 	.word	0x20000bb8

080083b8 <__errno>:
 80083b8:	4b01      	ldr	r3, [pc, #4]	; (80083c0 <__errno+0x8>)
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	20000104 	.word	0x20000104

080083c4 <__libc_init_array>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	4d0d      	ldr	r5, [pc, #52]	; (80083fc <__libc_init_array+0x38>)
 80083c8:	4c0d      	ldr	r4, [pc, #52]	; (8008400 <__libc_init_array+0x3c>)
 80083ca:	1b64      	subs	r4, r4, r5
 80083cc:	10a4      	asrs	r4, r4, #2
 80083ce:	2600      	movs	r6, #0
 80083d0:	42a6      	cmp	r6, r4
 80083d2:	d109      	bne.n	80083e8 <__libc_init_array+0x24>
 80083d4:	4d0b      	ldr	r5, [pc, #44]	; (8008404 <__libc_init_array+0x40>)
 80083d6:	4c0c      	ldr	r4, [pc, #48]	; (8008408 <__libc_init_array+0x44>)
 80083d8:	f000 f866 	bl	80084a8 <_init>
 80083dc:	1b64      	subs	r4, r4, r5
 80083de:	10a4      	asrs	r4, r4, #2
 80083e0:	2600      	movs	r6, #0
 80083e2:	42a6      	cmp	r6, r4
 80083e4:	d105      	bne.n	80083f2 <__libc_init_array+0x2e>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ec:	4798      	blx	r3
 80083ee:	3601      	adds	r6, #1
 80083f0:	e7ee      	b.n	80083d0 <__libc_init_array+0xc>
 80083f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f6:	4798      	blx	r3
 80083f8:	3601      	adds	r6, #1
 80083fa:	e7f2      	b.n	80083e2 <__libc_init_array+0x1e>
 80083fc:	080084fc 	.word	0x080084fc
 8008400:	080084fc 	.word	0x080084fc
 8008404:	080084fc 	.word	0x080084fc
 8008408:	08008500 	.word	0x08008500

0800840c <__retarget_lock_acquire_recursive>:
 800840c:	4770      	bx	lr

0800840e <__retarget_lock_release_recursive>:
 800840e:	4770      	bx	lr

08008410 <_free_r>:
 8008410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008412:	2900      	cmp	r1, #0
 8008414:	d044      	beq.n	80084a0 <_free_r+0x90>
 8008416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800841a:	9001      	str	r0, [sp, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f1a1 0404 	sub.w	r4, r1, #4
 8008422:	bfb8      	it	lt
 8008424:	18e4      	addlt	r4, r4, r3
 8008426:	f7ff ffa3 	bl	8008370 <__malloc_lock>
 800842a:	4a1e      	ldr	r2, [pc, #120]	; (80084a4 <_free_r+0x94>)
 800842c:	9801      	ldr	r0, [sp, #4]
 800842e:	6813      	ldr	r3, [r2, #0]
 8008430:	b933      	cbnz	r3, 8008440 <_free_r+0x30>
 8008432:	6063      	str	r3, [r4, #4]
 8008434:	6014      	str	r4, [r2, #0]
 8008436:	b003      	add	sp, #12
 8008438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800843c:	f7ff bf9e 	b.w	800837c <__malloc_unlock>
 8008440:	42a3      	cmp	r3, r4
 8008442:	d908      	bls.n	8008456 <_free_r+0x46>
 8008444:	6825      	ldr	r5, [r4, #0]
 8008446:	1961      	adds	r1, r4, r5
 8008448:	428b      	cmp	r3, r1
 800844a:	bf01      	itttt	eq
 800844c:	6819      	ldreq	r1, [r3, #0]
 800844e:	685b      	ldreq	r3, [r3, #4]
 8008450:	1949      	addeq	r1, r1, r5
 8008452:	6021      	streq	r1, [r4, #0]
 8008454:	e7ed      	b.n	8008432 <_free_r+0x22>
 8008456:	461a      	mov	r2, r3
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	b10b      	cbz	r3, 8008460 <_free_r+0x50>
 800845c:	42a3      	cmp	r3, r4
 800845e:	d9fa      	bls.n	8008456 <_free_r+0x46>
 8008460:	6811      	ldr	r1, [r2, #0]
 8008462:	1855      	adds	r5, r2, r1
 8008464:	42a5      	cmp	r5, r4
 8008466:	d10b      	bne.n	8008480 <_free_r+0x70>
 8008468:	6824      	ldr	r4, [r4, #0]
 800846a:	4421      	add	r1, r4
 800846c:	1854      	adds	r4, r2, r1
 800846e:	42a3      	cmp	r3, r4
 8008470:	6011      	str	r1, [r2, #0]
 8008472:	d1e0      	bne.n	8008436 <_free_r+0x26>
 8008474:	681c      	ldr	r4, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	6053      	str	r3, [r2, #4]
 800847a:	440c      	add	r4, r1
 800847c:	6014      	str	r4, [r2, #0]
 800847e:	e7da      	b.n	8008436 <_free_r+0x26>
 8008480:	d902      	bls.n	8008488 <_free_r+0x78>
 8008482:	230c      	movs	r3, #12
 8008484:	6003      	str	r3, [r0, #0]
 8008486:	e7d6      	b.n	8008436 <_free_r+0x26>
 8008488:	6825      	ldr	r5, [r4, #0]
 800848a:	1961      	adds	r1, r4, r5
 800848c:	428b      	cmp	r3, r1
 800848e:	bf04      	itt	eq
 8008490:	6819      	ldreq	r1, [r3, #0]
 8008492:	685b      	ldreq	r3, [r3, #4]
 8008494:	6063      	str	r3, [r4, #4]
 8008496:	bf04      	itt	eq
 8008498:	1949      	addeq	r1, r1, r5
 800849a:	6021      	streq	r1, [r4, #0]
 800849c:	6054      	str	r4, [r2, #4]
 800849e:	e7ca      	b.n	8008436 <_free_r+0x26>
 80084a0:	b003      	add	sp, #12
 80084a2:	bd30      	pop	{r4, r5, pc}
 80084a4:	20000a78 	.word	0x20000a78

080084a8 <_init>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr

080084b4 <_fini>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr
