/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include <stdarg.h>
#include <string.h>
#include <stdint.h>
#include "main.h"
#include "usb_host.h"


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

I2C_HandleTypeDef hi2c1;

I2S_HandleTypeDef hi2s3;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;



/* USER CODE BEGIN PV */
char aray[]= "Hello Pogi\r\n";
char for_error[]= "wrong command\r\n";

uint8_t supported_commands[] = {
                               BL_GET_VER ,
                               BL_GET_HELP,
                               BL_GET_CID,
                               BL_GET_RDP_STATUS,
                               BL_GO_TO_ADDR,
                               BL_FLASH_ERASE,
                               BL_MEM_WRITE,
                               BL_READ_SECTOR_STATUS} ;

#define BL_RX_LEN  200
uint8_t uart_buff[BL_RX_LEN];

uint8_t response_buffer[50];

#define ADDR_VALID 0x00
#define ADDR_INVALID 0x01

#define C_UART   &huart2
#define VERIFY_CRC_FAIL    1
#define VERIFY_CRC_SUCCESS 0
#define SRAM1_SIZE            112*1024     // 1MB = 1024KB, 1KB = 1024bytes
#define SRAM1_END             (SRAM1_BASE + SRAM1_SIZE)
#define SRAM2_SIZE            16*1024     // STM32F446RE has 16KB of SRAM2
#define SRAM2_END             (SRAM2_BASE + SRAM2_SIZE)
#define FLASH_SIZE             1024*1024     // STM32F446RE has 512KB of SRAM2
#define BKPSRAM_SIZE           4*1024     // STM32F446RE has 4KB bakcup sram
#define BKPSRAM_END            (BKPSRAM_BASE + BKPSRAM_SIZE)
#define ADDR_VALID 0x00
#define ADDR_INVALID 0x01
#define INVALID_SECTOR 0x04
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host);
uint8_t verify_address(uint32_t address_desired);
uint8_t get_flash_rdp_level(void);

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector);
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len);
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
static void MX_CRC_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void bootloader_uart_read_data(void);
void bootloader_jump_to_user_app(void);

void bootloader_handle_getver_cmd(uint8_t *uart_buff);
void bootloader_handle_gethelp_cmd(uint8_t *uart_buff);
void bootloader_handle_getcid_cmd(uint8_t *uart_buff);
void bootloader_handle_getrdp_cmd(uint8_t *uart_buff);
void bootloader_handle_go_cmd(uint8_t *uart_buff);
void bootloader_handle_flash_erase_cmd(uint8_t *uart_buff);
void bootloader_handle_mem_write_cmd(uint8_t *uart_buff);
void bootloader_handle_endis_rw_protect(uint8_t *uart_buff);
void bootloader_handle_mem_read(uint8_t *uart_buff);
void bootloader_handle_read_sector_status(uint8_t *uart_buff);
void bootloader_handle_read_otp(uint8_t *uart_buff);

void bootloader_send_ack(uint8_t follow_len);
void bootloader_send_nack(void);

uint8_t crc_verification(uint8_t *pData, uint32_t len, uint32_t crc_host);

uint8_t get_bootloader_version(void);
void bootloader_uart_write_data(uint8_t *version_bootloader, uint32_t length);

uint16_t get_cid(void);





/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  MX_USB_HOST_Init();
  MX_CRC_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)== 1){ //no press blue button is 0

  	  bootloader_uart_read_data();
    }
    else{
  	  bootloader_jump_to_user_app();
    }


}

/**
  * @brief System Clock Configuration
  * @retval None
  */

/*void bootloader_uart_read_data(void){
	uint8_t rcv_len = 0;

	while(1){
		memset(b1_rx_buffer,0,200);
		HAL_UART_Receive(&huart2, &b1_rx_buffer[0], (uint16_t)1, HAL_MAX_DELAY);
		rcv_len =b1_rx_buffer[0];
		HAL_UART_Receive(&huart2, /&b1_rx_buffer[1], (uint16_t)rcv_len, HAL_MAX_DELAY);
		switch(b1_rx_buffer[1]){

		case BL_GET_VER:
				bootloader_handle_getver_cmd(b1_rx_buffer);
				break;
		case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(b1_rx_buffer);
				break;
		case BL_GET_CID:
				bootloader_handle_getcid_cmd(b1_rx_buffer);
				break;
		case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(b1_rx_buffer);
				break;
		case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(b1_rx_buffer);
				break;
		case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(b1_rx_buffer);
				break;
		case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(b1_rx_buffer);
				break;
		case BL_ENDIS_RW_PROTECT:
				bootloader_handle_endis_rw_protect(b1_rx_buffer);
				break;
		case BL_MEM_READ:
				bootloader_handle_mem_read(b1_rx_buffer);
				break;
		case BL_READ_SECTOR_STATUS:
				bootloader_handle_read_sector_status(b1_rx_buffer);
				break;
		case BL_OTP_READ:
				bootloader_handle_read_otp(b1_rx_buffer);
				break;
		default:
				 HAL_UART_Transmit(&huart2,(uint8_t*)for_error, (uint16_t)sizeof(for_error),HAL_MAX_DELAY);
				 uint32_t current_tick = HAL_GetTick();
				 while(HAL_GetTick()<= (current_tick+500));
				 break;

		}
	}

}*/
void  bootloader_uart_read_data(void)
{
    uint8_t rcv_len=0;

	while(1)
	{
		memset(uart_buff,0,200);
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
		HAL_UART_Receive(C_UART,uart_buff,1,HAL_MAX_DELAY);
		rcv_len= uart_buff[0];
		HAL_UART_Receive(C_UART,&uart_buff[1],rcv_len,HAL_MAX_DELAY);
		switch(uart_buff[1])
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(uart_buff);
                break;
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(uart_buff);
                break;
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(uart_buff);
                break;
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(uart_buff);
                break;
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(uart_buff);
                break;
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(uart_buff);
                break;
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(uart_buff);
                break;
            /*case BL_EN_RW_PROTECT:
                bootloader_handle_en_rw_protect(uart_buff);
                break;
            case BL_MEM_READ:
                bootloader_handle_mem_read(uart_buff);
                break;
            case BL_READ_SECTOR_P_STATUS:
                bootloader_handle_read_sector_protection_status(uart_buff);
                break;
            case BL_OTP_READ:
                bootloader_handle_read_otp(uart_buff);
                break;
						case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(uart_buff);
                break;*/
             default:
            	 HAL_UART_Transmit(&huart2,(uint8_t*)for_error, (uint16_t)sizeof(for_error),HAL_MAX_DELAY);
            	 				 uint32_t current_tick = HAL_GetTick();
            	 				 while(HAL_GetTick()<= (current_tick+500));
            	 				 break;


		}

	}

}




void bootloader_jump_to_user_app(void){
    void (*app_reset_handler)(void);

   // volatile	uint32_t msp_value = *(volatile uint32_t *)0x08008000U;

	//__set_MSP (msp_value);

    volatile uint32_t resethandler_address = *(uint32_t*)(0x08008000U+4);
	app_reset_handler = (void*) resethandler_address;
	app_reset_handler();


}
//------------------------------Bootloader Functions Area----------------------------------------------------------------------------------------------------------------
void bootloader_handle_getver_cmd(uint8_t *uart_buff){
	uint8_t bootloader_version;

	uint32_t command_packet_length = uart_buff[0]+1;
	uint32_t host_crc = *(uint32_t*)(uart_buff + command_packet_length - 4);
	// remember uart_buff is an array, so this is just an address of its first element
	// so first location in the array + the length = end of the packet then -4 you'll get to the address
	// of the start of CRC, so dereferncing the address would meanyou'e getting the CRC data

	if(crc_verification(&uart_buff[0], command_packet_length - 4, host_crc )){
		bootloader_send_ack(1);
		bootloader_version = get_bootloader_version();
		bootloader_uart_write_data(&bootloader_version,1);
	}
	else
	{
		bootloader_send_nack();
	}
}



void bootloader_handle_gethelp_cmd(uint8_t *uart_buff){


	uint32_t command_packet_length = uart_buff[0]+1;
	uint32_t host_crc = *(uint32_t*)(uart_buff + command_packet_length - 4);
	// remember uart_buff is an array, so this is just an address of its first element
	// so first location in the array + the length = end of the packet then -4 you'll get to the address
	// of the start of CRC, so dereferncing the address would meanyou'e getting the CRC data

	if(crc_verification(&uart_buff[0], command_packet_length - 4, host_crc )){
		bootloader_send_ack(1);
		//bootloader_uart_write_data((uint8_t*)supported_commands,8);
		HAL_UART_Transmit(&huart2, supported_commands, 8, HAL_MAX_DELAY);

	}
	else
	{
		bootloader_send_nack();
	}

}







void bootloader_handle_getcid_cmd(uint8_t *uart_buff){


	uint16_t bootloader_ID;

		uint32_t command_packet_length = uart_buff[0]+1;
		uint32_t host_crc = *(uint32_t*)(uart_buff + command_packet_length - 4);
		// remember uart_buff is an array, so this is just an address of its first element
		// so first location in the array + the length = end of the packet then -4 you'll get to the address
		// of the start of CRC, so dereferncing the address would meanyou'e getting the CRC data

		if(crc_verification(&uart_buff[0], command_packet_length - 4, host_crc )){
			bootloader_send_ack(1);
			bootloader_ID = get_cid();
			bootloader_uart_write_data((uint8_t*)&bootloader_ID, 2);
		//	HAL_UART_Transmit(&huart2, &bootloader_ID, sizeof(bootloader_ID), HAL_MAX_DELAY);
					}
		else
		{
			bootloader_send_nack();
		}
// I think the problem here is that uart transmit can only send per byte size.... bootloader_ID is 16bits which is 0413 typecasting it to 8 bits will corrupt the data
//	into  just 13, so try making an uint8_t array to hold the data then just send the the address of the first element, but with size 2
		/*

 	 void transmit_uint32(uint32_t value) {
    uint8_t data[4];

    // Split uint32_t into 4 bytes (little-endian format)
    data[0] = (value & 0xFF);
    data[1] = (value >> 8) & 0xFF;
    data[2] = (value >> 16) & 0xFF;
    data[3] = (value >> 24) & 0xFF;

    HAL_UART_Transmit(&huart2, data, 4, HAL_MAX_DELAY);
     }
		 * */
}


void bootloader_handle_getrdp_cmd(uint8_t *uart_buff){
		uint8_t rdp = 0;

		uint32_t command_packet_length = uart_buff[0]+1;
		uint32_t host_crc = *(uint32_t*)(uart_buff + command_packet_length - 4);

		if(crc_verification(&uart_buff[0], command_packet_length - 4, host_crc )){
			bootloader_send_ack(1);
			rdp = get_flash_rdp_level();
			HAL_UART_Transmit(&huart2, &rdp, sizeof(rdp), HAL_MAX_DELAY);

		}
		else
		{
			bootloader_send_nack();
		}
}

void bootloader_handle_go_cmd(uint8_t *uart_buff){

		volatile uint32_t address_desired=0;
		char invalid[] = "address is invalid\r\n";

		uint32_t command_packet_len = uart_buff[0]+1 ;

		uint32_t host_crc = *((uint32_t * ) (uart_buff+command_packet_len - 4) ) ;

		if (crc_verification(&uart_buff[0],command_packet_len-4,host_crc))
		{
	        bootloader_send_ack(1);
	        address_desired = *((uint32_t *)&uart_buff[2] );
	        if( verify_address(address_desired) == 0 )
	        {

	            void (*execute)(void) = (void *)address_desired;
	            execute();
			}else
			{
				HAL_UART_Transmit(&huart2,(uint8_t*)invalid,(uint16_t)sizeof(invalid), HAL_MAX_DELAY);
			}

		}else
		{

	        bootloader_send_nack();
		}


}




void bootloader_handle_flash_erase_cmd(uint8_t *uart_buff){
	 	 uint8_t erase_status = 0x00;
	 	 uint32_t command_packet_len = uart_buff[0]+1 ;


		uint32_t host_crc = *((uint32_t * ) (uart_buff+command_packet_len - 4) ) ;

		if (crc_verification(&uart_buff[0],command_packet_len-4,host_crc))
		{
	        bootloader_send_ack(1);
	        erase_status = execute_flash_erase(uart_buff[2] , uart_buff[3]);
	        bootloader_uart_write_data(&erase_status,1);

		}else
		{
			bootloader_send_nack();
		}

}

void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
	//uint8_t addr_valid = ADDR_VALID;
	uint8_t write_status = 0x00;
	//uint8_t chksum =0, len=0;
	//len = pBuffer[0];
	uint8_t payload_len = pBuffer[6];
	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
	//chksum = pBuffer[len];

	uint32_t command_packet_len = uart_buff[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (uart_buff+command_packet_len - 4) ) ;
	if (! bootloader_verify_crc(&uart_buff[0],command_packet_len-4,host_crc))
	{
        bootloader_send_ack(1);
		if( verify_address(mem_address) == ADDR_VALID )
		{
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
            bootloader_uart_write_data(&write_status,1);

		}else
		{
            write_status = ADDR_INVALID;
            bootloader_uart_write_data(&write_status,1);
		}

	}else
	{
        bootloader_send_nack();
	}

}

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
    uint8_t status=HAL_OK;

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();

    for(uint32_t i = 0 ; i <len ; i++)
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
    }

    HAL_FLASH_Lock();

    return status;
}





/*void bootloader_handle_mem_write_cmd(uint8_t *uart_buff){

}*/
void bootloader_handle_endis_rw_protect(uint8_t *uart_buff){

}
void bootloader_handle_mem_read(uint8_t *uart_buff){

}
void bootloader_handle_read_sector_status(uint8_t *uart_buff){

}
void bootloader_handle_read_otp(uint8_t *uart_buff){

}







//-------------------------------get ver space------------------------------------------------------------------------------------------------------

void bootloader_send_ack(uint8_t follow_len){
	//length to follow depends on the commands
	uint8_t ack_buf[2];
	ack_buf[0] = 0xA5;
	ack_buf[1] = follow_len;
	HAL_UART_Transmit(&huart2, ack_buf, 2, HAL_MAX_DELAY);
}

void bootloader_send_nack(void){
	uint8_t nack = 0x7F;

	HAL_UART_Transmit(&huart2, &nack, 1, HAL_MAX_DELAY);
}

uint8_t crc_verification(uint8_t *pData, uint32_t len, uint32_t crc_host){
	uint32_t uwCRCValue=0xff;

	for (uint32_t i =0; i < len; i++){
		uint32_t i_data = pData[i];
		uwCRCValue = HAL_CRC_Accumulate(&hcrc,&i_data, 1);
	}
	if(uwCRCValue == crc_host){
		return 1;
	}
	return 0;
}


uint8_t get_bootloader_version(void){
	return (uint8_t)bootloader_ver;
}


void bootloader_uart_write_data(uint8_t *version_bootloader, uint32_t length){

	HAL_UART_Transmit(&huart2, version_bootloader, length, HAL_MAX_DELAY);

}

//-----------------------------------------------------------------------------------------------------------------------

uint16_t get_cid(void){
	uint32_t *cid_full;
	uint16_t cid;
	cid_full = (uint32_t*)DBGMCU_BASE;
	cid = *cid_full & 0x0FFF ;


	return cid;
}

uint8_t get_flash_rdp_level(void)
{

	uint8_t rdp=0;


	uint16_t rdp_buffer;
	volatile uint32_t *rdp_address = (uint32_t*) 0x1FFFC000;
	rdp_buffer = *rdp_address;
	rdp = (uint8_t)((rdp_buffer & 0xFF00)>>8);


	return rdp;


}

uint8_t verify_address(uint32_t address_desired)
{
	if ( address_desired >= SRAM1_BASE && address_desired <= SRAM1_END)
	{
		return 0;
	}
	else if ( address_desired >= SRAM2_BASE && address_desired <= SRAM2_END)
	{
		return 0;
	}
	else if ( address_desired >= FLASH_BASE && address_desired <= FLASH_END)
	{
		return 0 ;
	}
	else if ( address_desired >= BKPSRAM_BASE && address_desired <= BKPSRAM_END)
	{
		return 0;
	}
	else
		return 1;
}

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
		return INVALID_SECTOR;

	if( (sector_number == 0xff ) || (sector_number <= 7) )
	{
		if(sector_number == (uint8_t) 0xff)
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
		}
		else
		{
			uint8_t remanining_sector = 8 - sector_number;
            if( number_of_sector > remanining_sector)
            {
            	number_of_sector = remanining_sector;
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
			flashErase_handle.Sector = sector_number;
			flashErase_handle.NbSectors = number_of_sector;
		}
		flashErase_handle.Banks = FLASH_BANK_1;


		HAL_FLASH_Unlock();
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
		HAL_FLASH_Lock();

		return status;
	}


	return INVALID_SECTOR;
}







//---------------------------------------------learning code------------------------------------------------------------------------

uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
    uint32_t uwCRCValue=0xff;

    for (uint32_t i=0 ; i < len ; i++)
	{
        uint32_t i_data = pData[i];
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
	}


  __HAL_CRC_DR_RESET(&hcrc);

	if( uwCRCValue == crc_host)
	{
		return VERIFY_CRC_SUCCESS;
	}

	return VERIFY_CRC_FAIL;
}





//---------------------------------------------------------------------------------------------------------------------------------------------


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{

  /* USER CODE BEGIN I2S3_Init 0 */

  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
